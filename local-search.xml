<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>清浮动</title>
    <link href="/2022/05/14/%E6%B8%85%E6%B5%AE%E5%8A%A8/"/>
    <url>/2022/05/14/%E6%B8%85%E6%B5%AE%E5%8A%A8/</url>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>最近在学习CSS样式的浮动属性时，了解到浮动带来好处的同时也会产生一定的负作用，本篇博客针对清浮动方案进行总结并谈谈自己的理解</p><h1 id="浮动属性的介绍"><a href="#浮动属性的介绍" class="headerlink" title="浮动属性的介绍"></a>浮动属性的介绍</h1><p>在大多数页面设计需求种，我们会将页面分为多个部分，每个部分都用div元素包裹起来。由于div元素属于<code>块元素</code>，可以设置宽高并且独占一行。但是在实际设计过程中，更多地方需要我们将这些div进行并排排列，这就需要利用浮动来解决此需求</p><h1 id="浮动带来的缺陷"><a href="#浮动带来的缺陷" class="headerlink" title="浮动带来的缺陷"></a>浮动带来的缺陷</h1><p>父元素内的子元素采用浮动设置布局之后，会造成父元素<font color="#dc143c"><strong>高度塌陷</strong></font>。通过下面的代码：</p><figure class="highlight xml"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></div></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">http-equiv</span>=<span class="hljs-string">&quot;X-UA-Compatible&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;IE=edge&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;viewport&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Document<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="language-css"></span><br><span class="language-css">        <span class="hljs-selector-class">.child1</span> &#123;</span><br><span class="language-css">            <span class="hljs-attribute">width</span>: <span class="hljs-number">200px</span>;</span><br><span class="language-css">            <span class="hljs-attribute">height</span>: <span class="hljs-number">200px</span>;</span><br><span class="language-css">            <span class="hljs-attribute">background-color</span>: red;</span><br><span class="language-css">            <span class="hljs-attribute">float</span>: left;</span><br><span class="language-css">        &#125;</span><br><span class="language-css">        <span class="hljs-selector-class">.child2</span> &#123;</span><br><span class="language-css">            <span class="hljs-attribute">width</span>: <span class="hljs-number">200px</span>;</span><br><span class="language-css">            <span class="hljs-attribute">height</span>: <span class="hljs-number">200px</span>;</span><br><span class="language-css">            <span class="hljs-attribute">background-color</span>: blue;</span><br><span class="language-css">            <span class="hljs-attribute">float</span>: left;</span><br><span class="language-css">        &#125;</span><br><span class="language-css">        <span class="hljs-selector-class">.brother</span> &#123;</span><br><span class="language-css">            <span class="hljs-attribute">width</span>: <span class="hljs-number">600px</span>;</span><br><span class="language-css">            <span class="hljs-attribute">height</span>: <span class="hljs-number">100px</span>;</span><br><span class="language-css">            <span class="hljs-attribute">background-color</span>: green;</span><br><span class="language-css">        &#125;</span><br><span class="language-css">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;father&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;child1&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;child2&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;brother&quot;</span>&gt;</span><br>        <br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><p>可以看到下图三个<code>div</code>，其中<code>child1</code>与<code>child2</code>采取左浮动，是的红色块与蓝色块并排排列。但是<code>brother</code>绿色块想要排列在红、蓝色的下面确失败了。</p><style>    .child1 {        width: 200px;        height: 200px;        background-color: red;        float: left;    }    .child2 {        width: 200px;        height: 200px;        background-color: blue;        float: left;    }    .brother {        width: 600px;        height: 100px;        background-color: green;     }</style><div class="father">    <div class="child1"></div>    <div class="child2"></div></div><div class="brother">        </div><div style="clear:left;">造成这样的原因是<font color="#dc143c" style="font-weight:bolder">father</font>元素高度塌陷，此时它的高度为0，如下图①②处可以看到，此时<font color="#dc143c" style="font-weight:bolder">father</font>的高度为0，因此当<font color="#dc143c" style="font-weight:bolder">brother<font>会自动顶到页面顶部</font></font></div><p><img src="https://cdn.jsdelivr.net/gh/MinghuiJia/CDN-source/Clear_Float/clearFloat1.png"></p><h1 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h1><ul><li><p>设置父元素的高度</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="language-css"></span><br><span class="language-css">    <span class="hljs-selector-class">.father</span> &#123;</span><br><span class="language-css">        <span class="hljs-attribute">height</span>: <span class="hljs-number">200px</span>;</span><br><span class="language-css">    &#125;</span><br><span class="language-css"></span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>在外部元素种设置清浮动</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="language-css"></span><br><span class="language-css">    <span class="hljs-selector-class">.brother</span> &#123;</span><br><span class="language-css">        <span class="hljs-attribute">width</span>: <span class="hljs-number">600px</span>;</span><br><span class="language-css">        <span class="hljs-attribute">height</span>: <span class="hljs-number">100px</span>;</span><br><span class="language-css">        <span class="hljs-attribute">background-color</span>: green;</span><br><span class="language-css">        <span class="hljs-attribute">clear</span>: left;</span><br><span class="language-css">    &#125;</span><br><span class="language-css"></span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>在父元素种新建没有大小的<code>div</code>，并对此设置清浮动</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;father&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;child1&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;child2&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;clear: left;&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;brother&quot;</span>&gt;</span><br>        <br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>在父元素种设置溢出</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="language-css"></span><br><span class="language-css">    <span class="hljs-selector-class">.father</span> &#123;</span><br><span class="language-css">        <span class="hljs-comment">/* height: 200px; */</span></span><br><span class="language-css">        <span class="hljs-attribute">overflow</span>: hidden;</span><br><span class="language-css">    &#125;</span><br><span class="language-css"></span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br></code></pre></td></tr></table></figure></li></ul><p>上述四种方法均可以实现浮动清除效果，效果图如下：<br><img src="https://cdn.jsdelivr.net/gh/MinghuiJia/CDN-source/Clear_Float/clearFloat2.png"><br>此时父元素的高度也<font color="#dc143c"><strong>被撑起</strong></font>变为了200px</p><h1 id="为何设置overflow-hidden可以清浮动"><a href="#为何设置overflow-hidden可以清浮动" class="headerlink" title="为何设置overflow:hidden可以清浮动"></a>为何设置overflow:hidden可以清浮动</h1><h2 id="BFC概念"><a href="#BFC概念" class="headerlink" title="BFC概念"></a>BFC概念</h2><p><font color="#dc143c"><strong>BFC（block formatting context）</strong></font>，名为<strong>块级格式化上下文</strong><br>以下情况会触发BFC：</p><ul><li><html>根元素</html></li><li>float的值不为none</li><li>overflow的值为auto，scroll，hidden</li><li>display的值为table-cell，table-caption和inline–block中的任何一个</li><li>position的值不为relative和static</li></ul><p>BFC具有如下原则：</p><div class="note note-info">            <p>元素具有BFC，内部元素的任何设置都不会影响外部元素（具有BFC元素不可能发生<font color="#dc143c"><strong>margin重叠</strong></font>）</p>          </div><p>因此，在父元素种设置overflow:hidden后，该元素具有BFC，不会影响外部其他元素，内部子元素设置浮动不会造成父元素的高度塌陷</p><div class="note note-warning">            <p>overflow并不是只有设置为hidden，如果div中的元素过多，设置hidden后超出父元素之外的会被隐藏，也可以使用auto或scroll，根据具体的业务场景进行选择即可</p>          </div><h1 id="为何在父元素内使用空标记可以清除浮动"><a href="#为何在父元素内使用空标记可以清除浮动" class="headerlink" title="为何在父元素内使用空标记可以清除浮动"></a>为何在父元素内使用空标记可以清除浮动</h1><ul><li>在父元素内添加一个空<code>div</code>元素，并设置<code>clear: left;</code>它会告诉浏览器，我的左边不允许有浮动元素存在。然而由于它的其他兄弟元素（浮动元素）已经确定位置，浏览器在计算当前空<code>div</code>位置时，会将它渲染在浮动元素下面，从而保证左侧没有浮动元素。</li><li>这一操作使得父元素高度也被撑起，是因为空<code>div</code>仍然在文档流中，它必须在父元素的边界内，父元素只有增加高度才能达到此目的。</li><li>因此，空<code>div</code>需要在父元素结束标签之前插入，并且插入的元素属于块元素才可以实现该效果</li></ul><h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><ul><li>为什么设置overflow为hidden可以清除浮动带来的影响：<a href="https://article.itxueyuan.com/qpZ1j">https://article.itxueyuan.com/qpZ1j</a></li><li>清除浮动的四种方式及其原理理解：<a href="https://juejin.cn/post/6844903504545316877">https://juejin.cn/post/6844903504545316877</a></li><li>前端面试CSS系列——清除浮动：<a href="https://zhuanlan.zhihu.com/p/382607439">https://zhuanlan.zhihu.com/p/382607439</a></li></ul>]]></content>
    
    
    <categories>
      
      <category>CSS</category>
      
    </categories>
    
    
    <tags>
      
      <tag>CSS</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Windows下Python2.7安装第三方库编码错误</title>
    <link href="/2022/05/10/Windows%E4%B8%8BPython2-7%E5%AE%89%E8%A3%85%E7%AC%AC%E4%B8%89%E6%96%B9%E5%BA%93%E7%BC%96%E7%A0%81%E9%94%99%E8%AF%AF/"/>
    <url>/2022/05/10/Windows%E4%B8%8BPython2-7%E5%AE%89%E8%A3%85%E7%AC%AC%E4%B8%89%E6%96%B9%E5%BA%93%E7%BC%96%E7%A0%81%E9%94%99%E8%AF%AF/</url>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>前两天为了使用Python的ArcPy第三方库，我重新在电脑上安装了ArcGIS10.4。由于ArcGIS自带的Python版本是2.7且只装有部分基础库，我的需求是更新Python2.7版本中的Numpy库，用于矩阵乘法的计算。但是在安装过程中出现了编码问题，特此记录一下解决方案</p><h1 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h1><ul><li>我进入到Python2.7安装路径下有exe可执行文件的文件夹下，在cmd命令行中输入：<figure class="highlight awk"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><pre><code class="hljs awk">python -m pip install numpy -i https:<span class="hljs-regexp">//</span>pypi.tuna.tsinghua.edu.cn/simple<br></code></pre></td></tr></table></figure>安装过程中报错<div class="note note-warning">            <p><strong>UnicodeDecodeError: ‘ascii’ codec can’t decode byte 0xcb in position 0:</strong></p>          </div></li></ul><h1 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h1><ul><li>报错的原因是与编码有关，pip把下载的临时文件放在用户临时文件中，可能路径中存在中文，导致ascii无法解码</li><li>找到Python2.7目录下下的<code>Lib</code>文件夹中的<code>ntpath.pt</code>文件打开，并找到<code>def join(path, *path):</code>方法，在函数下添加如下两行代码：<figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-function"><span class="hljs-title">reload</span><span class="hljs-params">(sys)</span></span>  <br>sys<span class="hljs-selector-class">.setdefaultencoding</span>(<span class="hljs-string">&#x27;gbk&#x27;</span>)<br></code></pre></td></tr></table></figure></li></ul><h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><p>window下安装numpy出现UnicodeDecodeError：<a href="https://blog.csdn.net/wfei101/article/details/76166923">https://blog.csdn.net/wfei101/article/details/76166923</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Qt读取Excel数据</title>
    <link href="/2022/05/10/Qt%E8%AF%BB%E5%8F%96Excel%E6%95%B0%E6%8D%AE/"/>
    <url>/2022/05/10/Qt%E8%AF%BB%E5%8F%96Excel%E6%95%B0%E6%8D%AE/</url>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>作者写本篇博客的原因是，在前段时间基于Qt进行GUI程序开发过程中需要读取经济面板数据并将数据传入已写好的计量经济学模型中。因此我在网上查找了基于Qt读取Excel的教程，在这里做一个总结和归纳，方便以后需要相同需求时随时查看</p><h1 id="Excel读取库"><a href="#Excel读取库" class="headerlink" title="Excel读取库"></a>Excel读取库</h1><ul><li><p>ExcelEngine.h</p><figure class="highlight reasonml"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br></pre></div></td><td class="code"><pre><code class="hljs reasonml">#ifndef EXCELENGINE_H<br>#define EXCELENGINE_H<br>#<span class="hljs-keyword">include</span> &lt;ActiveQt/QAxObject&gt;<br>#<span class="hljs-keyword">include</span> &lt;<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Windows</span>.</span></span>h&gt;<br>#<span class="hljs-keyword">include</span> &lt;QFile&gt;<br>#<span class="hljs-keyword">include</span> &lt;QStringList&gt;<br>#<span class="hljs-keyword">include</span> &lt;QString&gt;<br><br><span class="hljs-keyword">class</span> ExcelEngine<br>&#123;<br>public:<br>    <span class="hljs-constructor">ExcelEngine(<span class="hljs-params">void</span>)</span>;<br>    <span class="hljs-constructor">ExcelEngine(<span class="hljs-params">const</span> QString <span class="hljs-params">file_Name</span>)</span>;<br>    ~<span class="hljs-constructor">ExcelEngine(<span class="hljs-params">void</span>)</span>;<br>    <br>    <span class="hljs-comment">// 打开Excel</span><br>    <span class="hljs-built_in">bool</span> <span class="hljs-keyword">open</span>(<span class="hljs-built_in">bool</span> visible = <span class="hljs-literal">false</span>,<span class="hljs-built_in">bool</span> display_Alerts = <span class="hljs-literal">false</span>);    <br><br>    <span class="hljs-comment">// 通过Index获取sheet工作表</span><br>    QAxObject *get<span class="hljs-constructor">WorkSheet(<span class="hljs-params">int</span> Sheet_Index)</span>;<br><br>    <span class="hljs-comment">// 通过SheetName获取sheet工作表</span><br>    QAxObject *get<span class="hljs-constructor">WorkSheet(QString <span class="hljs-params">sheet_Name</span>)</span>;<br><br>    <span class="hljs-comment">// 通过索引值获取工作表（workSheet）的表明</span><br>    QString get<span class="hljs-constructor">WorkSheetNameByIndex(<span class="hljs-params">int</span> <span class="hljs-params">inedx</span>)</span>;<br><br>    <span class="hljs-comment">// 获取WorkSheets工作表名列表</span><br>    QStringList get<span class="hljs-constructor">WorkSheetNameList(<span class="hljs-params">void</span>)</span>;<br><br>    <span class="hljs-comment">// 获取单元格内容</span><br>    QString get<span class="hljs-constructor">CellString(<span class="hljs-params">int</span> <span class="hljs-params">workSheet_Index</span>,<span class="hljs-params">int</span> <span class="hljs-params">row</span>,<span class="hljs-params">int</span> <span class="hljs-params">column</span>)</span>;<br><br>    <span class="hljs-comment">// 获取单元格内容</span><br>    QString get<span class="hljs-constructor">CellString(QString <span class="hljs-params">workSheet_Name</span>,<span class="hljs-params">int</span> <span class="hljs-params">row</span>,<span class="hljs-params">int</span> <span class="hljs-params">column</span>)</span>;<br><br>    <span class="hljs-comment">// 获取workSheet的行数</span><br>    <span class="hljs-built_in">int</span> get<span class="hljs-constructor">WorkSheetRows(QString <span class="hljs-params">workSheet_Name</span>)</span>;<br><br>    <span class="hljs-comment">// 获取workSheet的行数</span><br>    <span class="hljs-built_in">int</span> get<span class="hljs-constructor">WorkSheetRows(<span class="hljs-params">int</span>  <span class="hljs-params">workSheet_Index</span>)</span>;<br><br>    <span class="hljs-comment">// 获取workSheet的列数</span><br>    <span class="hljs-built_in">int</span> get<span class="hljs-constructor">WorkSheetColumns(QString <span class="hljs-params">workSheet_Name</span>)</span>;<br><br>    <span class="hljs-comment">// 获取workSheet的列数</span><br>    <span class="hljs-built_in">int</span> get<span class="hljs-constructor">WorkSheetColumns(<span class="hljs-params">int</span> <span class="hljs-params">workSheet_Index</span>)</span>;<br><br>    <span class="hljs-comment">// 保存（写操作时需要要保存）</span><br>    <span class="hljs-built_in">bool</span> save(void);<br><br>    <span class="hljs-comment">// 关闭资源（释放资源）</span><br>    void close(void);<br><br><span class="hljs-keyword">private</span>:<br>    <span class="hljs-comment">// 设置窗体是否可见</span><br>    <span class="hljs-built_in">bool</span> set<span class="hljs-constructor">Visible(<span class="hljs-params">bool</span> <span class="hljs-params">visible</span> = <span class="hljs-params">false</span>)</span>;<br><br>    <span class="hljs-comment">// 释放资源</span><br>    void release(void);<br><br><span class="hljs-keyword">private</span>:<br>    <span class="hljs-built_in">bool</span> m_IsOpened;<br><br>    <span class="hljs-comment">// EXCEL程序指针</span><br>    QAxObject *m_Excel;<br><br>    <span class="hljs-comment">// 工作簿集</span><br>    QAxObject *m_WorkBooks;<br><br>    <span class="hljs-comment">// 当前活动的工作簿</span><br>    QAxObject *m_WorkBook;<br><br>    <span class="hljs-comment">// 当前活动工作簿的工作表集（即所有的sheet表）</span><br>    QAxObject *m_WorkSheets;<br><br>    <span class="hljs-comment">// 工作簿（m_WorkBook）中工作表（workSheet）的个数</span><br>    <span class="hljs-built_in">int</span> m_WorkSheetCount;<br><br>    <span class="hljs-comment">// 文件名</span><br>    QString m_FileName;<br><br>&#125;;<br><br>#endif <span class="hljs-comment">// EXCELENGINE_H</span><br></code></pre></td></tr></table></figure></li><li><p>ExcelEngine.cpp</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br></pre></td><td class="code"><pre><code class="hljs reasonml">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;ExcelEngine.h&quot;</span><br><br>ExcelEngine::<span class="hljs-constructor">ExcelEngine(<span class="hljs-params">void</span>)</span>:<br>    m<span class="hljs-constructor">_IsOpened(<span class="hljs-params">false</span>)</span>,<br>    m<span class="hljs-constructor">_Excel(<span class="hljs-params">nullptr</span>)</span>,<br>    m<span class="hljs-constructor">_WorkBooks(<span class="hljs-params">nullptr</span>)</span>,<br>    m<span class="hljs-constructor">_WorkBook(<span class="hljs-params">nullptr</span>)</span>,<br>    m<span class="hljs-constructor">_WorkSheets(<span class="hljs-params">nullptr</span>)</span>,<br>    m<span class="hljs-constructor">_WorkSheetCount(0)</span>,<br>    m<span class="hljs-constructor">_FileName()</span><br>&#123;<br>    <span class="hljs-comment">// 打开当前进程的COM并释放相关资源</span><br>    <span class="hljs-constructor">OleInitialize(0)</span>;<br>&#125;<br><br>ExcelEngine::<span class="hljs-constructor">ExcelEngine(<span class="hljs-params">const</span> QString <span class="hljs-params">file_Name</span>)</span>:<br>    m<span class="hljs-constructor">_IsOpened(<span class="hljs-params">false</span>)</span>,<br>    m<span class="hljs-constructor">_Excel(<span class="hljs-params">nullptr</span>)</span>,<br>    m<span class="hljs-constructor">_WorkBooks(<span class="hljs-params">nullptr</span>)</span>,<br>    m<span class="hljs-constructor">_WorkBook(<span class="hljs-params">nullptr</span>)</span>,<br>    m<span class="hljs-constructor">_WorkSheets(<span class="hljs-params">nullptr</span>)</span>,<br>    m<span class="hljs-constructor">_WorkSheetCount(0)</span>,<br>    m<span class="hljs-constructor">_FileName(<span class="hljs-params">file_Name</span>)</span><br>&#123;<br>    <span class="hljs-comment">// 打开当前进程的COM并释放相关资源</span><br>    <span class="hljs-constructor">OleInitialize(0)</span>;<br>&#125;<br><br>ExcelEngine::~<span class="hljs-constructor">ExcelEngine(<span class="hljs-params">void</span>)</span><br>&#123;<br>    release<span class="hljs-literal">()</span>;<br>    <span class="hljs-comment">// 关闭当前进程的COM并释放相关资源</span><br>    <span class="hljs-constructor">OleUninitialize()</span>;<br>&#125;<br><br><span class="hljs-comment">// 打开Excel，如果不存在则创建</span><br><span class="hljs-built_in">bool</span> ExcelEngine::<span class="hljs-keyword">open</span>(<span class="hljs-built_in">bool</span> visible ,<span class="hljs-built_in">bool</span> display_Alerts )<br>&#123;<br>    <span class="hljs-comment">// 检测文件名是否为空</span><br>    <span class="hljs-keyword">if</span> (m_FileName.is<span class="hljs-constructor">Empty()</span>)<br>    &#123;<br>        <span class="hljs-comment">// 返回异常（文件名不存在）</span><br>        return <span class="hljs-literal">false</span>;<br>    &#125;<br><br>    QFile file(m_FileName);<br><br>    <span class="hljs-keyword">if</span> (file.exists<span class="hljs-literal">()</span>)<br>    &#123;<br>        <span class="hljs-comment">// 文件存在，但没有以只读状态打开成功</span><br>        <span class="hljs-keyword">if</span> (!file.<span class="hljs-keyword">open</span>(QIODevice::ReadOnly))<br>        &#123;<br>            <span class="hljs-comment">// 返回异常（文件存在但是未能以只读状态打开）</span><br>            return <span class="hljs-literal">false</span>;<br>        &#125;<br><br>        file.close<span class="hljs-literal">()</span>;<br>    &#125;<br>    <span class="hljs-keyword">else</span><br>    &#123;<br>        <span class="hljs-comment">// 返回异常（文件不存在）</span><br>        return <span class="hljs-literal">false</span>;<br>    &#125;<br><br>    <span class="hljs-comment">// Excel的程序对象指针</span><br>    m_Excel = <span class="hljs-keyword">new</span> QAxObject;<br><br>    <span class="hljs-comment">// 链接Excel控件（用Office的Excel打开Excel文档）</span><br>    <span class="hljs-built_in">bool</span> isOpened = m_Excel-&gt;set<span class="hljs-constructor">Control(<span class="hljs-string">&quot;Excel.Application&quot;</span>)</span>;<br><br>    <span class="hljs-keyword">if</span> (!isOpened)<br>    &#123;<br>        <span class="hljs-comment">// 用WPS打开Excel文件</span><br>        isOpened = m_Excel-&gt;set<span class="hljs-constructor">Control(<span class="hljs-string">&quot;ket.Application&quot;</span>)</span>;<br><br>        <span class="hljs-comment">// 如果Office和WPS都无法打开则返回false</span><br>        <span class="hljs-keyword">if</span> (!isOpened)<br>        &#123;<br>            <span class="hljs-comment">// 返回异常（Excel和WPS打开excel文件均未成功）</span><br>            return <span class="hljs-literal">false</span>;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">// 不显示窗体</span><br>    m_Excel-&gt;dynamic<span class="hljs-constructor">Call(<span class="hljs-string">&quot;SetVisible(bool)&quot;</span>, <span class="hljs-params">visible</span>)</span>;<br><br>    <span class="hljs-comment">// 不显示警告</span><br>    m_Excel-&gt;set<span class="hljs-constructor">Property(<span class="hljs-string">&quot;DisplayAlerts&quot;</span>, <span class="hljs-params">display_Alerts</span>)</span>;<br><br>    <span class="hljs-comment">// 获取Excel工作簿集合对象</span><br>    m_WorkBooks = m_Excel-&gt;query<span class="hljs-constructor">SubObject(<span class="hljs-string">&quot;WorkBooks&quot;</span>)</span>;<br><br>    <span class="hljs-comment">// 打开Excel文件</span><br>    m_WorkBooks-&gt;dynamic<span class="hljs-constructor">Call(<span class="hljs-string">&quot;Open(const QString &amp;)&quot;</span>,<span class="hljs-params">m_FileName</span>)</span>;<br><br>    <span class="hljs-comment">// 当前活动工作簿</span><br>    m_WorkBook = m_Excel-&gt;query<span class="hljs-constructor">SubObject(<span class="hljs-string">&quot;ActiveWorkBook&quot;</span>)</span>;<br><br>    <span class="hljs-keyword">if</span> (m_WorkBook<span class="hljs-operator"> == </span>nullptr)<br>    &#123;<br>        <span class="hljs-comment">// 返回异常（当前活动工作簿打开失败）</span><br>        return <span class="hljs-literal">false</span>;<br>    &#125;<br><br>    <span class="hljs-comment">// 工作表集</span><br>    m_WorkSheets = m_WorkBook-&gt;query<span class="hljs-constructor">SubObject(<span class="hljs-string">&quot;WorkSheets&quot;</span>)</span>;<br><br>    <span class="hljs-comment">// 工作表的个数</span><br>    m_WorkSheetCount = m_WorkSheets-&gt;dynamic<span class="hljs-constructor">Call(<span class="hljs-string">&quot;Count&quot;</span>)</span>.<span class="hljs-keyword">to</span><span class="hljs-constructor">Int()</span>;<br><br><br>    <span class="hljs-keyword">if</span>(m_WorkSheets<span class="hljs-operator"> == </span>nullptr)<br>    &#123;<br>        <span class="hljs-comment">// 返回异常（当前表格集WorkSheets不存在，打开失败!）</span><br>        return <span class="hljs-literal">false</span>;<br>    &#125;<br><br>    m_IsOpened = <span class="hljs-literal">true</span>;<br>    return m_IsOpened;<br>&#125;<br><br><span class="hljs-comment">// 设置窗体是否可见</span><br><span class="hljs-built_in">bool</span> ExcelEngine::set<span class="hljs-constructor">Visible(<span class="hljs-params">bool</span> <span class="hljs-params">visible</span> )</span><br>&#123;<br>    <span class="hljs-keyword">if</span> (m_Excel<span class="hljs-operator"> == </span>nullptr)<br>    &#123;<br>        return <span class="hljs-literal">false</span>;<br>    &#125;<br>    <span class="hljs-keyword">else</span><br>    &#123;<br>        m_Excel-&gt;dynamic<span class="hljs-constructor">Call(<span class="hljs-string">&quot;SetVisible(bool)&quot;</span>, <span class="hljs-params">visible</span>)</span>;<br>        return <span class="hljs-literal">true</span>;<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">// 获取索引出的sheet（第一个就是1，不是0）</span><br>QAxObject *ExcelEngine::get<span class="hljs-constructor">WorkSheet(<span class="hljs-params">int</span> <span class="hljs-params">sheet_Index</span>)</span><br>&#123;<br>    QAxObject *workSheet = m_WorkBook-&gt;query<span class="hljs-constructor">SubObject(<span class="hljs-string">&quot;Worksheets(int)&quot;</span>,<span class="hljs-params">sheet_Index</span>)</span>;<br>    return workSheet;<br>&#125;<br><br><span class="hljs-comment">// 通过SheetName获取sheet</span><br>QAxObject *ExcelEngine::get<span class="hljs-constructor">WorkSheet(QString <span class="hljs-params">sheet_Name</span>)</span><br>&#123;<br>    QAxObject *workSheet = m_WorkBook-&gt;query<span class="hljs-constructor">SubObject(<span class="hljs-string">&quot;Worksheets(QString)&quot;</span>,<span class="hljs-params">sheet_Name</span>)</span>;<br>    return workSheet;<br>&#125;<br><br><span class="hljs-comment">// 获取单元格内容</span><br>QString ExcelEngine::get<span class="hljs-constructor">CellString(<span class="hljs-params">int</span> <span class="hljs-params">workSheet_Index</span>,<span class="hljs-params">int</span> <span class="hljs-params">row</span>,<span class="hljs-params">int</span> <span class="hljs-params">column</span>)</span><br>&#123;<br>    QAxObject *workSheet = get<span class="hljs-constructor">WorkSheet(<span class="hljs-params">workSheet_Index</span>)</span>;<br><br>    <span class="hljs-keyword">if</span>(workSheet<span class="hljs-operator"> == </span>nullptr)<br>    &#123;<br>        return <span class="hljs-string">&quot;&quot;</span>;<br>    &#125;<br><br>    QAxObject *range = workSheet-&gt;query<span class="hljs-constructor">SubObject(<span class="hljs-string">&quot;Cell(int,int)&quot;</span>,<span class="hljs-params">row</span>,<span class="hljs-params">column</span>)</span>;<br><br>    <span class="hljs-keyword">if</span>(range<span class="hljs-operator"> == </span>nullptr)<br>    &#123;<br>        return <span class="hljs-string">&quot;&quot;</span>;<br>    &#125;<br><br>    QString cellTdext = range-&gt;dynamic<span class="hljs-constructor">Call(<span class="hljs-string">&quot;Value2()&quot;</span>)</span>.<span class="hljs-keyword">to</span><span class="hljs-constructor">String()</span>;<br><br>    return cellTdext;<br>&#125;<br><br><span class="hljs-comment">// 获取单元格内容</span><br>QString ExcelEngine::get<span class="hljs-constructor">CellString(QString <span class="hljs-params">workSheet_Name</span>,<span class="hljs-params">int</span> <span class="hljs-params">row</span>,<span class="hljs-params">int</span> <span class="hljs-params">column</span>)</span><br>&#123;<br>    QAxObject *workSheet = get<span class="hljs-constructor">WorkSheet(<span class="hljs-params">workSheet_Name</span>)</span>;<br><br>    <span class="hljs-keyword">if</span>(workSheet<span class="hljs-operator"> == </span>nullptr)<br>    &#123;<br>        return <span class="hljs-string">&quot;&quot;</span>;<br>    &#125;<br><br>    QAxObject *range = workSheet-&gt;query<span class="hljs-constructor">SubObject(<span class="hljs-string">&quot;Cells(int,int)&quot;</span>,<span class="hljs-params">row</span>,<span class="hljs-params">column</span>)</span>;<br><br>    <span class="hljs-keyword">if</span>(range<span class="hljs-operator"> == </span>nullptr)<br>    &#123;<br>        return <span class="hljs-string">&quot;&quot;</span>;<br>    &#125;<br><br>    QString cellTdext = range-&gt;dynamic<span class="hljs-constructor">Call(<span class="hljs-string">&quot;Value2()&quot;</span>)</span>.<span class="hljs-keyword">to</span><span class="hljs-constructor">String()</span>;<br><br>    return cellTdext;<br>&#125;<br><br><span class="hljs-comment">// 获取workSheet的行数</span><br><span class="hljs-built_in">int</span> ExcelEngine::get<span class="hljs-constructor">WorkSheetRows(QString <span class="hljs-params">workSheet_Name</span>)</span><br>&#123;<br>    QAxObject *workSheet = get<span class="hljs-constructor">WorkSheet(<span class="hljs-params">workSheet_Name</span>)</span>;<br><br>    <span class="hljs-keyword">if</span>(workSheet<span class="hljs-operator"> == </span>nullptr)<br>    &#123;<br>        return <span class="hljs-number">0</span>;<br>    &#125;<br><br>    <span class="hljs-comment">// 获取权限</span><br>    QAxObject *usedrange = workSheet-&gt;query<span class="hljs-constructor">SubObject(<span class="hljs-string">&quot;Usedrange&quot;</span>)</span>;<br>    <span class="hljs-built_in">int</span> rows = usedrange-&gt;query<span class="hljs-constructor">SubObject(<span class="hljs-string">&quot;Rows&quot;</span>)</span>-&gt;property(<span class="hljs-string">&quot;Count&quot;</span>).<span class="hljs-keyword">to</span><span class="hljs-constructor">Int()</span>;<br>    return rows;<br>&#125;<br><br><span class="hljs-comment">// 获取workSheet的行数</span><br><span class="hljs-built_in">int</span> ExcelEngine::get<span class="hljs-constructor">WorkSheetRows(<span class="hljs-params">int</span>  <span class="hljs-params">workSheet_Index</span>)</span><br>&#123;<br>    QAxObject *workSheet = get<span class="hljs-constructor">WorkSheet(<span class="hljs-params">workSheet_Index</span>)</span>;<br><br>    <span class="hljs-keyword">if</span>(workSheet<span class="hljs-operator"> == </span>nullptr)<br>    &#123;<br>        return <span class="hljs-number">0</span>;<br>    &#125;<br><br>    <span class="hljs-comment">// 获取workSheet表中的有效区域</span><br>    QAxObject *usedrange = workSheet-&gt;query<span class="hljs-constructor">SubObject(<span class="hljs-string">&quot;Usedrange&quot;</span>)</span>;<br>    <span class="hljs-built_in">int</span> rows = usedrange-&gt;query<span class="hljs-constructor">SubObject(<span class="hljs-string">&quot;Rows&quot;</span>)</span>-&gt;property(<span class="hljs-string">&quot;Count&quot;</span>).<span class="hljs-keyword">to</span><span class="hljs-constructor">Int()</span>;<br>    return rows;<br>&#125;<br><br><span class="hljs-comment">// 获取workSheet的列数</span><br><span class="hljs-built_in">int</span> ExcelEngine::get<span class="hljs-constructor">WorkSheetColumns(QString <span class="hljs-params">workSheet_Name</span>)</span><br>&#123;<br>    QAxObject *workSheet = get<span class="hljs-constructor">WorkSheet(<span class="hljs-params">workSheet_Name</span>)</span>;<br><br>    <span class="hljs-keyword">if</span>(workSheet<span class="hljs-operator"> == </span>nullptr)<br>    &#123;<br>        return <span class="hljs-number">0</span>;<br>    &#125;<br><br>    <span class="hljs-comment">// 获取workSheet表中的有效区域</span><br>    QAxObject *usedrange = workSheet-&gt;query<span class="hljs-constructor">SubObject(<span class="hljs-string">&quot;Usedrange&quot;</span>)</span>;<br>    <span class="hljs-built_in">int</span> columns = usedrange-&gt;query<span class="hljs-constructor">SubObject(<span class="hljs-string">&quot;Columns&quot;</span>)</span>-&gt;property(<span class="hljs-string">&quot;Count&quot;</span>).<span class="hljs-keyword">to</span><span class="hljs-constructor">Int()</span>;<br>    return columns;<br>&#125;<br><br><span class="hljs-comment">// 获取workSheet的列数</span><br><span class="hljs-built_in">int</span> ExcelEngine::get<span class="hljs-constructor">WorkSheetColumns(<span class="hljs-params">int</span> <span class="hljs-params">workSheet_Index</span>)</span><br>&#123;<br>    QAxObject *workSheet = get<span class="hljs-constructor">WorkSheet(<span class="hljs-params">workSheet_Index</span>)</span>;<br><br>    <span class="hljs-keyword">if</span>(workSheet<span class="hljs-operator"> == </span>nullptr)<br>    &#123;<br>        return <span class="hljs-number">0</span>;<br>    &#125;<br><br>    <span class="hljs-comment">// 获取workSheet表中的有效区域</span><br>    QAxObject *usedrange = workSheet-&gt;query<span class="hljs-constructor">SubObject(<span class="hljs-string">&quot;Usedrange&quot;</span>)</span>;<br>    <span class="hljs-built_in">int</span> columns = usedrange-&gt;query<span class="hljs-constructor">SubObject(<span class="hljs-string">&quot;Columns&quot;</span>)</span>-&gt;property(<span class="hljs-string">&quot;Count&quot;</span>).<span class="hljs-keyword">to</span><span class="hljs-constructor">Int()</span>;<br>    return columns;<br>&#125;<br><br><br><span class="hljs-comment">// 通过索引值获取工作表（workSheet）的表名</span><br>QString ExcelEngine::get<span class="hljs-constructor">WorkSheetNameByIndex(<span class="hljs-params">int</span> <span class="hljs-params">workSheet_Inedx</span>)</span><br>&#123;<br>    QAxObject *workSheet = get<span class="hljs-constructor">WorkSheet(<span class="hljs-params">workSheet_Inedx</span>)</span>;<br><br>    <span class="hljs-keyword">if</span>(workSheet<span class="hljs-operator"> == </span>nullptr)<br>    &#123;<br>        return <span class="hljs-string">&quot;&quot;</span>;<br>    &#125;<br><br>    QString sheetName = workSheet-&gt;dynamic<span class="hljs-constructor">Call(<span class="hljs-string">&quot;Name&quot;</span>)</span>.<span class="hljs-keyword">to</span><span class="hljs-constructor">String()</span>;<br>    return sheetName;<br>&#125;<br><br><span class="hljs-comment">// 获取WorkSheets工作表的表名列表</span><br>QStringList ExcelEngine::get<span class="hljs-constructor">WorkSheetNameList(<span class="hljs-params">void</span>)</span><br>&#123;<br>    QStringList workSheetsList;<br><br>    <span class="hljs-keyword">for</span>(<span class="hljs-built_in">int</span> i = <span class="hljs-number">1</span>;i&lt;=m_WorkSheetCount;i++)<br>    &#123;<br>        QAxObject *workSheet = get<span class="hljs-constructor">WorkSheet(<span class="hljs-params">i</span>)</span>;<br>        QString sheetName = workSheet-&gt;dynamic<span class="hljs-constructor">Call(<span class="hljs-string">&quot;Name&quot;</span>)</span>.<span class="hljs-keyword">to</span><span class="hljs-constructor">String()</span>;<br><br>        workSheetsList.append(sheetName);<br>    &#125;<br><br>    return workSheetsList;<br>&#125;<br><br><span class="hljs-comment">// 保存（用于写操作）</span><br><span class="hljs-built_in">bool</span> ExcelEngine::save(void)<br>&#123;<br>    <span class="hljs-keyword">if</span>(!m_IsOpened)<br>    &#123;<br>        return <span class="hljs-literal">false</span>;<br>    &#125;<br><br>    QFile file(m_FileName);<br><br>    <span class="hljs-keyword">if</span>(file.exists<span class="hljs-literal">()</span>)<br>    &#123;<br>        m_WorkBook-&gt;dynamic<span class="hljs-constructor">Call(<span class="hljs-string">&quot;Save()&quot;</span>)</span>;<br>    &#125;<span class="hljs-keyword">else</span><br>    &#123;<br>        return <span class="hljs-literal">false</span>;<br>    &#125;<br><br>    return <span class="hljs-literal">true</span>;<br>&#125;<br><br><span class="hljs-comment">// 关闭资源（释放资源）</span><br>void ExcelEngine::close(void)<br>&#123;<br>    release<span class="hljs-literal">()</span>;   <br>&#125;<br><br><span class="hljs-comment">// 释放资源</span><br>void ExcelEngine::release(void)<br>&#123;<br>    m_IsOpened = <span class="hljs-literal">false</span>;<br><br>    <span class="hljs-keyword">if</span>(m_WorkBook != nullptr)<br>    &#123;<br>        m_WorkBook-&gt;dynamic<span class="hljs-constructor">Call(<span class="hljs-string">&quot;Close(QVariant)&quot;</span>,0)</span>;<br>        delete m_WorkBook;<br>        m_WorkBook = nullptr;<br>    &#125;<br><br>    <span class="hljs-keyword">if</span>(m_WorkBooks != nullptr)<br>    &#123;<br>        m_WorkBooks-&gt;dynamic<span class="hljs-constructor">Call(<span class="hljs-string">&quot;Close(QVariant)&quot;</span>,0)</span>; <span class="hljs-comment">// 报错（QAxBase: Error calling IDispatch member Close: Bad parameter count）</span><br>        delete m_WorkBooks;<br>        m_WorkBooks = nullptr;<br>    &#125;<br><br>    <span class="hljs-keyword">if</span>(m_Excel != nullptr)<br>    &#123;<br>        m_Excel-&gt;set<span class="hljs-constructor">Property(<span class="hljs-string">&quot;DisplayAlerts&quot;</span>, <span class="hljs-params">false</span>)</span>;<br>        m_Excel-&gt;dynamic<span class="hljs-constructor">Call(<span class="hljs-string">&quot;Quit()&quot;</span>)</span>;<br>        delete m_Excel;<br>        m_Excel = nullptr;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li></ul><h1 id="开发环境配置"><a href="#开发环境配置" class="headerlink" title="开发环境配置"></a>开发环境配置</h1><ol><li><p>如果仅仅将<a href="#Excel%E8%AF%BB%E5%8F%96%E5%BA%93">Excel读取库</a>中的<code>.h</code>与<code>.cpp</code>文件放到自己的项目中，然后调用库文件操作Excel文件</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;QtCore/QCoreApplication&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;ExcelEngine.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;qstring&gt;</span></span><br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">(<span class="hljs-type">int</span> argc, <span class="hljs-type">char</span> *argv[])</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-function">QCoreApplication <span class="hljs-title">a</span><span class="hljs-params">(argc, argv)</span></span>;<br><br>QString excel_path = <span class="hljs-string">&quot;D:\\Qt_Code\\GDP_Code_GUI\\disorder_data.xlsx&quot;</span>;<br><span class="hljs-function">ExcelEngine <span class="hljs-title">excelOpt</span><span class="hljs-params">(excel_path)</span></span>;<br>excelOpt.<span class="hljs-built_in">open</span>();<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>执行上述代码，编译器会报错<em><strong>无法解析外部符号QAxObject</strong></em>，此时需要执行以下两步</p><ul><li>右键点击项目-&gt;属性-&gt;c&#x2F;c++-&gt;常规-&gt;附加包含目录 下添加<code>$(QTDIR)\include\ActiveQt</code></li><li>右键点击项目-&gt;属性-&gt;链接器-&gt;常规-&gt;附加库目录 下添加<code>D:\Qt\Qt5.12.2\5.12.2\msvc2017_64\lib</code>（此路径是用户安装Qt时的路径，找到安装路径下的lib文件夹即可）</li><li>右键点击项目-&gt;属性-&gt;链接器-&gt;输入-&gt;附加依赖库 下添加Debug版本：<code>Qt5AxContainerd.lib</code>、<code>Qt5AxBased.lib</code>；Release版本：<code>Qt5AxContainer.lib</code>、<code>Qt5AxBase.lib</code></li></ul></li><li><p>步骤1配置完成再执行上述代码时，编译器又会报错<em><strong>无法打开Qt5AxContainerd.lib</strong></em>，此时需要进行如下配置</p><ul><li>右键点击项目-&gt;Qt Project Settings-&gt;General-&gt;Qt Modules 中勾选<code>ActiveQt Container</code>与<code>ActiveQt server</code></li></ul></li></ol><p><img src="https://cdn.jsdelivr.net/gh/MinghuiJia/CDN-source/QtExcel/qtexcel1.png"><br><img src="https://cdn.jsdelivr.net/gh/MinghuiJia/CDN-source/QtExcel/qtexcel2.png"></p><h1 id="快速读取Excel"><a href="#快速读取Excel" class="headerlink" title="快速读取Excel"></a>快速读取Excel</h1><h2 id="读取Excel慢的原因"><a href="#读取Excel慢的原因" class="headerlink" title="读取Excel慢的原因"></a>读取Excel慢的原因</h2><p>网上教程中用Qt操作Excel的方法采用如下代码：</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">QVariant ExcelBase::<span class="hljs-keyword">read</span>(<span class="hljs-type">int</span> <span class="hljs-keyword">row</span>, <span class="hljs-type">int</span> col)<br>&#123;<br>    QVariant ret;<br>    <span class="hljs-keyword">if</span> (this-&gt;sheet != <span class="hljs-keyword">NULL</span> &amp;&amp; ! this-&gt;sheet-&gt;<span class="hljs-keyword">isNull</span>())<br>    &#123;<br>        QAxObject* range = this-&gt;sheet-&gt;querySubObject(&quot;Cells(int, int)&quot;, <span class="hljs-keyword">row</span>, col);<br>        //ret = <span class="hljs-keyword">range</span>-&gt;property(&quot;Value&quot;);<br>        ret = <span class="hljs-keyword">range</span>-&gt;dynamicCall(&quot;Value()&quot;);<br>        <span class="hljs-keyword">delete</span> range;<br>    &#125;<br>    <span class="hljs-keyword">return</span> ret;<br>&#125;<br></code></pre></td></tr></table></figure><p>读取慢的根源在<code>sheet-&gt;querySubObject(&quot;Cells(int, int)&quot;, row, col)</code>，每次读取的是表中的一个单元格，并且<code>querySubObject</code>产生的<code>QAxObject*</code>最好手动删除，原因是虽然父级的<code>QAxObject</code>会管理内存，但是父级不析构，子对象就不会析构</p><h2 id="快速读取Excel方法"><a href="#快速读取Excel方法" class="headerlink" title="快速读取Excel方法"></a>快速读取Excel方法</h2><ul><li>一次调用<code>querySubObject</code>把所有数据读取到内存</li><li>采用<code>UsedRange</code>把所有用到的单元格范围返回，并使用属性<code>Value</code>把单元格的值获取到并存储在<code>QVariant</code></li><li><code>QVariant</code>实际上是<code>QList&lt;QList&lt;QVariant&gt;&gt;</code>，表示一个表，需要将<code>QVariant</code>使用<code>.toList()</code>方法转换为<code>QList&lt;QVariant&gt;</code><br>完整读取Excel表中范围内的数据代码如下：<figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs reasonml"><span class="hljs-comment">//获取工作表</span><br>QAxObject* sheet1 = excelOpt.get<span class="hljs-constructor">WorkSheet(1)</span>;<span class="hljs-comment">//sheet索引是从1开始的</span><br>QAxObject *usedRange = sheet1-&gt;query<span class="hljs-constructor">SubObject(<span class="hljs-string">&quot;UsedRange&quot;</span>)</span>;<br><br><span class="hljs-comment">// 获取所有数据</span><br>QVector&lt;QVector&lt;QString&gt;&gt; vecDatas;<span class="hljs-comment">//获取所有数据</span><br>QVariant var = usedRange-&gt;dynamic<span class="hljs-constructor">Call(<span class="hljs-string">&quot;Value&quot;</span>)</span>;<br>foreach(QVariant varRow, var.<span class="hljs-keyword">to</span><span class="hljs-constructor">List()</span>) &#123;<br>QVector&lt;QString&gt; vecDataRow;<br>foreach(QVariant var, varRow.<span class="hljs-keyword">to</span><span class="hljs-constructor">List()</span>) &#123;<br>vecDataRow.push<span class="hljs-constructor">_back(<span class="hljs-params">var</span>.<span class="hljs-params">toString</span>()</span>);<br>&#125;<br>vecDatas.push<span class="hljs-constructor">_back(<span class="hljs-params">vecDataRow</span>)</span>;<br>&#125;<br></code></pre></td></tr></table></figure></li></ul><h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><p>Qt读取解析Excel（可以直接使用）：<a href="https://blog.csdn.net/m0_37545861/article/details/120528790">https://blog.csdn.net/m0_37545861/article/details/120528790</a><br>QT界面开发-QAxObject 解析 excel 时报错error LNK2019: 无法解析的外部符号：<a href="https://blog.51cto.com/u_15127621/4238345">https://blog.51cto.com/u_15127621/4238345</a><br>学习记录：vs2017+qt5关于QAxObject读取excel中数据问题：<a href="https://www.likecs.com/show-204016757.html">https://www.likecs.com/show-204016757.html</a><br>Qt Windows 下快速读写Excel指南：<a href="https://www.cnblogs.com/ybqjymy/p/14306196.html?ivk_sa=1024320u">https://www.cnblogs.com/ybqjymy/p/14306196.html?ivk_sa=1024320u</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>setTimeout异步</title>
    <link href="/2022/04/25/setTimeout%E5%BC%82%E6%AD%A5/"/>
    <url>/2022/04/25/setTimeout%E5%BC%82%E6%AD%A5/</url>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>setTimeout函数是JavaScript中典型的异步操作，本篇文章从setTimeout入手，加深对同步与异步区别的理解，并且理解JS引擎单线程如何实现异步</p><h1 id="同步与异步任务"><a href="#同步与异步任务" class="headerlink" title="同步与异步任务"></a>同步与异步任务</h1><h2 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h2><ul><li>同步：请求发起方对消息结果的获取是<strong>主动发起的</strong></li><li>异步：请求发起方对消息结果的获取是<strong>被动通知的</strong></li></ul><p>同步与异步在很多场景下会与阻塞与非阻塞搞混，因为在很多场合下感觉没什么区别</p><ul><li>阻塞：一个函数被调用后，等待函数返回结果之前，当前线程处于<strong>挂起状态</strong></li><li>非阻塞：一个函数被调用后，等待函数返回结果之前，当前线程处于<strong>运行状态</strong></li></ul><h2 id="同步异步与阻塞非阻塞的区分方式"><a href="#同步异步与阻塞非阻塞的区分方式" class="headerlink" title="同步异步与阻塞非阻塞的区分方式"></a>同步异步与阻塞非阻塞的区分方式</h2><ul><li>同步与异步的判别准则：获取消息结果的方式是<strong>主动还是被动</strong></li><li>阻塞与非阻塞的判别准则：当前线程处于<strong>挂起</strong>还是<strong>运行</strong>状态（挂起：当前线程什么都不能干；运行：当前线程可以处理其他任务）</li></ul><div class="note note-info">            <p>排在异步任务后面的代码，不用等待异步任务结束就会运行，即异步任务不具备“阻塞”效果</p>          </div><h2 id="JavaScript单线程模式"><a href="#JavaScript单线程模式" class="headerlink" title="JavaScript单线程模式"></a>JavaScript单线程模式</h2><p>JavaScript是单线程的，但是其运行环境（Chrome浏览器）是多线程的<br><img src="https://cdn.jsdelivr.net/gh/MinghuiJia/CDN-source/setTimeout_async/async1.png"></p><h3 id="浏览器多线程介绍"><a href="#浏览器多线程介绍" class="headerlink" title="浏览器多线程介绍"></a>浏览器多线程介绍</h3><p>浏览器中的线程包括但不限于：</p><ul><li><p>GUI线程<br>GUI线程就是渲染页面的，他解析HTML和CSS，然后将他们构建成DOM树和渲染树</p></li><li><p>JS引擎线程<br>这个线程就是负责执行JS的主线程，也是上述提到<strong>JS是单线程</strong>所指代的线程。<strong>这个线程跟GUI线程是互斥的</strong>，互斥的原因是JS也可以操作DOM，如果JS线程和GUI线程同时操作DOM，结果就混乱了，不知道到底渲染哪个结果</p></li><li><p>定时器线程<br>前面异步例子的<code>setTimeout</code>就运行在这里，他跟JS主线程不在同一个地方，所以“单线程的JS”能够实现异步。JS的定时器方法还有setInterval，也在这个线程</p></li><li><p>事件触发线程<br>定时器线程其实只是一个计时的作用，他并不会真正执行时间到了的回调，<strong>真正执行这个回调的还是JS主线程</strong>。当时间到了定时器线程会将这个回调事件给到事件触发线程，然后<strong>事件触发线程将它加到任务队列里面去</strong>。最终JS主线程从任务队列取出这个回调执行<br>  <em><strong>注意：事件触发线程不仅仅只会将定时器事件放入任务队列，其他满足条件的事件也是由他负责放进任务队列</strong></em></p></li><li><p>异步HTTP请求线程<br>这个线程负责处理异步的ajax请求，当请求完成后，他也会通知事件触发线程，然后事件触发线程将这个事件放入任务队列给主线程执行</p><div class="note note-warning">            <p><strong>所以JS异步的实现靠的就是浏览器的多线程，当他遇到异步API时，就将这个任务交给对应的线程，当这个异步API满足回调条件时，对应的线程又通过事件触发线程将这个事件放入任务队列，然后主线程从任务队列取出事件继续执行</strong></p>          </div></li></ul><h3 id="事件循环机制"><a href="#事件循环机制" class="headerlink" title="事件循环机制"></a>事件循环机制</h3><p>事件循环是让JavaScript做到既单线程，又不会阻塞的核心机制</p><ul><li><p>事件循环（Event Loop）<br>事件循环的作用：监控<strong>调用栈</strong>和<strong>任务队列</strong>，当调用栈为空，它就会取出任务队列中的一个回调函数，然后将它压入调用栈并执行</p><div class="note note-info">            <p>事件循环并不是在ECMAScript标准中定义，而是在HTML标准中定义。即<strong>属于JavaScript Runtime</strong>而不属于JavaScript Engine</p>          </div></li><li><p>任务队列<br>任务队列分为：宏任务队列（鼠标、键盘事件、定时器相关的事件、AJAX等）和微任务队列（Promise）<br>宏任务队列的规则：</p><blockquote><ol><li>来自相同任务源的任务必须放在同一个任务队列中</li><li>来自不同任务源的任务可以放在不同任务队列中</li><li>任务队列中的任务按顺序执行</li><li>不同的任务队列，浏览器会进行调度，允许优先执行来自特定任务源的任务（鼠标、键盘事件被优先调用，保证流畅的用户体验）</li></ol></blockquote></li><li><p>任务队列执行过程<br>JavaScript运行时，除了一个正在运行的主线程，引擎还提供多个任务队列（根据任务的类型，所以有多个）</p><blockquote><ol><li>首先，主线程会去执行所有的同步任务。等到同步任务全部执行完，就会去看任务队列里面有没有事件回调</li><li>如果有，则取出一个回调事件重新进入主线程执行，这时它就变成同步任务了</li><li>等到执行完，下一个异步任务再进入主线程开始执行，一旦任务队列清空，程序就结束执行</li><li>只要同步任务执行完了，引擎就会一遍又一遍地去检查那些挂起来的异步任务，是不是可以进入主线程了。这种循环检查的机制，就叫做<strong>事件循环（Event Loop）</strong></li></ol></blockquote><div class="note note-warning">            <p>异步任务的写法通常是回调函数，一旦异步任务重新进入主线程，就会执行对应的回调函数。</p>          </div></li></ul><h3 id="宏任务队列与微任务队列关系"><a href="#宏任务队列与微任务队列关系" class="headerlink" title="宏任务队列与微任务队列关系"></a>宏任务队列与微任务队列关系</h3><ul><li>宏任务队列与微任务队列关系<br><img src="https://cdn.jsdelivr.net/gh/MinghuiJia/CDN-source/setTimeout_async/async3.png"><br>事件循环的每一次循环成为<code>tick</code>，其任务细节为：<ul><li>调用栈选择最先进入队列的宏任务（通常是script整体代码），如果有则执行</li><li>检查是否存在微任务，如果存在，则不断执行微任务，直至清空微任务队列</li><li>浏览器更新渲染，每次事件循环，浏览器都可能完成更新渲染</li></ul></li><li>任务队列执行先后顺序<figure class="highlight arcade"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></div></td><td class="code"><pre><code class="hljs arcade"><span class="hljs-comment">// 执行顺序问题，考察频率挺高</span><br>setTimeout(<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(<span class="hljs-number">1</span>);<br>&#125;);<br><span class="hljs-keyword">new</span> Promise(<span class="hljs-keyword">function</span>(<span class="hljs-params">resolve, reject</span>) &#123;<br>  <span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(<span class="hljs-number">2</span>);<br>  resolve(<span class="hljs-number">3</span>);<br>&#125;).then(<span class="hljs-keyword">function</span>(<span class="hljs-params">val</span>) &#123;<br>  <span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(val);<br>&#125;);<br><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(<span class="hljs-number">4</span>);<br></code></pre></td></tr></table></figure><ol><li>先执行同步代码<ul><li>执行<code>new Promise</code>中的<code>console.log(2)</code>，<code>then</code>后面的属于微任务，跳过</li><li>然后执行<code>console.log(4)</code></li></ul></li><li>执行完<code>script</code>这个宏任务后，执行微任务(<code>Promise.then</code>)中的<code>console.log(val)</code>，此时<code>val</code>值由<code>resolve(3)</code>传递过来</li><li>执行另一个宏任务<code>setTimeout</code>中的<code>console.log(1)</code></li></ol></li></ul><h1 id="setTimeout异步循环中的闭包"><a href="#setTimeout异步循环中的闭包" class="headerlink" title="setTimeout异步循环中的闭包"></a>setTimeout异步循环中的闭包</h1><h2 id="循环中的闭包问题"><a href="#循环中的闭包问题" class="headerlink" title="循环中的闭包问题"></a>循环中的闭包问题</h2><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs arcade"><span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i = <span class="hljs-number">1</span>; i &lt;= <span class="hljs-number">5</span>; i++) &#123;<br>   setTimeout(<span class="hljs-keyword">function</span> <span class="hljs-title function_">test</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(i) <span class="hljs-comment">//&gt;&gt; 6 6 6 6 6</span><br>    &#125;, i * <span class="hljs-number">1000</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>上述代码本意是希望：每隔一秒依次输出“1 2 3 4 5”，结果却变成输出“6 6 6 6 6 ”。由于setTimeout是异步操作，JS主线程会执行完同步任务（for循环）。此时根据作用域链上变量查找机制，setTimeout第一个参数的函数体内的i引用了全局作用域里面的i，当for循环完毕后，i的值为6，所以输出了“6 6 6 6 6 ”。</p><h2 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h2><ul><li><p>闭包</p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs arcade"><span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i = <span class="hljs-number">1</span>; i &lt;= <span class="hljs-number">5</span>; i++) &#123;<br>  (<span class="hljs-keyword">function</span>(<span class="hljs-params">j</span>) &#123;<span class="hljs-comment">//包了一层IIFE形式的函数，这个函数是闭包</span><br>    setTimeout(<span class="hljs-keyword">function</span> <span class="hljs-title function_">test</span>(<span class="hljs-params"></span>) &#123;<span class="hljs-comment">//函数体内的j引用了外层匿名函数的参数j</span><br>      <span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(j); <span class="hljs-comment">//&gt;&gt; 1 2 3 4 5</span><br>    &#125;, j * <span class="hljs-number">1000</span>);<br>  &#125;)(i);<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>作用域</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i = <span class="hljs-number">1</span>; i &lt;= <span class="hljs-number">5</span>; i++) &#123;<br>   &#123;<br>      <span class="hljs-keyword">let</span> j = i;<br>      <span class="hljs-built_in">setTimeout</span>(<span class="hljs-keyword">function</span> <span class="hljs-title function_">test</span>(<span class="hljs-params"></span>) &#123;<br>           <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(j) <span class="hljs-comment">//&gt;&gt; 1 2 3 4 5</span><br>       &#125;, j * <span class="hljs-number">1000</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>用let关键字包上一个作用域，也能和闭包一样解决问题达成目的</p></li><li><p>使用setTimeout第三个参数</p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs arcade"><span class="hljs-keyword">for</span> ( <span class="hljs-keyword">var</span> i=<span class="hljs-number">1</span>; i&lt;=<span class="hljs-number">5</span>; i++) &#123;<br>setTimeout( <span class="hljs-keyword">function</span> <span class="hljs-title function_">timer</span>(<span class="hljs-params">j</span>) &#123;<br><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>( j );<br>&#125;, i*<span class="hljs-number">1000</span>, i);<br>&#125;<br></code></pre></td></tr></table></figure></li></ul><div class="note note-warning">            <p>setTimeout与setInterval的时间不准确，因为如果当前调用栈不为空，计时器事件对应的回调函数永远不会被执行（即使时间到了），所以用这两种方法做动画会不流畅、卡顿</p>          </div><h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><ul><li>同步和异步，阻塞和非阻塞：<a href="https://coffe1891.gitbook.io/frontend-hard-mode-interview/1/1.2.7">https://coffe1891.gitbook.io/frontend-hard-mode-interview/1/1.2.7</a></li><li>Event Loop：<a href="https://coffe1891.gitbook.io/frontend-hard-mode-interview/1/1.2.8">https://coffe1891.gitbook.io/frontend-hard-mode-interview/1/1.2.8</a></li><li>setTimeout异步：<a href="https://www.cnblogs.com/ceceliahappycoding/p/10772351.html">https://www.cnblogs.com/ceceliahappycoding/p/10772351.html</a></li><li>面试时高频问到的“闭包”：<a href="https://coffe1891.gitbook.io/frontend-hard-mode-interview/1/1.2.5">https://coffe1891.gitbook.io/frontend-hard-mode-interview/1/1.2.5</a></li><li>for循环内调用setTimeout：<a href="https://blog.csdn.net/u010200636/article/details/83061237">https://blog.csdn.net/u010200636/article/details/83061237</a></li></ul>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>JavaScript闭包</title>
    <link href="/2022/04/25/JavaScript%E9%97%AD%E5%8C%85/"/>
    <url>/2022/04/25/JavaScript%E9%97%AD%E5%8C%85/</url>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>由于JavaScript的闭包（closure）是其最强大的特性，jQuery、Vue.js库都使用了闭包特性来实现，本篇文章总结了一下博主自己对JavaScript闭包特性的学习和理解</p><h1 id="闭包"><a href="#闭包" class="headerlink" title="闭包"></a>闭包</h1><h2 id="闭包的例子"><a href="#闭包的例子" class="headerlink" title="闭包的例子"></a>闭包的例子</h2><p>我们先简单展示一个闭包的代码，让大家先观察一下闭包代码的形式</p><figure class="highlight awk"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><pre><code class="hljs awk"><span class="hljs-keyword">function</span> <span class="hljs-keyword">func</span>()&#123;<span class="hljs-regexp">//</span>func1引用了它外层的变量a，因此<span class="hljs-keyword">func</span>成为了闭包<br>    let a=<span class="hljs-string">&quot;coffe&quot;</span>;<br>    <span class="hljs-keyword">function</span> func1()&#123;<br>        console.log(a);<span class="hljs-regexp">//</span>访问了外层函数<span class="hljs-keyword">func</span>体内的变量a<br>    &#125;<br>    func1();<br>&#125;<br><br><span class="hljs-keyword">func</span>();<br></code></pre></td></tr></table></figure><p>上述代码中，func即为闭包</p><h2 id="闭包的定义"><a href="#闭包的定义" class="headerlink" title="闭包的定义"></a>闭包的定义</h2><ul><li><p>不同作者对于闭包的定义都有不同的描述，理解其核心在于记住<strong>产生闭包的时机</strong></p><div class="note note-info">            <p><strong>内层的作用域访问它外层函数作用域里面的参数&#x2F;变量&#x2F;函数时，闭包就产生了</strong></p>          </div></li><li><p><strong>闭包也是一种作用域</strong><br><img src="https://cdn.jsdelivr.net/gh/MinghuiJia/CDN-source/JavaScript_Closure/closure1.png"><br>在chrome浏览器“开发者工具”的控制台可以看到闭包出现在<code>Scope</code>一栏，因此闭包也是一种作用域</p><div class="note note-info">            <p><strong>闭包是一种作用域，它拷贝了一套外层函数作用域中被访问的参数、变量&#x2F;函数，这个拷贝都是浅拷贝（引用）</strong></p>          </div></li></ul><h2 id="闭包的优点"><a href="#闭包的优点" class="headerlink" title="闭包的优点"></a>闭包的优点</h2><ul><li><p>访问其他函数内部的变量</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-keyword">function</span> <span class="hljs-keyword">outer</span>() &#123;// <span class="hljs-keyword">outer</span>为闭包<br>     var  a = <span class="hljs-string">&#x27;变量1&#x27;</span><br>     var  <span class="hljs-keyword">inner</span> = <span class="hljs-keyword">function</span> () &#123;<br>            console.<span class="hljs-keyword">info</span>(a)<br>     &#125;<br>     <span class="hljs-keyword">return</span> <span class="hljs-keyword">inner</span>    // <span class="hljs-keyword">inner</span>访问了<span class="hljs-keyword">outer</span>函数作用域中的变量a<br>&#125;<br>var  <span class="hljs-keyword">inner</span> = <span class="hljs-keyword">outer</span>()   <br><span class="hljs-keyword">inner</span>()   //&quot;变量1&quot;<br></code></pre></td></tr></table></figure><p>上述代码中，<code>inner</code>函数作用域访问了外层作用域函数<code>outer</code>中的变量<code>a</code></p></li><li><p>闭包内部的变量无法被外部作用域访问和修改，可以实现软件设计上的<strong>封装</strong></p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs arcade"><span class="hljs-comment">//定义一个模块</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">module</span>(<span class="hljs-params">n</span>) &#123;<br>  <span class="hljs-comment">//私有属性</span><br>  let name = n;<br>  <span class="hljs-comment">//私有方法</span><br>  <span class="hljs-keyword">function</span> <span class="hljs-title function_">getModuleName</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">return</span> name;<br>  &#125;<br>  <span class="hljs-comment">//私有方法</span><br>  <span class="hljs-keyword">function</span> <span class="hljs-title function_">someMethod</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(<span class="hljs-string">&quot;coffe1891&quot;</span>);<br>  &#125;<br>  <span class="hljs-comment">//以一个对象的形式返回</span><br>  <span class="hljs-keyword">return</span> &#123;<br>    <span class="hljs-attr">getModuleName</span>: getModuleName,<br>    <span class="hljs-attr">getXXX</span>: someMethod<br>  &#125;;<br>&#125;<br><br>let myapp = module(<span class="hljs-string">&quot;myModule&quot;</span>);<span class="hljs-comment">//定义一个模块</span><br><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(myapp.getModuleName()); <span class="hljs-comment">//&gt;&gt; myModule</span><br><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(myapp.getXXX()); <span class="hljs-comment">//&gt;&gt; coffe1891</span><br></code></pre></td></tr></table></figure><p>上述代码中，变量<code>name</code>、函数<code>getModuleName</code>与<code>someMethod</code>类似高级语言的私有属性和方法，无法被外部作用域访问和修改（除非提供返回的对象接口），只有<code>module</code>内部作用域可以访问，实现了设计上的“封装”</p></li><li><p>保护变量不被内存回收机制回收</p><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs actionscript"><span class="hljs-keyword">var</span> report = <span class="hljs-keyword">function</span><span class="hljs-params">(src)</span> &#123;<br>    <span class="hljs-keyword">var</span> img = <span class="hljs-keyword">new</span> Image();<br>    img.src = src;<br>&#125;<br>report(<span class="hljs-string">&#x27;http://www.xxx.com/getClientInfo&#x27;</span>);<span class="hljs-comment">//把客户端信息上报数据</span><br></code></pre></td></tr></table></figure><p>上述用于数据统计上报的代码，会丢失部分数据上报。原因是<code>Image</code>对象是<code>report</code>函数中的局部变量，当<code>report</code>函数调用结束后，<code>Image</code>对象随即被JS引擎垃圾回收器回收，而此时可能还没来得及发出http请求，导致上报数据请求失败</p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs arcade"><span class="hljs-keyword">var</span> report = (<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">var</span> imgs = [];<span class="hljs-comment">//在内存里持久化</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">function</span>(<span class="hljs-params">src</span>) &#123;<br>        <span class="hljs-keyword">var</span> img = <span class="hljs-keyword">new</span> Image();<br>        imgs.<span class="hljs-built_in">push</span>(img);<span class="hljs-comment">//引用局部变量imgs</span><br>        img.src = src;<br>    &#125;<br>&#125;());<br>report(<span class="hljs-string">&#x27;http://www.xxx.com/getClientInfo&#x27;</span>);<span class="hljs-comment">//把客户端信息上报数据</span><br></code></pre></td></tr></table></figure><p>使用闭包把<code>Image</code>对象封装起来，就可以解决数据丢失问题。此时，<code>imgs</code>变量被<code>report</code>函数作用域链所引用，不会在IIFE函数执行完成后，因为退出函数调用栈而被JS引擎垃圾回收器收回</p></li></ul><h2 id="闭包的缺点"><a href="#闭包的缺点" class="headerlink" title="闭包的缺点"></a>闭包的缺点</h2><ul><li>过渡使用闭包会占用过多内存，甚至引起内存泄漏<figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs arcade"><span class="hljs-keyword">function</span> <span class="hljs-title function_">A</span>(<span class="hljs-params"></span>)&#123;<br>    <span class="hljs-keyword">var</span> <span class="hljs-built_in">count</span> = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">function</span> <span class="hljs-title function_">B</span>(<span class="hljs-params"></span>)&#123;<br>       <span class="hljs-built_in">count</span> ++;<br>       <span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(<span class="hljs-built_in">count</span>);<br>    &#125;<br>    <span class="hljs-keyword">return</span> B;<span class="hljs-comment">//函数B保持了对count的引用</span><br>&#125;<br><span class="hljs-keyword">var</span> b = A();<br>b();<span class="hljs-comment">//&gt;&gt; 1</span><br>b();<span class="hljs-comment">//&gt;&gt; 2</span><br>b();<span class="hljs-comment">//&gt;&gt; 3</span><br></code></pre></td></tr></table></figure>上述代码中，当执行完<code>var b = A();</code>之后，A函数的执行环境并没有被销毁，其中<code>count</code>变量被<code>b</code>的函数作用域链所引用，并没有因为函数A执行完毕退出函数调用栈而被JS引擎垃圾回收器回收，直至三次调用<code>b()</code>之后，<strong>并且删除变量b或赋值为null</strong>，<code>b</code>和<code>A</code>的执行环境才会被销毁<div class="note note-warning">            <p>JavaScript中的垃圾回收规则：如果对象不再被引用，或者对象互相引用形成数据孤岛后且没有被孤岛之外的其他对象引用，那么这些对象将会被JS引擎的垃圾回收器回收；反之，这些对象一直会保存在内存中</p>          </div>由于闭包会引用包含它的外层函数作用域里的变量&#x2F;函数，因此会比其他非闭包形式的函数占用更多内存。即使外层函数执行完毕退出函数调用栈时，由于外层函数作用域中的变量被引用着，并不会被JS引擎的垃圾回收器回收</li></ul><h2 id="避免闭包内存泄漏的方法"><a href="#避免闭包内存泄漏的方法" class="headerlink" title="避免闭包内存泄漏的方法"></a>避免闭包内存泄漏的方法</h2><ul><li>避免闭包导致内存泄漏的解决方法是，在函数A执行完毕退出函数调用栈之前，将不再使用的局部变量全部删除或者赋值为null<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs javascript">这段代码会导致内存泄露<br><span class="hljs-variable language_">window</span>.<span class="hljs-property">onload</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;<br>    <span class="hljs-keyword">var</span> el = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&quot;id&quot;</span>);<br>    el.<span class="hljs-property">onclick</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;<br>        <span class="hljs-title function_">alert</span>(el.<span class="hljs-property">id</span>);<br>    &#125;<br>&#125;<br>解决方法为<br><span class="hljs-variable language_">window</span>.<span class="hljs-property">onload</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;<br>    <span class="hljs-keyword">var</span> el = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&quot;id&quot;</span>);<br>    <span class="hljs-keyword">var</span> id = el.<span class="hljs-property">id</span>;                                      <span class="hljs-comment">//解除循环引用</span><br>    el.<span class="hljs-property">onclick</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;<br>        <span class="hljs-title function_">alert</span>(id); <br>    &#125;<br>    el = <span class="hljs-literal">null</span>;                                          <span class="hljs-comment">// 将闭包引用的外部函数中活动对象清除</span><br>&#125;<br></code></pre></td></tr></table></figure></li></ul><h2 id="闭包的写法"><a href="#闭包的写法" class="headerlink" title="闭包的写法"></a>闭包的写法</h2><ul><li><p>循环中的闭包</p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs arcade"><span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i = <span class="hljs-number">1</span>; i &lt;= <span class="hljs-number">5</span>; i++) &#123;<br>  (<span class="hljs-keyword">function</span>(<span class="hljs-params">j</span>) &#123;<span class="hljs-comment">//包了一层IIFE形式的函数，这个函数是闭包</span><br>    setTimeout(<span class="hljs-keyword">function</span> <span class="hljs-title function_">test</span>(<span class="hljs-params"></span>) &#123;<span class="hljs-comment">//函数体内的j引用了外层匿名函数的参数j</span><br>      <span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(j); <span class="hljs-comment">//&gt;&gt; 1 2 3 4 5</span><br>    &#125;, j * <span class="hljs-number">1000</span>);<br>  &#125;)(i);<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>模块化封装</p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs arcade"><span class="hljs-comment">//定义一个模块</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">module</span>(<span class="hljs-params">n</span>) &#123;<br>  <span class="hljs-comment">//私有属性</span><br>  let name = n;<br>  <span class="hljs-comment">//私有方法</span><br>  <span class="hljs-keyword">function</span> <span class="hljs-title function_">getModuleName</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">return</span> name;<br>  &#125;<br>  <span class="hljs-comment">//私有方法</span><br>  <span class="hljs-keyword">function</span> <span class="hljs-title function_">someMethod</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(<span class="hljs-string">&quot;coffe1891&quot;</span>);<br>  &#125;<br>  <span class="hljs-comment">//以一个对象的形式返回</span><br>  <span class="hljs-keyword">return</span> &#123;<br>    <span class="hljs-attr">getModuleName</span>: getModuleName,<br>    <span class="hljs-attr">getXXX</span>: someMethod<br>  &#125;;<br>&#125;<br><br>let myapp = module(<span class="hljs-string">&quot;myModule&quot;</span>);<span class="hljs-comment">//定义一个模块</span><br><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(myapp.getModuleName()); <span class="hljs-comment">//&gt;&gt; myModule</span><br><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(myapp.getXXX()); <span class="hljs-comment">//&gt;&gt; coffe1891</span><br></code></pre></td></tr></table></figure></li><li><p>返回新函数</p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs arcade"><span class="hljs-keyword">function</span> <span class="hljs-title function_">sayHello2</span>(<span class="hljs-params">name</span>) &#123;<br>    <span class="hljs-keyword">var</span> <span class="hljs-built_in">text</span> = <span class="hljs-string">&quot;Hello &quot;</span> + name; <span class="hljs-comment">// 局部变量</span><br><br>    <span class="hljs-keyword">var</span> sayAlert = <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(<span class="hljs-built_in">text</span>);<br>    &#125;;<br><br>    <span class="hljs-keyword">return</span> sayAlert;<br>&#125;<br><br><span class="hljs-keyword">var</span> say2 = sayHello2(<span class="hljs-string">&quot;coffe1891&quot;</span>);<br>say2(); <span class="hljs-comment">//&gt;&gt; Hello coffe1891</span><br></code></pre></td></tr></table></figure><p>调用<code>sayHello2()</code>函数返回了<code>sayAlert</code>，赋值给<code>say2</code>。<code>say2</code>是一个引用变量，指向一个函数本身，而不是指向一个变量</p></li><li><p>扩展全局对象</p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs arcade"><span class="hljs-keyword">function</span> <span class="hljs-title function_">setupSomeGlobals</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-comment">//私有变量</span><br>    <span class="hljs-keyword">var</span> num = <span class="hljs-number">666</span>;<br><br>    gAlertNumber = <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;<span class="hljs-comment">//没有用var和let关键字声明，会成为全局对象的方法</span><br>        <span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(num);<br>    &#125;;<br><br>    gIncreaseNumber = <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;<br>        num++;<br>    &#125;;<br><br>    gSetNumber = <span class="hljs-keyword">function</span>(<span class="hljs-params">x</span>) &#123;<br>        num = x;<br>    &#125;;<br>&#125;<br><br>setupSomeGlobals();<br>gAlertNumber(); <span class="hljs-comment">//&gt;&gt; 666</span><br><br>gIncreaseNumber();<br>gAlertNumber(); <span class="hljs-comment">//&gt;&gt; 667</span><br><br>gSetNumber(<span class="hljs-number">1891</span>);<br>gAlertNumber(); <span class="hljs-comment">//&gt;&gt; 1891</span><br></code></pre></td></tr></table></figure><p>三个全局函数<code>gAlertNumber</code>，<code>gIncreaseNumber</code>，<code>gSetNumber</code>指向了同一个闭包，因为它们是在同一次<code>setupSomeGlobals()</code>调用中声明的。它们所指向的闭包是与<code>setupSomeGlobals()</code>函数关联一个作用域，该作用域包括了<code>num</code>变量的拷贝。也就是说，这三个函数操作的是同一个<code>num</code>变量</p></li><li><p>延长局部变量生命</p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs arcade"><span class="hljs-keyword">var</span> report = (<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">var</span> imgs = [];<span class="hljs-comment">//在内存里持久化</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">function</span>(<span class="hljs-params">src</span>) &#123;<br>        <span class="hljs-keyword">var</span> img = <span class="hljs-keyword">new</span> Image();<br>        imgs.<span class="hljs-built_in">push</span>(img);<span class="hljs-comment">//引用局部变量imgs</span><br>        img.src = src;<br>    &#125;<br>&#125;());<br>report(<span class="hljs-string">&#x27;http://www.xxx.com/getClientInfo&#x27;</span>); <span class="hljs-comment">//把客户端信息上报数据</span><br></code></pre></td></tr></table></figure><p>闭包把<code>Image</code>对象封闭起来，就可以解决数据丢失的问题</p></li></ul><h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><p>闭包造成的内存泄露如何解决：<a href="https://www.cnblogs.com/yanjianjiang/p/13881231.html">https://www.cnblogs.com/yanjianjiang/p/13881231.html</a><br>面试时高频问到的“闭包”：<a href="https://coffe1891.gitbook.io/frontend-hard-mode-interview/1/1.2.5">https://coffe1891.gitbook.io/frontend-hard-mode-interview/1/1.2.5</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>基于jsDelivr的CDN图床搭建</title>
    <link href="/2022/04/18/%E5%9F%BA%E4%BA%8EjsDelivr%E7%9A%84CDN%E5%9B%BE%E5%BA%8A%E6%90%AD%E5%BB%BA/"/>
    <url>/2022/04/18/%E5%9F%BA%E4%BA%8EjsDelivr%E7%9A%84CDN%E5%9B%BE%E5%BA%8A%E6%90%AD%E5%BB%BA/</url>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>我们将个人博客托管在GitHub平台时，网站的访问和图片加载较为缓慢，给读者带来较差的阅读体验。本篇博客<strong>基于图床</strong>的方式，解决了原始的将<strong>本地图片一并上传到GitHub博客的对应仓库</strong>，造成博客<strong>图片加载缓慢</strong>的问题</p><!-- more --><h1 id="jsDelivr介绍"><a href="#jsDelivr介绍" class="headerlink" title="jsDelivr介绍"></a>jsDelivr介绍</h1><p>jsDelivr 是一款免费、开源的加速 CDN 公共服务。<code>CDN</code> (Content Delivery Network)全称为内容分发网络，它是构建在现有网络基础之上的智能虚拟网络，依靠部署在各地的边缘服务器，通过中心平台的负载均衡、内容分发、调度等功能模块，使用户就近获取所需内容，降低网络拥塞，提高用户访问响应速度和命中率</p><h1 id="配置过程"><a href="#配置过程" class="headerlink" title="配置过程"></a>配置过程</h1><p> 配置过程主要包括两个步骤：</p><ul><li>GitHub图片存储仓库创建及本地图片上传</li><li>基于jsDelivr CDN的图片资源引用</li></ul><h2 id="创建存储图片的GitHub仓库并上传本地图片"><a href="#创建存储图片的GitHub仓库并上传本地图片" class="headerlink" title="创建存储图片的GitHub仓库并上传本地图片"></a>创建存储图片的GitHub仓库并上传本地图片</h2><ol><li>在GitHub上创建一个名为 <code>CDN-source</code> 的仓库用于存储图片等资源。仓库名称可以自行定义，下图由于我已经创建了名为 <code>CDN-source</code> 的仓库，提示我该仓库已存在：</li></ol><p><img src="https://cdn.jsdelivr.net/gh/MinghuiJia/CDN-source/CDN_Based_On_jsDelivr/step1.png"></p><ol start="2"><li>像刚创建好的 <code>CDN-source</code> 仓库上传本地的图片</li></ol><ul><li>将需要上传的所有图片放在一个文件夹中，如图中的 <code>D:\myBlog\img</code> ：</li></ul><p><img src="https://cdn.jsdelivr.net/gh/MinghuiJia/CDN-source/CDN_Based_On_jsDelivr/step2.png"></p><ul><li><p>打开 <strong>Git Bash</strong> 进入 <code>D:\myBlog\img</code> 文件夹，执行如下命令完成图片上传：</p>  <figure class="highlight awk"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><pre><code class="hljs awk">git init<span class="hljs-regexp">//</span> 进入项目目录下进行git初始化（可以看到文件夹中生成了.git目录）<br>git remote add origin + 仓库地址 <span class="hljs-regexp">//</span> 添加远程仓库<br>git add .<span class="hljs-regexp">//</span> 添加提交的所有文件<br>git commit -m <span class="hljs-string">&quot;注释&quot;</span><span class="hljs-regexp">//</span> 提交代码<br>git push -u origin master -f <span class="hljs-regexp">//</span> 推送至仓库<br></code></pre></td></tr></table></figure></li><li><p>执行完上述命令后即可在GitHub仓库看到自己上传的本地图片：</p></li></ul><p><img src="https://cdn.jsdelivr.net/gh/MinghuiJia/CDN-source/CDN_Based_On_jsDelivr/step3.png"></p><h2 id="基于jsDelivr-CDN的图片资源引用"><a href="#基于jsDelivr-CDN的图片资源引用" class="headerlink" title="基于jsDelivr CDN的图片资源引用"></a>基于jsDelivr CDN的图片资源引用</h2><p>只需要将访问的资源地址改为如下形式即可：</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">https:<span class="hljs-regexp">//</span>cdn.jsdelivr.net<span class="hljs-regexp">/gh/</span>你的用户名<span class="hljs-regexp">/你的仓库名/</span>文件夹名/文件名<br></code></pre></td></tr></table></figure><p>已我当前创建的图片仓库及上传的图片为例，访问链接为：</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">https:<span class="hljs-regexp">//</span>cdn.jsdelivr.net<span class="hljs-regexp">/gh/</span>MinghuiJia<span class="hljs-regexp">/CDN-source/</span>themes_pic/index_pic.jpg<br></code></pre></td></tr></table></figure><h1 id="额外补充"><a href="#额外补充" class="headerlink" title="额外补充"></a>额外补充</h1><p>发布不同版本的图片仓库有助于图片资源的管理，下面简单说一下<strong>如何发布以及引用仓库发布版本的图片资源</strong></p><h2 id="仓库发布"><a href="#仓库发布" class="headerlink" title="仓库发布"></a>仓库发布</h2><ol><li>在图片仓库中找到 <code>Draft a new release</code> 进入发布资源页面</li></ol><p><img src="https://cdn.jsdelivr.net/gh/MinghuiJia/CDN-source/CDN_Based_On_jsDelivr/step4.png"></p><ol start="2"><li>填写相关信息：</li></ol><p><img src="https://cdn.jsdelivr.net/gh/MinghuiJia/CDN-source/CDN_Based_On_jsDelivr/step5.png"><br>其中发布版本号①必填，其余②③选填，最后点击 <code>Publish release</code> 完成发布<br><em><strong>注意：版本号可自定义，但是十分重要（资源引用地址填写时有用）</strong></em></p><ol start="3"><li>构建基于jsDelivr的访问资源地址：</li></ol><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">https:<span class="hljs-regexp">//</span>cdn.jsdelivr.net<span class="hljs-regexp">/gh/</span>你的用户名<span class="hljs-regexp">/你的仓库名@发布的版本号/</span>文件夹名/文件名<br></code></pre></td></tr></table></figure><p>已我当前创建的图片仓库及上传的图片为例，访问链接为：</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">https:<span class="hljs-regexp">//</span>cdn.jsdelivr.net<span class="hljs-regexp">/gh/</span>MinghuiJia<span class="hljs-regexp">/CDN-source@1.0/</span>themes_pic/index_pic.jpg<br></code></pre></td></tr></table></figure><p><strong>发布版本有助于区分新旧数据、便于资源管理，每次更新图片仓库后都需要发布</strong></p><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ul><li><a href="https://blog.douchen.life/%E5%9F%BA%E4%BA%8EjsDelivr-Github%E6%90%AD%E5%BB%BA%E5%85%8D%E8%B4%B9%E5%9B%BE%E5%BA%8A%E6%95%99%E7%A8%8B/">基于 jsDelivr + Github 搭建免费图床教程</a></li><li><a href="https://blog.51cto.com/u_13409958/3669893">5步搭建免费图床（CDN图床）再也不用担心网站网速与内存了</a></li></ul>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>环形链表Ⅱ</title>
    <link href="/2022/03/31/%E7%8E%AF%E5%BD%A2%E9%93%BE%E8%A1%A8%E2%85%A1/"/>
    <url>/2022/03/31/%E7%8E%AF%E5%BD%A2%E9%93%BE%E8%A1%A8%E2%85%A1/</url>
    
    <content type="html"><![CDATA[<h1 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h1><p>给定一个链表的头节点 <code>head</code> ，返回链表开始入环的第一个节点。 如果链表无环，则返回 <code>null</code>。<br><strong>不允许修改链表</strong>。</p><ul><li><p>示例1：<br><img src="https://cdn.jsdelivr.net/gh/MinghuiJia/CDN-source/Ring_Linked_List_II/circularlinkedlist.png"></p><figure class="highlight nix"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><pre><code class="hljs nix">输入：<span class="hljs-attr">head</span> = [<span class="hljs-number">3</span>,<span class="hljs-number">2</span>,<span class="hljs-number">0</span>,-<span class="hljs-number">4</span>], <span class="hljs-attr">pos</span> = <span class="hljs-number">1</span><br>输出：返回索引为 <span class="hljs-number">1</span> 的链表节点<br>解释：链表中有一个环，其尾部连接到第二个节点。<br></code></pre></td></tr></table></figure></li><li><p>示例2：<br><img src="https://cdn.jsdelivr.net/gh/MinghuiJia/CDN-source/Ring_Linked_List_II/circularlinkedlist_test2.png"></p><figure class="highlight nix"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs nix">输入：<span class="hljs-attr">head</span> = [<span class="hljs-number">1</span>,<span class="hljs-number">2</span>], <span class="hljs-attr">pos</span> = <span class="hljs-number">0</span><br>输出：返回索引为 <span class="hljs-number">0</span> 的链表节点<br>解释：链表中有一个环，其尾部连接到第一个节点。<br></code></pre></td></tr></table></figure></li><li><p>示例3：<br><img src="https://cdn.jsdelivr.net/gh/MinghuiJia/CDN-source/Ring_Linked_List_II/circularlinkedlist_test3.png"></p><!--<div align=center><img src="/2022/03/31/%E7%8E%AF%E5%BD%A2%E9%93%BE%E8%A1%A8%E2%85%A1/circularlinkedlist_test3.png" class=""></div>--><figure class="highlight nix"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs nix">输入：<span class="hljs-attr">head</span> = [<span class="hljs-number">1</span>], <span class="hljs-attr">pos</span> = -<span class="hljs-number">1</span><br>输出：返回 <span class="hljs-literal">null</span><br>解释：链表中没有环<br></code></pre></td></tr></table></figure></li></ul><p><strong>进阶：</strong></p><ul><li>使用 <code>O(1)</code> 空间解决此题</li></ul><h1 id="思路-代码"><a href="#思路-代码" class="headerlink" title="思路+代码"></a>思路+代码</h1><p>本题可以采用哈希表与快慢指针的方式分别完成解题</p><h2 id="哈希表实现算法"><a href="#哈希表实现算法" class="headerlink" title="哈希表实现算法"></a>哈希表实现算法</h2><ul><li>通过遍历链表中的每个节点，并将节点存储在哈希表中</li><li><strong>当出现加入的节点已经存在哈希表中，就可以判定链表中存在环，否则表明链表没有环</strong></li></ul><p>代码实现：</p><figure class="highlight xquery"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs xquery">class Solution &#123;<br>public:<br>    ListNode *detectCycle(ListNode <span class="hljs-built_in">*head</span>) &#123;<br>        unordered_set&lt;ListNode *&gt; visited;<br>        while <span class="hljs-built_in">(head</span> != nullptr) &#123;<br>            <span class="hljs-keyword">if</span> (visited<span class="hljs-built_in">.count</span><span class="hljs-built_in">(head</span>)) &#123;<br>                <span class="hljs-keyword">return</span><span class="hljs-built_in"> head</span>;<br>            &#125;<br>            visited.<span class="hljs-keyword">insert</span><span class="hljs-built_in">(head</span>);<br>           <span class="hljs-built_in"> head</span> =<span class="hljs-built_in"> head</span>-&gt;<span class="hljs-keyword">next</span>;<br>        &#125;<br>        <span class="hljs-keyword">return</span> nullptr;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><h2 id="快慢指针实现算法"><a href="#快慢指针实现算法" class="headerlink" title="快慢指针实现算法"></a>快慢指针实现算法</h2><p>通过设定两个指针 <code>fast</code>和 <code>slow</code>，均位于链表头部。<code>slow</code> 指针每次移动一位，<code>fast</code> 指针每次移动两位，如果链表中存在环，则 <code>fast</code> 指针最终会追赶上 <code>slow</code> 指针并在环中相遇</p><p><strong>假设链表有环，会有两种环情况：</strong></p><ul><li>环很大<div align="center"><img src="https://cdn.jsdelivr.net/gh/MinghuiJia/CDN-source/Ring_Linked_List_II/fast_slow1.png" \></div></li></ul><p>假如他们在相遇点相遇了，那么慢指针走过的距离是 <code>a+b</code>，快指针走过的距离就是 <code>a+b+c+b</code>。因为相同时间内快指针走的距离是慢指针的 <code>2</code> 倍，所以有 <code>a+b+c+b = 2*(a+b)</code>，即 <code>a=c</code>，也就是说从相遇点到环的入口和链表的起始点到环的入口，距离是一样的。在相遇点的时候我们可以使用两个指针，一个从相遇点开始，一个从链表头开始，他们每次都走一步，直到他们再次相遇位置，那么这个相遇点就是环的入口。</p><ul><li>环很小<div align="center"><img src="https://cdn.jsdelivr.net/gh/MinghuiJia/CDN-source/Ring_Linked_List_II/fast_slow2.png" \></div></li></ul><p>那么这种情况，快指针在环上转了好几圈了，慢指针才走到环上，假如快指针在环上已经走了 <code>m</code> 圈了，慢指针在环上走了 <code>n</code> 圈，他们最终在环上相遇，那么</p><ul><li><strong>慢指针走过的距离是：</strong><code>a+b+n*(b+c)</code> (b+c其实就是环的长度)</li><li><strong>快指针走过的距离是：</strong><code>a+b+m*(b+c)</code><br>在相同的时间内快指针走过的距离是慢指针的2倍，所以有</li><li><code>a+b+m*(b+c) = 2*(a+b+n*(b+c))</code><br>整理得到</li><li><code>a+b=(m-2n)(b+c)</code><br>上面 <code>b+c</code> 其实是环的长度，也就是说 <code>a+b</code>等于 <code>(m-2n)</code> 个环的长度。这个时候我们还可以使用两个指针一个从相遇点开始，一个从链表头开始，这时候就会出现一个现象就是一个指针在链表上走，一个指针在环上转圈，最终会走到第 <code>1</code> 种情况，就是环很小（我们可以认为链表前面减去 <code>m-2n-1</code> 个环的长度就是第一种情况了）</li></ul><p>代码实现：</p><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs gradle"><span class="hljs-keyword">class</span> Solution &#123;<br><span class="hljs-keyword">public</span>:<br>    ListNode *detectCycle(ListNode *head) &#123;<br>        <span class="hljs-keyword">if</span> (head == <span class="hljs-keyword">NULL</span> || head-&gt;<span class="hljs-keyword">next</span> == <span class="hljs-keyword">NULL</span>)<br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">NULL</span>;<br>        ListNode* fast = head;<br>        ListNode* slow = head;<br>        <span class="hljs-keyword">while</span>(fast != <span class="hljs-keyword">NULL</span> &amp;&amp; slow != <span class="hljs-keyword">NULL</span>)<br>        &#123;<br>            slow = slow-&gt;<span class="hljs-keyword">next</span>;<br>            fast = fast-&gt;<span class="hljs-keyword">next</span>;<br>            <span class="hljs-keyword">if</span> (fast != <span class="hljs-keyword">NULL</span>)<br>                fast = fast-&gt;<span class="hljs-keyword">next</span>;<br>            <span class="hljs-keyword">else</span><br>                <span class="hljs-keyword">return</span> <span class="hljs-keyword">NULL</span>;<br>            <br>            <span class="hljs-keyword">if</span> (slow == fast)<br>                <span class="hljs-keyword">break</span>;<br>        &#125;<br><br>        <span class="hljs-keyword">if</span> (fast == <span class="hljs-keyword">NULL</span> || slow == <span class="hljs-keyword">NULL</span>)<br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">NULL</span>;<br><br>        slow = head;    <span class="hljs-comment">// slow指针在相遇点之前的a路上走，fast指针有可能在环上走多次</span><br>        <span class="hljs-keyword">while</span>(slow != fast)<br>        &#123;<br>            slow = slow-&gt;<span class="hljs-keyword">next</span>;<br>            fast = fast-&gt;<span class="hljs-keyword">next</span>;<br>        &#125;<br>        <span class="hljs-keyword">return</span> fast;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><p>作者：力扣 (LeetCode)<br>链接：<a href="https://leetcode-cn.com/leetbook/read/linked-list/jjhf6/">https://leetcode-cn.com/leetbook/read/linked-list/jjhf6/</a><br>来源：力扣（LeetCode）<br>著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>C++调用Python代码</title>
    <link href="/2022/03/19/C-%E8%B0%83%E7%94%A8Python%E4%BB%A3%E7%A0%81/"/>
    <url>/2022/03/19/C-%E8%B0%83%E7%94%A8Python%E4%BB%A3%E7%A0%81/</url>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>Python强大的第三方库有助于方法建模。而当我们需要采用C++开发软件时，没有相应的C++库或开源代码，使得我们不得不在软件开发过程中调用部分Python代码</p><h1 id="前期准备"><a href="#前期准备" class="headerlink" title="前期准备"></a>前期准备</h1><ul><li>Python配置完成</li><li>VS安装完成</li></ul><h1 id="实现方法"><a href="#实现方法" class="headerlink" title="实现方法"></a>实现方法</h1><h2 id="实现基本流程"><a href="#实现基本流程" class="headerlink" title="实现基本流程"></a>实现基本流程</h2><ol><li>调用的Python代码都需要包含在两行代码中间，即如下形式：<figure class="highlight scss"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><pre><code class="hljs scss"><span class="hljs-built_in">Py_Initialize</span>(); <span class="hljs-comment">//首。初始化Python解释器</span><br><span class="hljs-comment">//这里是一堆其他代码</span><br><span class="hljs-built_in">Py_Initialize</span>(); <span class="hljs-comment">//尾。结束Python的工作。</span><br></code></pre></td></tr></table></figure></li><li>跟Python相关的东西一般声明为PyObject指针的形式，比如一会见到的如下声明：<figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs 1c">PyObject * pModule = <span class="hljs-literal">NULL</span>; <span class="hljs-comment">//Python模块</span><br>PyObject * pFunc = <span class="hljs-literal">NULL</span>; <span class="hljs-comment">//Python函数</span><br>PyObject * pArg = <span class="hljs-literal">NULL</span>; <span class="hljs-comment">//函数接受的参数</span><br></code></pre></td></tr></table></figure></li><li>用下面三行代码来完成导入模块、引入函数、构建参数的工作，都是”闻名如见面“类型的函数：<figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-attr">pModule</span> = PyImport_ImportModule(<span class="hljs-string">&quot;test&quot;</span>)<span class="hljs-comment">; //导入模块</span><br><span class="hljs-attr">pFunc</span> = PyObject_GetAttrString(pModule, <span class="hljs-string">&quot;write_to_xlsx&quot;</span>)<span class="hljs-comment">; //引入操作Excel的函数</span><br><span class="hljs-attr">pArg</span> = Py_BuildValue(<span class="hljs-string">&quot;O,O&quot;</span>, tuple1, tuple2)<span class="hljs-comment">; //把C++类型转换为Python类型</span><br></code></pre></td></tr></table></figure></li><li>最后用一句，把参数传给调用函数并实际运行：<figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs reasonml"><span class="hljs-constructor">PyEval_CallObject(<span class="hljs-params">pFunc</span>, <span class="hljs-params">pArg</span>)</span>;<br></code></pre></td></tr></table></figure></li></ol><h2 id="创建C-项目并完成环境和库配置"><a href="#创建C-项目并完成环境和库配置" class="headerlink" title="创建C++项目并完成环境和库配置"></a>创建C++项目并完成环境和库配置</h2><ul><li>包含目录：在创建好的C++项目，<code>右击项目-&gt;属性-&gt;C/C++/常规</code>，将安装Python路径下的<code>\include</code>目录添加进去<br><img src="https://cdn.jsdelivr.net/gh/MinghuiJia/CDN-source/Cpp_Calls_Python_Code/step1.png"></li><li>附加库目录：在创建好的C++项目，<code>右击项目-&gt;属性-&gt;链接器-&gt;常规-&gt;附加库目录</code>，将安装Python路径下的<code>\libs</code>目录添加进去<br><img src="https://cdn.jsdelivr.net/gh/MinghuiJia/CDN-source/Cpp_Calls_Python_Code/step2.png"></li><li>附加依赖项：在创建好的C++项目，<code>右击项目-&gt;属性-&gt;链接器-&gt;输入-&gt;附加依赖库</code>，在<strong>debug</strong>下输入<code>python36.lib</code>，在<strong>release</strong>下输入<code>python36_d.lib</code>（不同版本Python最后数字不一样，自行修改）<br><img src="https://cdn.jsdelivr.net/gh/MinghuiJia/CDN-source/Cpp_Calls_Python_Code/step3.png"></li></ul><p><em><strong>注意：在Python安装路径下的<code>\libs</code>文件夹中可能只存在python36.lib而没有python36_d.lib，此时需要复制一份python36.lib，并重命名为python36_d.lib，此外安装的Python是32位与64位，要与C++项目的环境配置匹配</strong></em></p><h2 id="C-调用Python函数并传入参数（参数为简单类型）"><a href="#C-调用Python函数并传入参数（参数为简单类型）" class="headerlink" title="C++调用Python函数并传入参数（参数为简单类型）"></a>C++调用Python函数并传入参数（参数为简单类型）</h2><p>C++调用Python实现成功的前提是，此Python文件可以正常运行</p><ol><li><p>定义Python函数，并命名为test1.py。<strong>注意：文件命名切忌为test等冲突的名称，因为Python有内置test函数，python自身模块的优先级高于你自己定义的模块</strong></p><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs livecodeserver">def <span class="hljs-built_in">add</span>(<span class="hljs-keyword">a</span>,b):<br>    <span class="hljs-literal">return</span> <span class="hljs-keyword">a</span>+b<br></code></pre></td></tr></table></figure></li><li><p>编写C++代码调用Python函数</p></li></ol><ul><li><p>引入头文件</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;Python.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br></code></pre></td></tr></table></figure></li><li><p>测试</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs reasonml"><span class="hljs-constructor">Py_Initialize()</span>;<span class="hljs-comment">//使用python之前，要调用Py_Initialize();这个函数进行初始化</span><br><span class="hljs-keyword">if</span> (!<span class="hljs-constructor">Py_IsInitialized()</span>)<br>&#123;<br>printf(<span class="hljs-string">&quot;初始化失败！&quot;</span>);<br>return <span class="hljs-number">0</span>;<br>&#125;<br><span class="hljs-comment">// 直接执行Python语句</span><br><span class="hljs-constructor">PyRun_SimpleString(<span class="hljs-string">&quot;import sys&quot;</span>)</span>;<br><span class="hljs-constructor">PyRun_SimpleString(<span class="hljs-string">&quot;import os&quot;</span>)</span>;<br><span class="hljs-constructor">PyRun_SimpleString(<span class="hljs-string">&quot;sys.path.append(&#x27;./&#x27;)&quot;</span>)</span>;<span class="hljs-comment">//这一步很重要，修改Python路径</span><br><span class="hljs-constructor">PyRun_SimpleString(<span class="hljs-string">&quot;print(os.listdir())&quot;</span>)</span>;<br><br><span class="hljs-comment">// 调用Python文件中的函数</span><br>PyObject<span class="hljs-operator"> * </span>pModule = NULL;<span class="hljs-comment">//声明变量</span><br>PyObject<span class="hljs-operator"> * </span>pFunc = NULL;<br>PyObject* args = NULL;<br>PyObject* pRet = NULL;<br><br>pModule = <span class="hljs-constructor">PyImport_ImportModule(<span class="hljs-string">&quot;test1&quot;</span>)</span>;<span class="hljs-comment">//这里是要调用的文件名</span><br><span class="hljs-keyword">if</span> (pModule<span class="hljs-operator"> == </span>NULL)<br>&#123;<br>cout &lt;&lt; <span class="hljs-string">&quot;没找到&quot;</span> &lt;&lt; endl;<br>&#125;<br><span class="hljs-keyword">else</span><br>&#123;<br>cout &lt;&lt; <span class="hljs-string">&quot;找到了&quot;</span> &lt;&lt; endl;<br>&#125;<br>pFunc = <span class="hljs-constructor">PyObject_GetAttrString(<span class="hljs-params">pModule</span>, <span class="hljs-string">&quot;add&quot;</span>)</span>;<span class="hljs-comment">//这里是要调用的函数名</span><br>args = <span class="hljs-constructor">Py_BuildValue(<span class="hljs-string">&quot;(ii)&quot;</span>, 28, 103)</span>;<span class="hljs-comment">//给python函数参数赋值</span><br>pRet = <span class="hljs-constructor">PyObject_CallObject(<span class="hljs-params">pFunc</span>, <span class="hljs-params">args</span>)</span>;<span class="hljs-comment">//调用函数</span><br><span class="hljs-built_in">int</span> res = <span class="hljs-number">0</span>;<br><span class="hljs-constructor">PyArg_Parse(<span class="hljs-params">pRet</span>, <span class="hljs-string">&quot;i&quot;</span>, &amp;<span class="hljs-params">res</span>)</span>;<span class="hljs-comment">//转换返回类型</span><br>cout &lt;&lt; <span class="hljs-string">&quot;res:&quot;</span> &lt;&lt; res &lt;&lt; endl;<span class="hljs-comment">//输出结果</span><br></code></pre></td></tr></table></figure></li></ul><p><strong>注意：PyImport_ImportModule，该函数似乎只能用相对路径，且PyImport_ImportModule函数传入的参数不能加”.py“</strong></p><ol start="3"><li>运行结果<br><img src="https://cdn.jsdelivr.net/gh/MinghuiJia/CDN-source/Cpp_Calls_Python_Code/step4.png"></li></ol><h2 id="C-调用Python函数并传入参数（参数为列表类型）"><a href="#C-调用Python函数并传入参数（参数为列表类型）" class="headerlink" title="C++调用Python函数并传入参数（参数为列表类型）"></a>C++调用Python函数并传入参数（参数为列表类型）</h2><ol><li><p>定义Python函数，并命名为test12.py</p><figure class="highlight nix"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs nix"><span class="hljs-comment"># -*- coding:utf-8 -*-</span><br>from openpyxl <span class="hljs-built_in">import</span> Workbook<br><br>def fit_prophet(time_series):<br>    <span class="hljs-attr">book</span> = Workbook()<br>    <span class="hljs-attr">sheet</span> = book.active<br>    <span class="hljs-attr">str1</span> = ()<br><br>    <span class="hljs-attr">time_series</span> = tuple(time_series)<br>    <span class="hljs-attr">str1</span> = str1 + (<span class="hljs-string">&quot;time&quot;</span>,)<br>    <span class="hljs-attr">row1</span> = str1 + time_series<br>    <span class="hljs-attr">rows</span> = (row1,)<br>    for row <span class="hljs-keyword">in</span> rows:<br>        sheet.append(row)<br>        print(row)<br>    book.save(<span class="hljs-string">&quot;E:\\test.xlsx&quot;</span>)<br><br><span class="hljs-keyword">if</span> <span class="hljs-attr">__name__==&quot;__main__&quot;:</span><br>    fit_prophet((<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5.5</span>))<br></code></pre></td></tr></table></figure></li><li><p>编写C++代码调用Python函数</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;QtCore/QCoreApplication&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;Python.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">(<span class="hljs-type">int</span> argc, <span class="hljs-type">char</span> *argv[])</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-function">QCoreApplication <span class="hljs-title">a</span><span class="hljs-params">(argc, argv)</span></span>;<br><br><span class="hljs-built_in">Py_Initialize</span>();<span class="hljs-comment">//使用python之前，要调用Py_Initialize();这个函数进行初始化</span><br><span class="hljs-keyword">if</span> (!<span class="hljs-built_in">Py_IsInitialized</span>())<br>&#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;初始化失败！&quot;</span>);<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><span class="hljs-comment">// 直接执行Python语句</span><br><span class="hljs-built_in">PyRun_SimpleString</span>(<span class="hljs-string">&quot;import sys&quot;</span>);<br><span class="hljs-built_in">PyRun_SimpleString</span>(<span class="hljs-string">&quot;sys.path.append(&#x27;./&#x27;)&quot;</span>);<span class="hljs-comment">//这一步很重要，修改Python路径</span><br><br><span class="hljs-comment">// 调用Python文件中的函数</span><br>PyObject * pModule = <span class="hljs-literal">NULL</span>;<span class="hljs-comment">//声明变量</span><br>PyObject * pFunc = <span class="hljs-literal">NULL</span>;<br>PyObject* args = <span class="hljs-literal">NULL</span>;<br>PyObject* pRet = <span class="hljs-literal">NULL</span>;<br><br><span class="hljs-comment">// 调用需要传入list数据类型的Python函数</span><br>pModule = <span class="hljs-built_in">PyImport_ImportModule</span>(<span class="hljs-string">&quot;test12&quot;</span>);<span class="hljs-comment">//这里是要调用的文件名hello.py</span><br><span class="hljs-keyword">if</span> (pModule == <span class="hljs-literal">NULL</span>)<br>&#123;<br>cout &lt;&lt; <span class="hljs-string">&quot;test12 没找到&quot;</span> &lt;&lt; endl;<br>&#125;<br><span class="hljs-keyword">else</span><br>&#123;<br>cout &lt;&lt; <span class="hljs-string">&quot;test12 找到了&quot;</span> &lt;&lt; endl;<br>&#125;<br><br>vector&lt;<span class="hljs-type">double</span>&gt; normalized_ntl_list&#123; <span class="hljs-number">840.64914699999997</span>, <span class="hljs-number">65535.000000000000</span>, <span class="hljs-number">65535.000000000000</span> ,<span class="hljs-number">65535.000000000000</span> ,<span class="hljs-number">582.03208400000005</span> ,<span class="hljs-number">529.01506400000005</span> ,<span class="hljs-number">565.42856200000006</span> ,<br><span class="hljs-number">65535.000000000000</span>, <span class="hljs-number">565.42856200000006</span>, <span class="hljs-number">563.01787400000001</span> &#125;;<br><br>pFunc = <span class="hljs-built_in">PyObject_GetAttrString</span>(pModule, <span class="hljs-string">&quot;fit_prophet&quot;</span>);<span class="hljs-comment">//这里是要调用的函数名</span><br><br>PyObject* pyParams = <span class="hljs-built_in">PyList_New</span>(<span class="hljs-number">0</span>);           <span class="hljs-comment">//初始化一个列表</span><br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; normalized_ntl_list.<span class="hljs-built_in">size</span>(); i++)<br>&#123;<br><span class="hljs-built_in">PyList_Append</span>(pyParams, <span class="hljs-built_in">Py_BuildValue</span>(<span class="hljs-string">&quot;d&quot;</span>, normalized_ntl_list[i]));<span class="hljs-comment">//列表添加元素值浮点数，可以添加不同类型的数据</span><br>&#125;<br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment">PyObject* tuple = PyTuple_New(normalized_ntl_list.size());//初始化一个元组</span><br><span class="hljs-comment">for (int ii = 0; ii &lt; normalized_ntl_list.size(); ii++)</span><br><span class="hljs-comment">&#123;</span><br><span class="hljs-comment">PyTuple_SetItem(tuple, ii, Py_BuildValue(&quot;d&quot;, normalized_ntl_list[ii]));//为元组赋值</span><br><span class="hljs-comment">&#125;</span><br><span class="hljs-comment">*/</span><br>args = <span class="hljs-built_in">PyTuple_New</span>(<span class="hljs-number">1</span>);              <br><span class="hljs-built_in">PyTuple_SetItem</span>(args, <span class="hljs-number">0</span>, pyParams);<br><span class="hljs-comment">//PyTuple_SetItem(args, 0, tuple);</span><br><span class="hljs-built_in">PyEval_CallObject</span>(pFunc, args);<span class="hljs-comment">//函数调用</span><br><br>cout &lt;&lt; <span class="hljs-string">&quot;prophet finished...&quot;</span> &lt;&lt; endl;<br><br><span class="hljs-built_in">Py_Finalize</span>();<span class="hljs-comment">//调用Py_Finalize，这个根Py_Initialize相对应的。</span><br><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>运行结果</p></li></ol><ul><li><p>console输出结果展示：<br><img src="https://cdn.jsdelivr.net/gh/MinghuiJia/CDN-source/Cpp_Calls_Python_Code/step5.png"><br>可见在Python代码中的print可以在C++的console输出展示</p></li><li><p>生成Excel展示<br><img src="https://cdn.jsdelivr.net/gh/MinghuiJia/CDN-source/Cpp_Calls_Python_Code/step6.png"></p></li></ul><p><strong>重点：C++的vector数据转换成Python的元组或列表形式，首先需要创建对应的Object（PyList_New、PyTuple_New），然后循环赋值（PyList_Append、PyTuple_SetItem），再调用函数之前，需要再用一个元组将数据包装起来，才能成功</strong></p><h2 id="C-调用Python函数传入列表参数并返回列表参数"><a href="#C-调用Python函数传入列表参数并返回列表参数" class="headerlink" title="C++调用Python函数传入列表参数并返回列表参数"></a>C++调用Python函数传入列表参数并返回列表参数</h2><ol><li><p>定义Python函数，并命名为test13.py</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs routeros">def listFuncTest(list1, list2, list3):<br>    <span class="hljs-built_in">print</span>(list1)<br>    <span class="hljs-built_in">print</span>(list2)<br>    <span class="hljs-built_in">print</span>(list3)<br><br>    return list1, list3<br><br><span class="hljs-keyword">if</span> <span class="hljs-attribute">__name__</span>==&quot;__main__&quot;:<br>    lizt1 = [1,2,3]<br>    lizt2 = [4,5,6]<br>    lizt3 = [6,6,6]<br>    new_lizt1, new_lizt2 =listFuncTest(lizt1, lizt2, lizt3)<br>    <span class="hljs-built_in">print</span>(new_lizt1)<br>    <span class="hljs-built_in">print</span>(new_lizt2)<br></code></pre></td></tr></table></figure></li><li><p>编写C++代码调用Python函数并获取返回值</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><code class="hljs reasonml">#<span class="hljs-keyword">include</span> &lt;QtCore/QCoreApplication&gt;<br>#<span class="hljs-keyword">include</span> &lt;<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Python</span>.</span></span>h&gt;<br>#<span class="hljs-keyword">include</span> &lt;iostream&gt;<br>using namespace std;<br><br><span class="hljs-comment">// C++vector转PyObject函数（python list类型）</span><br>PyObject* create<span class="hljs-constructor">List(<span class="hljs-params">vector</span>&lt;<span class="hljs-params">int</span>&gt; <span class="hljs-params">list</span>)</span><br>&#123;<br>PyObject* pyParams = <span class="hljs-constructor">PyList_New(0)</span>;           <span class="hljs-comment">//初始化一个列表</span><br><span class="hljs-keyword">for</span> (<span class="hljs-built_in">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-built_in">list</span>.size<span class="hljs-literal">()</span>; i++)<br>&#123;<br><span class="hljs-constructor">PyList_Append(<span class="hljs-params">pyParams</span>, Py_BuildValue(<span class="hljs-string">&quot;i&quot;</span>, <span class="hljs-params">list</span>[<span class="hljs-params">i</span>])</span>);<span class="hljs-comment">//列表添加元素值整数，可以添加不同类型的数据</span><br>&#125;<br>return pyParams;<br>&#125;<br><br><span class="hljs-built_in">int</span> main(<span class="hljs-built_in">int</span> argc, <span class="hljs-built_in">char</span> *argv<span class="hljs-literal">[]</span>)<br>&#123;<br>    QCoreApplication a(argc, argv);<br><br><span class="hljs-comment">// 用于测试的vector数据</span><br>vector&lt;<span class="hljs-built_in">int</span>&gt; nums1(&#123; <span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span> &#125;);<br>vector&lt;<span class="hljs-built_in">int</span>&gt; nums2(&#123; <span class="hljs-number">9</span>,<span class="hljs-number">8</span>,<span class="hljs-number">7</span> &#125;);<br>vector&lt;<span class="hljs-built_in">int</span>&gt; nums3(&#123; -<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,-<span class="hljs-number">4</span> &#125;);<br><br><span class="hljs-constructor">Py_Initialize()</span>;<span class="hljs-comment">//首。初始化Python解释器</span><br><span class="hljs-keyword">if</span> (!<span class="hljs-constructor">Py_IsInitialized()</span>)<br>&#123;<br>printf(<span class="hljs-string">&quot;初始化失败！&quot;</span>);<br>return <span class="hljs-number">0</span>;<br>&#125;<br><span class="hljs-comment">// 直接执行Python语句</span><br><span class="hljs-constructor">PyRun_SimpleString(<span class="hljs-string">&quot;import sys&quot;</span>)</span>;<br><span class="hljs-constructor">PyRun_SimpleString(<span class="hljs-string">&quot;sys.path.append(&#x27;./&#x27;)&quot;</span>)</span>;<span class="hljs-comment">//这一步很重要，修改Python路径</span><br><br><span class="hljs-comment">// 调用Python文件中的函数</span><br>PyObject<span class="hljs-operator"> * </span>pModule = NULL;<span class="hljs-comment">//Python模块</span><br>PyObject<span class="hljs-operator"> * </span>pFunc = NULL;<span class="hljs-comment">//Python函数</span><br>PyObject* args = NULL;<span class="hljs-comment">//函数接受的参数</span><br>PyObject* pRet = NULL;<span class="hljs-comment">//函数返回的参数</span><br><br>pModule = <span class="hljs-constructor">PyImport_ImportModule(<span class="hljs-string">&quot;test13&quot;</span>)</span>;<span class="hljs-comment">//这里是要调用的文件名</span><br>pFunc = <span class="hljs-constructor">PyObject_GetAttrString(<span class="hljs-params">pModule</span>, <span class="hljs-string">&quot;listFuncTest&quot;</span>)</span>;<span class="hljs-comment">//这里是要调用的函数名</span><br><br><span class="hljs-comment">// 将C++的vector转成PyObject类型</span><br>PyObject* list1 = create<span class="hljs-constructor">List(<span class="hljs-params">nums1</span>)</span>;<br>PyObject* list2 = create<span class="hljs-constructor">List(<span class="hljs-params">nums2</span>)</span>;<br>PyObject* list3 = create<span class="hljs-constructor">List(<span class="hljs-params">nums3</span>)</span>;<br><br><span class="hljs-comment">// 多个参数传递到Python需要在外面再加一层tuple包装</span><br>args = <span class="hljs-constructor">PyTuple_New(3)</span>;<br><span class="hljs-constructor">PyTuple_SetItem(<span class="hljs-params">args</span>, 0, <span class="hljs-params">list1</span>)</span>;<br><span class="hljs-constructor">PyTuple_SetItem(<span class="hljs-params">args</span>, 1, <span class="hljs-params">list2</span>)</span>;<br><span class="hljs-constructor">PyTuple_SetItem(<span class="hljs-params">args</span>, 2, <span class="hljs-params">list3</span>)</span>;<br><br><span class="hljs-comment">// 调用Python函数并得到函数返回值（PyObject类型返回值）</span><br>PyObject* pyReturnValue = <span class="hljs-constructor">PyEval_CallObject(<span class="hljs-params">pFunc</span>, <span class="hljs-params">args</span>)</span>;<br><br><span class="hljs-comment">// 解析返回的PyObject类型为C++vector类型</span><br><span class="hljs-built_in">int</span> size_params = <span class="hljs-constructor">PyTuple_Size(<span class="hljs-params">pyReturnValue</span>)</span>;<br><span class="hljs-keyword">for</span> (<span class="hljs-built_in">int</span> i = <span class="hljs-number">0</span>; i &lt; size_params; i++)<br>&#123;<br>PyObject* list_value = <span class="hljs-constructor">PyTuple_GetItem(<span class="hljs-params">pyReturnValue</span>, <span class="hljs-params">i</span>)</span>;<br><span class="hljs-built_in">int</span> size_list = <span class="hljs-constructor">PyList_Size(<span class="hljs-params">list_value</span>)</span>;<br>vector&lt;<span class="hljs-built_in">int</span>&gt; result;<br><span class="hljs-keyword">for</span> (<span class="hljs-built_in">int</span> j = <span class="hljs-number">0</span>; j &lt; size_list; j++)<br>&#123;<br><span class="hljs-built_in">int</span> res = <span class="hljs-number">0</span>;<br><span class="hljs-constructor">PyArg_Parse(PyList_GetItem(<span class="hljs-params">list_value</span>, <span class="hljs-params">j</span>)</span>, <span class="hljs-string">&quot;i&quot;</span>, &amp;res);<br>result.push<span class="hljs-constructor">_back(<span class="hljs-params">res</span>)</span>;<br>&#125;<br><span class="hljs-keyword">for</span> (<span class="hljs-built_in">int</span> j = <span class="hljs-number">0</span>; j &lt; result.size<span class="hljs-literal">()</span>; j++)<br>&#123;<br>cout &lt;&lt; result<span class="hljs-literal">[<span class="hljs-identifier">j</span>]</span> &lt;&lt; <span class="hljs-string">&quot;,&quot;</span>;<br>&#125;<br>cout &lt;&lt; endl;<br>&#125;<br>return <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>运行结果<br><img src="https://cdn.jsdelivr.net/gh/MinghuiJia/CDN-source/Cpp_Calls_Python_Code/step7.png"></p></li></ol><ul><li>上图红色框输出结果为C++ vector数据在调用时作为参数传递到函数后输出的结果</li><li>上图黄色框输出结果为Python函数返回的两个list类型数据，在C++中解析后输出的结果</li></ul><p>更多C++调用Python：<a href="https://blog.csdn.net/dcx_dcx/article/details/104388718?spm=1001.2101.3001.6650.4&utm_medium=distribute.pc_relevant.none-task-blog-2~default~CTRLIST~Rate-4.pc_relevant_default&depth_1-utm_source=distribute.pc_relevant.none-task-blog-2~default~CTRLIST~Rate-4.pc_relevant_default&utm_relevant_index=8">各种参数传递与接收示例</a><br>解析参数和构造值官方文档链接：<a href="https://docs.python.org/3/c-api/arg.html">https://docs.python.org/3/c-api/arg.html</a><br>Python官方C API手册：<a href="https://docs.python.org/zh-cn/3/c-api/concrete.html">https://docs.python.org/zh-cn/3/c-api/concrete.html</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>目标和</title>
    <link href="/2022/03/16/%E7%9B%AE%E6%A0%87%E5%92%8C/"/>
    <url>/2022/03/16/%E7%9B%AE%E6%A0%87%E5%92%8C/</url>
    
    <content type="html"><![CDATA[<h1 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h1><p>给你一个整数数组 <code>nums</code> 和一个整数 <code>target</code><br>向数组中的每个整数前添加 <code>&#39;+&#39;</code> 或 <code>&#39;-&#39;</code> ，然后串联起所有整数，可以构造一个表达式 ：</p><ul><li><p>例如，<code>nums = [2, 1]</code> ，可以在 <code>2</code> 之前添加 <code>&#39;+&#39;</code> ，在 <code>1</code> 之前添加 <code>&#39;-&#39;</code> ，然后串联起来得到表达式 <code>&quot;+2-1&quot;</code><br>返回可以通过上述方法构造的、运算结果等于 <code>target</code> 的不同表达式的数目</p></li><li><p>示例1：</p><figure class="highlight tap"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><pre><code class="hljs tap">输入：nums = [1,1,1,1,1], target = 3<br>输出：5<br>解释：一共有<span class="hljs-number"> 5 </span>种方法让最终目标和为<span class="hljs-number"> 3 </span>。<br>-1 +<span class="hljs-number"> 1 </span>+<span class="hljs-number"> 1 </span>+<span class="hljs-number"> 1 </span>+<span class="hljs-number"> 1 </span>= 3<br>+1 -<span class="hljs-number"> 1 </span>+<span class="hljs-number"> 1 </span>+<span class="hljs-number"> 1 </span>+<span class="hljs-number"> 1 </span>= 3<br>+1 +<span class="hljs-number"> 1 </span>-<span class="hljs-number"> 1 </span>+<span class="hljs-number"> 1 </span>+<span class="hljs-number"> 1 </span>= 3<br>+1 +<span class="hljs-number"> 1 </span>+<span class="hljs-number"> 1 </span>-<span class="hljs-number"> 1 </span>+<span class="hljs-number"> 1 </span>= 3<br>+1 +<span class="hljs-number"> 1 </span>+<span class="hljs-number"> 1 </span>+<span class="hljs-number"> 1 </span>-<span class="hljs-number"> 1 </span>= 3<br></code></pre></td></tr></table></figure></li><li><p>示例2：</p><figure class="highlight nix"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs nix">输入：<span class="hljs-attr">nums</span> = [<span class="hljs-number">1</span>], <span class="hljs-attr">target</span> = <span class="hljs-number">1</span><br>输出：<span class="hljs-number">1</span><br></code></pre></td></tr></table></figure></li></ul><p><strong>提示：</strong></p><ul><li><code>1 &lt;= nums.length &lt;= 20</code></li><li><code>0 &lt;= nums[i] &lt;= 1000</code></li><li><code>0 &lt;= sum(nums[i]) &lt;= 1000</code></li><li><code>-1000 &lt;= target &lt;= 1000</code></li></ul><h1 id="思路-代码"><a href="#思路-代码" class="headerlink" title="思路+代码"></a>思路+代码</h1><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>本题可以采用回溯、动态规划方法分别完成目标和解算</p><ol><li>回溯：</li></ol><ul><li>数组 <code>nums</code> 的每个元素都可以添加符号 <code>+</code> 或 <code>-</code>，因此每个元素有 <code>2</code> 种添加符号的方法，<code>n</code> 个数对应 $2^n$ 种不同的表达式</li><li>如果表达式的结果等于目标数 <code>target</code>，则该表达式即为符合要求的表达式</li><li>可以使用回溯的方法遍历所有的表达式，回溯过程中维护一个计数器 <code>count</code>，当遇到一种表达式的结果等于目标数 <code>target</code> 时，将 <code>count</code> 的值加 <code>1</code></li></ul><p><strong>采用队列的BFS方法也可以遍历所有的表达式，但是这种方式有入队出队操作，在LeetCode提交会超时</strong></p><ol start="2"><li>动态规划</li></ol><ul><li>记数组的元素和为 <code>sum</code>，添加 <code>-</code> 号的元素之和为 <code>neg</code>，则其余添加 <code>+</code> 的元素之和为 <code>sum - neg</code>，得到的表达式的结果为:<code>(sum − neg) − neg = sum − 2 * neg = target</code>，即：<code>neg = (sum − target) / 2</code></li><li>上式成立的前提是 <code>sum - target</code> 是非负偶数。若不符合该条件可直接返回 <code>0</code></li><li>上式成立，问题转化成在数组 <code>nums</code> 中选取若干元素，使得这些元素之和等于 <code>neg</code>，计算选取元素的方案数<ul><li>定义二维数组 <code>dp</code>，其中 <code>dp[i][j]</code> 表示在数组 <code>nums</code> 的前 <code>i</code> 个数中选取元素，使得这些元素之和等于 <code>j</code> 的方案数。假设数组 <code>nums</code> 的长度为 <code>n</code>，则最终答案为 <code>dp[n][neg]</code></li><li>当没有任何元素可以选取时，元素和只能是 <code>0</code>，对应的方案数是 <code>1</code>，因此动态规划的边界条件是：<br>$$dp\lbrack0\rbrack\lbrack j\rbrack&#x3D;\left\{\begin{array}{l}1,\;j&#x3D;0\\0,\;j\geq1\end{array}\right.$$</li></ul></li><li>当 <code>1 ≤ i ≤n</code> 时，对于数组 <code>nums</code> 中的第 <code>i</code> 个元素 <code>num</code>（<code>i</code> 的计数从 <code>1</code> 开始），遍历 <code>0 ≤ j≤ neg</code>，计算 <code>dp[i][j]</code> 的值<ul><li>如果 <code>j &lt; num</code>，则不能选 <code>num</code>，此时有 <code>dp[i−1][j]</code>；</li><li>如果 <code>j ≥ num</code>，则如果不选 <code>num</code>，方案数是 <code>dp[i−1][j]</code>，如果选 <code>num</code>，方案数是 <code>dp[i−1][j−num]</code>，此时有 <code>dp[i][j]=dp[i−1][j]+dp[i−1][j−num]</code></li></ul></li></ul><p>因此状态转移方程如下：<br>$$dp\lbrack i\rbrack\lbrack j\rbrack&#x3D;\left\{\begin{array}{l}d\lbrack i-1\rbrack\lbrack j\rbrack,\;\;\;\;\;\;\;\;\;\;\;\;\;\;\;\;\;\;\;\;\;\;\;\;\;\;\;\;j&lt;num\lbrack i\rbrack\\d\lbrack i-1\rbrack\lbrack j\rbrack+d\lbrack i-1\rbrack\lbrack j-num\lbrack i\rbrack\rbrack,\;j\geq num\lbrack i\rbrack\end{array}\right.$$<br>最终得到 <code>dp[n][neg]</code> 的值即为答案</p><h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><ul><li><p>回溯：</p><figure class="highlight fortran"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs fortran"><span class="hljs-keyword">class</span> Solution &#123;<br><span class="hljs-keyword">public</span>:<br>    <br>    void dfs(vector&lt;<span class="hljs-built_in">int</span>&gt;&amp; nums, <span class="hljs-built_in">int</span> <span class="hljs-keyword">target</span>, <span class="hljs-built_in">int</span> <span class="hljs-built_in">index</span>, <span class="hljs-built_in">int</span> <span class="hljs-built_in">sum</span>, <span class="hljs-built_in">int</span>&amp; <span class="hljs-built_in">count</span>)<br>    &#123;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-built_in">index</span> == nums.<span class="hljs-built_in">size</span>())<br>        &#123;<br>            <span class="hljs-keyword">if</span> (<span class="hljs-built_in">sum</span> == <span class="hljs-keyword">target</span>)<br>                <span class="hljs-built_in">count</span>++;<br>        &#125;<br>        <span class="hljs-keyword">else</span><br>        &#123;<br>            dfs(nums, <span class="hljs-keyword">target</span>, <span class="hljs-built_in">index</span>+<span class="hljs-number">1</span>, <span class="hljs-built_in">sum</span>+nums[<span class="hljs-built_in">index</span>], <span class="hljs-built_in">count</span>);<br>            dfs(nums, <span class="hljs-keyword">target</span>, <span class="hljs-built_in">index</span>+<span class="hljs-number">1</span>, <span class="hljs-built_in">sum</span>-nums[<span class="hljs-built_in">index</span>], <span class="hljs-built_in">count</span>);<br>        &#125;<br>    &#125;<br>    <br>    <span class="hljs-built_in">int</span> findTargetSumWays(vector&lt;<span class="hljs-built_in">int</span>&gt;&amp; nums, <span class="hljs-built_in">int</span> <span class="hljs-keyword">target</span>) &#123;<br>        <br>        <span class="hljs-built_in">int</span> <span class="hljs-built_in">count</span> = <span class="hljs-number">0</span>;<br>        dfs(nums, <span class="hljs-keyword">target</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-built_in">count</span>);<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">count</span>; <br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure></li><li><p>动态规划：</p><figure class="highlight prolog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs prolog">class <span class="hljs-symbol">Solution</span> &#123;<br>    public int findTargetSumWays(int[] nums, int target) &#123;<br>        int sum = <span class="hljs-number">0</span>;<br>        for (int num : nums) &#123;<br>            sum += num;<br>        &#125;<br>        int diff = sum - target;<br>        if (diff &lt; <span class="hljs-number">0</span> || diff <span class="hljs-comment">% 2 != 0) &#123;</span><br>            return <span class="hljs-number">0</span>;<br>        &#125;<br>        int n = nums.length, neg = diff / <span class="hljs-number">2</span>;<br>        int[][] dp = new int[n + <span class="hljs-number">1</span>][neg + <span class="hljs-number">1</span>];<br>        dp[<span class="hljs-number">0</span>][<span class="hljs-number">0</span>] = <span class="hljs-number">1</span>;<br>        for (int i = <span class="hljs-number">1</span>; i &lt;= n; i++) &#123;<br>            int num = nums[i - <span class="hljs-number">1</span>];<br>            for (int j = <span class="hljs-number">0</span>; j &lt;= neg; j++) &#123;<br>                dp[i][j] = dp[i - <span class="hljs-number">1</span>][j];<br>                if (j &gt;= num) &#123;<br>                    dp[i][j] += dp[i - <span class="hljs-number">1</span>][j - num];<br>                &#125;<br>            &#125;<br>        &#125;<br>        return dp[n][neg];<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li></ul><p>由于 <code>dp</code> 的每一行的计算只和上一行有关，因此可以使用滚动数组的方式，去掉 <code>dp</code> 的第一个维度，将空间复杂度优化到 <code>O(neg)</code><br>实现时，内层循环需采用倒序遍历的方式，这种方式保证转移来的是 <code>dp[i−1][]</code> 中的元素值</p><ul><li>动态规划（优化空间复杂度）：<figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-keyword">class</span> Solution &#123;<br>    <span class="hljs-built_in">public</span> <span class="hljs-type">int</span> findTargetSumWays(<span class="hljs-type">int</span>[] nums, <span class="hljs-type">int</span> target) &#123;<br>        <span class="hljs-type">int</span> sum = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> num : nums) &#123;<br>            sum += num;<br>        &#125;<br>        <span class="hljs-type">int</span> diff = sum - target;<br>        <span class="hljs-keyword">if</span> (diff &lt; <span class="hljs-number">0</span> || diff % <span class="hljs-number">2</span> != <span class="hljs-number">0</span>) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>        &#125;<br>        <span class="hljs-type">int</span> neg = diff / <span class="hljs-number">2</span>;<br>        <span class="hljs-type">int</span>[] dp = <span class="hljs-built_in">new</span> <span class="hljs-type">int</span>[neg + <span class="hljs-number">1</span>];<br>        dp[<span class="hljs-number">0</span>] = <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> num : nums) &#123;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = neg; j &gt;= num; j<span class="hljs-comment">--) &#123;</span><br>                dp[j] += dp[j - num];<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> dp[neg];<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li></ul><p>作者：力扣 (LeetCode)<br>链接：<a href="https://leetcode-cn.com/leetbook/read/queue-stack/ga4o2/">https://leetcode-cn.com/leetbook/read/queue-stack/ga4o2/</a><br>来源：力扣（LeetCode）<br>著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>字符串解码</title>
    <link href="/2022/03/16/%E5%AD%97%E7%AC%A6%E4%B8%B2%E8%A7%A3%E7%A0%81/"/>
    <url>/2022/03/16/%E5%AD%97%E7%AC%A6%E4%B8%B2%E8%A7%A3%E7%A0%81/</url>
    
    <content type="html"><![CDATA[<h1 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h1><p>给定一个经过编码的字符串，返回它解码后的字符串。<br>编码规则为: <code>k[encoded_string]</code>，表示其中方括号内部的 <code>encoded_string</code> 正好重复 <code>k</code> 次。注意 <code>k</code> 保证为正整数。你可以认为输入字符串总是有效的；输入字符串中没有额外的空格，且输入的方括号总是符合格式要求的。此外，你可以认为原始数据不包含数字，所有的数字只表示重复的次数 <code>k</code> ，例如不会出现像 <code>3a</code> 或 <code>2[4]</code> 的输入。</p><ul><li><p>示例1：</p><figure class="highlight abnf"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><pre><code class="hljs abnf">输入：s <span class="hljs-operator">=</span> <span class="hljs-string">&quot;3[a]2[bc]&quot;</span><br>输出：<span class="hljs-string">&quot;aaabcbc&quot;</span><br></code></pre></td></tr></table></figure></li><li><p>示例2：</p><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs abnf">输入：s <span class="hljs-operator">=</span> <span class="hljs-string">&quot;3[a2[c]]&quot;</span><br>输出：<span class="hljs-string">&quot;accaccacc&quot;</span><br></code></pre></td></tr></table></figure></li><li><p>示例3：</p><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs abnf">输入：s <span class="hljs-operator">=</span> <span class="hljs-string">&quot;2[abc]3[cd]ef&quot;</span><br>输出：<span class="hljs-string">&quot;abcabccdcdcdef&quot;</span><br></code></pre></td></tr></table></figure></li><li><p>示例4：</p><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs abnf">输入：s <span class="hljs-operator">=</span> <span class="hljs-string">&quot;abc3[cd]xyz&quot;</span><br>输出：<span class="hljs-string">&quot;abccdcdcdxyz&quot;</span><br></code></pre></td></tr></table></figure></li></ul><p><strong>提示：</strong></p><ul><li>1 &lt;&#x3D; s.length &lt;&#x3D; 30</li><li>s 由小写英文字母、数字和方括号 ‘[]’ 组成</li><li>s 保证是一个 有效 的输入。</li><li>s 中所有整数的取值范围为 [1, 300]</li></ul><p> </p><h1 id="思路-代码"><a href="#思路-代码" class="headerlink" title="思路+代码"></a>思路+代码</h1><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>本题可以采用栈操作解法、递归方法分别完成字符串解码</p><ol><li>栈操作：<br>本题中可能出现括号嵌套的情况，比如 <code>2[a2[bc]]</code>，这种情况下我们可以先转化成 <code>2[abcbc]</code>，在转化成 <code>abcbcabcbc</code>。我们可以把字母、数字和括号看成是独立的 <code>TOKEN</code>，并用栈来维护这些 <code>TOKEN</code>。具体的做法是，遍历这个栈：</li></ol><ul><li>如果当前的字符为数位，解析出一个数字（连续的多个数位）并进栈</li><li>如果当前的字符为字母或者左括号，直接进栈</li><li>如果当前的字符为右括号，开始出栈，一直到左括号出栈，出栈序列反转后拼接成一个字符串，此时取出栈顶的数字（此时栈顶一定是数字），就是这个字符串应该出现的次数，我们根据这个次数和字符串构造出新的字符串并进栈</li></ul><p>重复如上操作，最终将栈中的元素按照从栈底到栈顶的顺序拼接起来，就得到了答案。</p><ol start="2"><li>递归从左向右解析字符串：</li></ol><ul><li>如果当前位置为数字位，那么后面一定包含一个用方括号表示的字符串，即属于这种情况：<code>k[...]</code>：<ul><li>我们可以先解析出一个数字，然后解析到了左括号，递归向下解析后面的内容，遇到对应的右括号就返回，此时我们可以根据解析出的数字 <code>xx</code> 解析出的括号里的字符串 <code>x*s</code> </li><li>我们把 <code>k[...]</code> 解析结束后，再次调用递归函数，解析右括号右边的内容。</li></ul></li><li>如果当前位置是字母位，那么我们直接解析当前这个字母，然后递归向下解析这个字母后面的内容。</li></ul><h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><ul><li><p>栈操作1：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br><span class="hljs-function">string <span class="hljs-title">getDigits</span><span class="hljs-params">(string &amp;s, <span class="hljs-type">size_t</span> &amp;ptr)</span> </span>&#123;<br>string ret = <span class="hljs-string">&quot;&quot;</span>;<br><span class="hljs-keyword">while</span> (<span class="hljs-built_in">isdigit</span>(s[ptr])) &#123;<br>ret.<span class="hljs-built_in">push_back</span>(s[ptr++]);<br>&#125;<br><span class="hljs-keyword">return</span> ret;<br>&#125;<br><br><span class="hljs-function">string <span class="hljs-title">getString</span><span class="hljs-params">(vector &lt;string&gt; &amp;v)</span> </span>&#123;<br>string ret;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">const</span> <span class="hljs-keyword">auto</span> &amp;s: v) &#123;<br>ret += s;<br>&#125;<br><span class="hljs-keyword">return</span> ret;<br>&#125;<br><br><span class="hljs-function">string <span class="hljs-title">decodeString</span><span class="hljs-params">(string s)</span> </span>&#123;<br>vector &lt;string&gt; stk;<br><span class="hljs-type">size_t</span> ptr = <span class="hljs-number">0</span>;<br><br><span class="hljs-keyword">while</span> (ptr &lt; s.<span class="hljs-built_in">size</span>()) &#123;<br><span class="hljs-type">char</span> cur = s[ptr];<br><span class="hljs-keyword">if</span> (<span class="hljs-built_in">isdigit</span>(cur)) &#123;<br><span class="hljs-comment">// 获取一个数字并进栈</span><br>string digits = <span class="hljs-built_in">getDigits</span>(s, ptr);<br>stk.<span class="hljs-built_in">push_back</span>(digits);<br>&#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (<span class="hljs-built_in">isalpha</span>(cur) || cur == <span class="hljs-string">&#x27;[&#x27;</span>) &#123;<br><span class="hljs-comment">// 获取一个字母并进栈</span><br>stk.<span class="hljs-built_in">push_back</span>(<span class="hljs-built_in">string</span>(<span class="hljs-number">1</span>, s[ptr++])); <br>&#125; <span class="hljs-keyword">else</span> &#123;<br>++ptr;<br>vector &lt;string&gt; sub;<br><span class="hljs-keyword">while</span> (stk.<span class="hljs-built_in">back</span>() != <span class="hljs-string">&quot;[&quot;</span>) &#123;<br>sub.<span class="hljs-built_in">push_back</span>(stk.<span class="hljs-built_in">back</span>());<br>stk.<span class="hljs-built_in">pop_back</span>();<br>&#125;<br><span class="hljs-built_in">reverse</span>(sub.<span class="hljs-built_in">begin</span>(), sub.<span class="hljs-built_in">end</span>());<br><span class="hljs-comment">// 左括号出栈</span><br>stk.<span class="hljs-built_in">pop_back</span>();<br><span class="hljs-comment">// 此时栈顶为当前 sub 对应的字符串应该出现的次数</span><br><span class="hljs-type">int</span> repTime = <span class="hljs-built_in">stoi</span>(stk.<span class="hljs-built_in">back</span>()); <br>stk.<span class="hljs-built_in">pop_back</span>();<br>string t, o = <span class="hljs-built_in">getString</span>(sub);<br><span class="hljs-comment">// 构造字符串</span><br><span class="hljs-keyword">while</span> (repTime--) t += o; <br><span class="hljs-comment">// 将构造好的字符串入栈</span><br>stk.<span class="hljs-built_in">push_back</span>(t);<br>&#125;<br>&#125;<br><br><span class="hljs-keyword">return</span> <span class="hljs-built_in">getString</span>(stk);<br>&#125;<br>&#125;;<br></code></pre></td></tr></table></figure></li><li><p>栈操作2：</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><code class="hljs csharp"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br><span class="hljs-function"><span class="hljs-built_in">string</span> <span class="hljs-title">decodeString</span>(<span class="hljs-params"><span class="hljs-built_in">string</span> s</span>)</span> &#123;<br><span class="hljs-built_in">int</span> length = s.length();<br><span class="hljs-built_in">string</span> num = <span class="hljs-string">&quot;&quot;</span>;<br><span class="hljs-built_in">string</span> words = <span class="hljs-string">&quot;&quot;</span>;<br>stack&lt;<span class="hljs-built_in">int</span>&gt; s_num;<br>stack&lt;<span class="hljs-built_in">string</span>&gt; s_c;<br><br><span class="hljs-keyword">for</span> (<span class="hljs-built_in">int</span> i = <span class="hljs-number">0</span>; i &lt; length; i++)<br>&#123;<br><span class="hljs-keyword">if</span> (s[i] &gt;= <span class="hljs-string">&#x27;0&#x27;</span> &amp;&amp; s[i] &lt;= <span class="hljs-string">&#x27;9&#x27;</span>)<br>&#123;<br>num += s[i];<br>&#125;<br><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (s[i] &gt;= <span class="hljs-string">&#x27;a&#x27;</span> &amp;&amp; s[i] &lt;= <span class="hljs-string">&#x27;z&#x27;</span>)<br>&#123;<br>words += s[i];<br>&#125;<br><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (s[i] == <span class="hljs-string">&#x27;[&#x27;</span>)<br>&#123;<br><br>s_num.push(atoi(num.c_str()));<br>num = <span class="hljs-string">&quot;&quot;</span>;<br>s_c.push(words);<br>words = <span class="hljs-string">&quot;&quot;</span>;<br>&#125;<br><span class="hljs-keyword">else</span><br>&#123;<br><span class="hljs-built_in">int</span> temp_num = s_num.top();<br>s_num.pop();<br><span class="hljs-built_in">string</span> temp_str = <span class="hljs-string">&quot;&quot;</span>;<br><br><span class="hljs-keyword">for</span> (<span class="hljs-built_in">int</span> k = <span class="hljs-number">0</span>; k &lt; temp_num; k++)<br>&#123;<br>temp_str += words;<br>&#125;<br>words = s_c.top() + temp_str;<br>s_c.pop();<br><br>&#125;<br>&#125;<br><span class="hljs-keyword">return</span> words;<br>&#125;<br>&#125;;<br></code></pre></td></tr></table></figure></li><li><p>递归操作：</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><code class="hljs csharp"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br><span class="hljs-built_in">string</span> src; <br>size_t ptr;<br><br><span class="hljs-function"><span class="hljs-built_in">int</span> <span class="hljs-title">getDigits</span>()</span> &#123;<br><span class="hljs-built_in">int</span> ret = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">while</span> (ptr &lt; src.size() &amp;&amp; isdigit(src[ptr])) &#123;<br>ret = ret * <span class="hljs-number">10</span> + src[ptr++] - <span class="hljs-string">&#x27;0&#x27;</span>;<br>&#125;<br><span class="hljs-keyword">return</span> ret;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-built_in">string</span> <span class="hljs-title">getString</span>()</span> &#123;<br><span class="hljs-keyword">if</span> (ptr == src.size() || src[ptr] == <span class="hljs-string">&#x27;]&#x27;</span>) &#123;<br><span class="hljs-comment">// String -&gt; EPS</span><br><span class="hljs-keyword">return</span> <span class="hljs-string">&quot;&quot;</span>;<br>&#125;<br><br><span class="hljs-built_in">char</span> cur = src[ptr]; <span class="hljs-built_in">int</span> repTime = <span class="hljs-number">1</span>;<br><span class="hljs-built_in">string</span> ret;<br><br><span class="hljs-keyword">if</span> (isdigit(cur)) &#123;<br><span class="hljs-comment">// String -&gt; Digits [ String ] String</span><br><span class="hljs-comment">// 解析 Digits</span><br>repTime = getDigits(); <br><span class="hljs-comment">// 过滤左括号</span><br>++ptr;<br><span class="hljs-comment">// 解析 String</span><br><span class="hljs-built_in">string</span> str = getString(); <br><span class="hljs-comment">// 过滤右括号</span><br>++ptr;<br><span class="hljs-comment">// 构造字符串</span><br><span class="hljs-keyword">while</span> (repTime--) ret += str; <br>&#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (isalpha(cur)) &#123;<br><span class="hljs-comment">// String -&gt; Char String</span><br><span class="hljs-comment">// 解析 Char</span><br>ret = <span class="hljs-built_in">string</span>(<span class="hljs-number">1</span>, src[ptr++]);<br>&#125;<br><br><span class="hljs-keyword">return</span> ret + getString();<br>&#125;<br><br><span class="hljs-function"><span class="hljs-built_in">string</span> <span class="hljs-title">decodeString</span>(<span class="hljs-params"><span class="hljs-built_in">string</span> s</span>)</span> &#123;<br>src = s;<br>ptr = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">return</span> getString();<br>&#125;<br>&#125;;<br></code></pre></td></tr></table></figure></li></ul><p>作者：力扣 (LeetCode)<br>链接：<a href="https://leetcode-cn.com/leetbook/read/queue-stack/gdwjv/">https://leetcode-cn.com/leetbook/read/queue-stack/gdwjv/</a><br>来源：力扣（LeetCode）<br>著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Hexo-fluid主题设置统计博客阅读量与评论</title>
    <link href="/2022/03/14/Hexo-fluid%E4%B8%BB%E9%A2%98%E8%AE%BE%E7%BD%AE%E7%BB%9F%E8%AE%A1%E5%8D%9A%E5%AE%A2%E9%98%85%E8%AF%BB%E9%87%8F/"/>
    <url>/2022/03/14/Hexo-fluid%E4%B8%BB%E9%A2%98%E8%AE%BE%E7%BD%AE%E7%BB%9F%E8%AE%A1%E5%8D%9A%E5%AE%A2%E9%98%85%E8%AF%BB%E9%87%8F/</url>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>本篇博客基于LeanCloud统计博客页面访问次数与访问人数、及文章阅读次数，以及实现文章与友情链接评论功能</p><!-- more --><h1 id="配置-LeanCloud"><a href="#配置-LeanCloud" class="headerlink" title="配置 LeanCloud"></a>配置 LeanCloud</h1><h2 id="LeanCloud数据库设置"><a href="#LeanCloud数据库设置" class="headerlink" title="LeanCloud数据库设置"></a>LeanCloud数据库设置</h2><ol><li>进入<code>LeanCloud官网</code>:<a href="https://www.leancloud.cn/">https://www.leancloud.cn/</a> ，或<code>LeanCloud国际版</code>:<a href="https://leancloud.app/">https://leancloud.app/</a> ，注册账号并完成实名认证和邮箱验证</li><li>在LeanCloud主页面按照如下3步骤，进行应用的创建（用户名随意起）<br><img src="https://cdn.jsdelivr.net/gh/MinghuiJia/CDN-source/Hexo-fluid_Theme_Setting_Counts_Blog_Reads/step1.png"></li><li>创建Class，按照如下步骤，在<code>数据存储</code>-&gt;<code>结构化存储</code>创建Class<br><img src="https://cdn.jsdelivr.net/gh/MinghuiJia/CDN-source/Hexo-fluid_Theme_Setting_Counts_Blog_Reads/step2.png"></li></ol><p><strong>注意：</strong></p><ul><li>此处创建的 Class 名字必须为Counter，用来保证与NexT主题的修改相兼容，fluid没有限制要求</li><li>ACL权限选择无限制，避免后续因为权限的问题导致次数统计显示不正常</li></ul><ol start="4"><li>在创建的应用设置中寻找AppID与AppKey<div align="center"><img src="https://cdn.jsdelivr.net/gh/MinghuiJia/CDN-source/Hexo-fluid_Theme_Setting_Counts_Blog_Reads/step3.png"></div><div align="center"><img src="https://cdn.jsdelivr.net/gh/MinghuiJia/CDN-source/Hexo-fluid_Theme_Setting_Counts_Blog_Reads/step4.png"></div></li></ol><h2 id="修改主题配置文件中LeanCloud参数"><a href="#修改主题配置文件中LeanCloud参数" class="headerlink" title="修改主题配置文件中LeanCloud参数"></a>修改主题配置文件中LeanCloud参数</h2><ol><li>打开fluid的主题配置文件<code>_config.yml</code>，把配置 LeanCloud时的AppID与AppKey复制到如下位置，并设置<code>ignore_local</code>为<code>true</code>，保证在本地启动服务的时候不会记录访问次数<figure class="highlight yaml"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></div></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-comment"># LeanCloud 计数统计，可用于 PV UV 展示，如果 `web_analytics: enable` 没有开启，PV UV 展示只会查询不会增加</span><br><span class="hljs-comment"># LeanCloud count statistics, which can be used for PV UV display. If `web_analytics: enable` is false, PV UV display will only query and not increase</span><br><span class="hljs-attr">leancloud:</span><br><span class="hljs-attr">app_id:</span> <span class="hljs-string">xxx</span><br><span class="hljs-attr">app_key:</span> <span class="hljs-string">xxx</span><br>    <span class="hljs-comment"># REST API 服务器地址，国际版不填</span><br>    <span class="hljs-comment"># Only the Chinese mainland users need to set</span><br><span class="hljs-attr">server_url:</span> <br>    <span class="hljs-comment"># 统计页面时获取路径的属性</span><br>    <span class="hljs-comment"># Get the attribute of the page path during statistics</span><br><span class="hljs-attr">path:</span> <span class="hljs-string">window.location.pathname</span><br>    <span class="hljs-comment"># 开启后不统计本地路径( localhost 与 127.0.0.1 )</span><br>    <span class="hljs-comment"># If ture, ignore localhost &amp; 127.0.0.1</span><br><span class="hljs-attr">ignore_local:</span> <span class="hljs-literal">true</span><br></code></pre></td></tr></table></figure></li></ol><h1 id="博客页访问及文章阅读次数设置"><a href="#博客页访问及文章阅读次数设置" class="headerlink" title="博客页访问及文章阅读次数设置"></a>博客页访问及文章阅读次数设置</h1><ol><li>在fluid主题配置文件页脚部分的<code>enable</code>与<code>source</code>进行如下设置，这样可以在博客页面最下面看到访问人数与访问次数<figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-comment"># 展示网站的 PV、UV 统计数</span><br><span class="hljs-comment"># Display website PV and UV statistics</span><br><span class="hljs-attr">statistics:</span><br>   <span class="hljs-attr">enable:</span> <span class="hljs-literal">true</span><br><br>   <span class="hljs-comment"># 统计数据来源，使用 leancloud 需要设置 `web_analytics: leancloud` 中的参数；使用 busuanzi 不需要额外设置，但是有时不稳定，另外本地运行时 busuanzi 显示统计数据很大属于正常现象，部署后会正常</span><br>   <span class="hljs-comment"># Data source. If use leancloud, you need to set the parameter in `web_analytics: leancloud`</span><br>   <span class="hljs-comment"># Options: busuanzi | leancloud</span><br>   <span class="hljs-attr">source:</span> <span class="hljs-string">&quot;leancloud&quot;</span><br><br>   <span class="hljs-comment"># 页面显示的文本，&#123;&#125;是数字的占位符（必须包含)，下同</span><br>   <span class="hljs-comment"># Displayed text, &#123;&#125; is a placeholder for numbers (must be included), the same below</span><br>   <span class="hljs-attr">pv_format:</span> <span class="hljs-string">&quot;总访问量 &#123;&#125; 次&quot;</span><br>   <span class="hljs-attr">uv_format:</span> <span class="hljs-string">&quot;总访客数 &#123;&#125; 人&quot;</span><br></code></pre></td></tr></table></figure></li><li>在fluid主题配置文件中搜索<code>views</code>，将<code>enable</code>与<code>source</code>两处进行设置，可以实现对每篇博客的访问次数进行统计<figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs dts"><span class="hljs-meta"># 浏览量计数</span><br><span class="hljs-meta"># Number of visits</span><br><span class="hljs-symbol">views:</span><br><span class="hljs-symbol">  enable:</span> true<br>  <span class="hljs-meta"># 统计数据来源</span><br>  <span class="hljs-meta"># Data Source</span><br>  <span class="hljs-meta"># Options: busuanzi | leancloud</span><br><span class="hljs-symbol">  source:</span> <span class="hljs-string">&quot;leancloud&quot;</span><br><span class="hljs-symbol">  format:</span> <span class="hljs-string">&quot;&#123;&#125; 次&quot;</span><br></code></pre></td></tr></table></figure></li><li><strong>最后使用<code>hexo g</code>、<code>hexo d</code>命令重新部署博客，就可以正常使用文章阅读量统计的功能了</strong></li></ol><h1 id="评论设置"><a href="#评论设置" class="headerlink" title="评论设置"></a>评论设置</h1><p>为了方便对文章感兴趣的小伙伴可以在博客上与博主互动，我特地增加了评论功能。这里我选择了一款叫做<code>Waline</code>的带后端评论系统。该系统从<code>Valine</code>衍生而来，具有免费部署、轻量易用等特点。最重要的是它具备：<strong>邮件通知、评论管理、社交登录支持、置顶评论等</strong>功能</p><div class="note note-warning">            <p>由于Leancloud国内版(<a href="https://www.leancloud.cn/">https://www.leancloud.cn/</a>) 需要为应用额外绑定<strong>已备案</strong>的域名，同时购买独立IP并完成备案接入。因此我们切换到国际版(<a href="https://leancloud.app/">https://leancloud.app/</a>)</p>          </div><h2 id="配置-LeanCloud-数据库"><a href="#配置-LeanCloud-数据库" class="headerlink" title="配置 LeanCloud 数据库"></a>配置 LeanCloud 数据库</h2><p>本文已讲解如何配置 LeanCloud，因此该步骤略过，具体操作可返回上文查看：<a href="#%E9%85%8D%E7%BD%AE-LeanCloud">配置 LeanCloud</a></p><h2 id="配置-Vercel-服务端"><a href="#配置-Vercel-服务端" class="headerlink" title="配置 Vercel 服务端"></a>配置 Vercel 服务端</h2><ol><li>通过点击 <a href="https://vercel.com/new/clone?repository-url=https://github.com/walinejs/waline/tree/main/example">Vercel</a> 跳转至<code>Vercel</code>进行<code>Server</code>端部署<div class="note note-info">            <p><strong>注意：如果未登录过，Vercel会让你注册或登录，可使用GitHub账户进行快捷登录</strong></p>          </div></li><li>输入一个自定义<code>Vercel</code>项目名称并点击<code>Create</code>创建项目<br><img src="https://cdn.jsdelivr.net/gh/MinghuiJia/CDN-source/Hexo-fluid_Theme_Setting_Counts_Blog_Reads/vercel1.png"></li><li>此时<code>Vercel</code>会基于Waline模板新建并初始化仓库到GitHub，仓库名为之前输入的项目名称。项目部署会等待一小会儿<br><img src="https://cdn.jsdelivr.net/gh/MinghuiJia/CDN-source/Hexo-fluid_Theme_Setting_Counts_Blog_Reads/vercel2.png"></li><li>项目部署成功后，点击<code>Go to Dashboard</code>跳转至应用控制台。然后点击顶部的<code>Settings</code>-<code>Environment Variables</code>进入环境变量配置页，并配置三个环境变量名称为：<code>LEAN_ID</code>、<code>LEAN_KEY</code>、<code>LEAN_MASTER_KEY</code>，它们的值分别对应<code>LeanCloud</code>中得到的<code>APP ID</code>、<code>APP KEY</code>、<code>Master Key</code><br><img src="https://cdn.jsdelivr.net/gh/MinghuiJia/CDN-source/Hexo-fluid_Theme_Setting_Counts_Blog_Reads/vercel3.png"><div class="note note-info">            <p>使用LeanCloud国内版，需要额外配置<code>LEAN_SERVER</code>环境变量，值为绑定好的域名</p>          </div></li><li>环境变量配置好之后，点击顶部的<code>Deployments</code>，然后点击顶部最新的一次部署右侧的<code>Redeploy</code>按钮进行重新部署，使得刚设置的环境变量生效<br><img src="https://cdn.jsdelivr.net/gh/MinghuiJia/CDN-source/Hexo-fluid_Theme_Setting_Counts_Blog_Reads/vercel4.png"></li><li>等待几分钟后，部署项目的状态<code>STATUS</code>会变成<code>Ready</code>。此时点击页面中的<code>Visit</code>即可跳转到刚部署好的网站地址，该地址就是今后评论系统的服务端地址<br><img src="https://cdn.jsdelivr.net/gh/MinghuiJia/CDN-source/Hexo-fluid_Theme_Setting_Counts_Blog_Reads/vercel5.png"></li><li>接下来点击顶部的<code>Settings</code>-<code>Domains</code>进入域名配置页，输入需要绑定的域名并点击Add<br><img src="https://cdn.jsdelivr.net/gh/MinghuiJia/CDN-source/Hexo-fluid_Theme_Setting_Counts_Blog_Reads/vercel6.png"><div class="note note-info">            <p>绑定域名为<strong>example.yourdomain.com</strong>，其中<code>example</code>可以自定义修改，<code>yourdomain.com</code>则是自己的域名</p>          </div></li><li>添加完绑定域名之后，要在域名服务器商处添加新的<code>CNAME</code>解析记录<table><thead><tr><th align="center">Type</th><th align="center">Name</th><th align="center">Value</th></tr></thead><tbody><tr><td align="center">CNAME</td><td align="center">example</td><td align="center">cname.vercel-dns.com</td></tr></tbody></table></li><li>最后等待生效，看到如下图则表明绑定成功<br><img src="https://cdn.jsdelivr.net/gh/MinghuiJia/CDN-source/Hexo-fluid_Theme_Setting_Counts_Blog_Reads/vercel7.png"><div class="note note-info">            <ul><li>评论系统：example.yourdomain.com</li><li>评论管理：example.yourdomain.com&#x2F;ui</li></ul>          </div></li></ol><h2 id="修改主题配置文件中评论插件参数"><a href="#修改主题配置文件中评论插件参数" class="headerlink" title="修改主题配置文件中评论插件参数"></a>修改主题配置文件中评论插件参数</h2><ol><li><p>当用户配置好LeanCloud后，可以在主题配置文件<code>_config.yml</code>文件中找到评论插件部分，设置<code>Waline</code>部分</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-comment">#---------------------------</span><br><span class="hljs-comment"># 评论插件</span><br><span class="hljs-comment"># Comment plugins</span><br><span class="hljs-comment">#</span><br><span class="hljs-comment"># 开启评论需要先设置上方 `post: comments: enable: true`，然后根据 `type` 设置下方对应的评论插件参数</span><br><span class="hljs-comment"># Enable comments need to be set `post: comments: enable: true`, then set the corresponding comment plugin parameters below according to `type`</span><br><span class="hljs-comment">#---------------------------</span><br><span class="hljs-comment"># Waline</span><br><span class="hljs-comment"># 从 Valine 衍生而来，额外增加了服务端和多种功能</span><br><span class="hljs-comment"># Derived from Valine, with self-hosted service and new features</span><br><span class="hljs-comment"># See: https://waline.js.org/</span><br><span class="hljs-attr">waline:</span><br>  <span class="hljs-attr">serverURL:</span> <span class="hljs-string">&#x27;https://waline.minghuijia.cn/&#x27;</span><br>  <span class="hljs-attr">path:</span> <span class="hljs-string">window.location.pathname</span><br>  <span class="hljs-attr">placeholder:</span> <span class="hljs-string">欢迎评论</span><br>  <span class="hljs-attr">meta:</span> [<span class="hljs-string">&#x27;nick&#x27;</span>, <span class="hljs-string">&#x27;mail&#x27;</span>, <span class="hljs-string">&#x27;link&#x27;</span>]<br>  <span class="hljs-attr">requiredMeta:</span> [<span class="hljs-string">&#x27;nick&#x27;</span>]<br>  <span class="hljs-attr">lang:</span> <span class="hljs-string">&#x27;zh-CN&#x27;</span><br>  <span class="hljs-attr">emoji:</span> [<span class="hljs-string">&#x27;https://cdn.jsdelivr.net/gh/walinejs/emojis/weibo&#x27;</span>]<br>  <span class="hljs-attr">dark:</span> <span class="hljs-string">&#x27;html[data-user-color-scheme=&quot;dark&quot;]&#x27;</span><br>  <span class="hljs-attr">avatar:</span> <span class="hljs-string">&#x27;retro&#x27;</span><br>  <span class="hljs-attr">avatarCDN:</span> <span class="hljs-string">&#x27;https://seccdn.libravatar.org/avatar/&#x27;</span><br>  <span class="hljs-attr">avatarForce:</span> <span class="hljs-literal">false</span><br>  <span class="hljs-attr">wordLimit:</span> <span class="hljs-number">0</span><br>  <span class="hljs-attr">pageSize:</span> <span class="hljs-number">10</span><br>  <span class="hljs-attr">highlight:</span> <span class="hljs-literal">true</span><br>  <span class="hljs-attr">login:</span> <span class="hljs-string">&#x27;force&#x27;</span><br>  <span class="hljs-attr">visitor:</span> <span class="hljs-literal">true</span><br></code></pre></td></tr></table></figure><div class="note note-info">            <p>在主题配置文件<code>_config.yml</code>中可能存在部分前端配置参数没有填写，用户通过查看<a href="https://waline.js.org/reference/client.html#el"><strong>帮助手册</strong></a>自行添加即可</p>          </div></li><li><p>在fluid主题中可以搜索<code>comments</code>关键词，分别对友情链接与文章页进行评论设置，分别设置<code>enable</code>为<code>true</code>，<code>type</code>为<code>waline</code></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-comment">#---------------------------</span><br><span class="hljs-comment"># 文章页</span><br><span class="hljs-comment"># Post Page</span><br><span class="hljs-comment">#---------------------------</span><br><span class="hljs-comment"># 评论插件</span><br>  <span class="hljs-comment"># Comment plugin</span><br>  <span class="hljs-attr">comments:</span><br>    <span class="hljs-attr">enable:</span> <span class="hljs-literal">true</span><br>    <span class="hljs-comment"># 指定的插件，需要同时设置对应插件的必要参数</span><br>    <span class="hljs-comment"># The specified plugin needs to set the necessary parameters at the same time</span><br>    <span class="hljs-comment"># Options: utterances | disqus | gitalk | valine | waline | changyan | livere | remark42 | twikoo | cusdis</span><br>    <span class="hljs-attr">type:</span> <span class="hljs-string">waline</span><br><br><span class="hljs-comment">#---------------------------</span><br><span class="hljs-comment"># 友链页</span><br><span class="hljs-comment"># Links Page</span><br><span class="hljs-comment">#---------------------------</span><br><span class="hljs-comment"># 评论插件</span><br>  <span class="hljs-comment"># Comment plugin</span><br>  <span class="hljs-attr">comments:</span><br>    <span class="hljs-attr">enable:</span> <span class="hljs-literal">true</span><br>    <span class="hljs-comment"># 指定的插件，需要同时设置对应插件的必要参数</span><br>    <span class="hljs-comment"># The specified plugin needs to set the necessary parameters at the same time</span><br>    <span class="hljs-comment"># Options: utterances | disqus | gitalk | valine | waline | changyan | livere | remark42 | twikoo | cusdis</span><br>    <span class="hljs-attr">type:</span> <span class="hljs-string">waline</span><br></code></pre></td></tr></table></figure></li><li><p>此时访问友情链接页与任意博客文章时，在页面底部均可以看到评论区域。如果希望某篇博客关闭评论，可以通过在 <code>Front-matter</code> 设置 <code>comment: bool</code> 来控制评论开关，或者通过 <code>comment: &#39;type&#39;</code> 来开启指定的评论插件</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-meta">---</span><br><span class="hljs-attr">title:</span> <span class="hljs-string">Hexo-fluid主题设置统计博客阅读量</span><br><span class="hljs-attr">date:</span> <span class="hljs-number">2022-03-14 21:05:19</span><br><span class="hljs-attr">comment:</span> <span class="hljs-literal">false</span><br><span class="hljs-attr">tags:</span><br> <span class="hljs-bullet">-</span> <span class="hljs-string">hexo</span><br> <span class="hljs-bullet">-</span> <span class="hljs-string">博客阅读量</span><br><span class="hljs-attr">categories:</span><br> <span class="hljs-bullet">-</span> <span class="hljs-string">hexo</span><br><br><span class="hljs-meta">---</span><br></code></pre></td></tr></table></figure></li></ol><h2 id="评论通知"><a href="#评论通知" class="headerlink" title="评论通知"></a>评论通知</h2><p>当网站有用户发布评论或者用户回复评论时，<code>Waline</code>支持对博主和回复评论作者进行通知。博主通知支持多种方式，包括 QQ、微信、邮件等，回复评论作者仅支持邮件通知<br>下面讲介绍邮件通知功能的配置过程</p><ol><li>在<code>Vercel</code>服务端添加环境变量。在部署项目顶部的<code>Settings</code>-<code>Environment Variables</code>进入环境变量配置页下列环境变量：<ul><li><code>SMTP_SERVICE</code>：SMTP 邮件发送服务提供商</li><li><code>SMTP_USER</code>：SMTP 邮件发送服务的用户名，一般为登录邮箱</li><li><code>SMTP_PASS</code>：SMTP 邮件发送服务的密码，一般为邮箱登录密码，部分邮箱(例如 163)是单独的 SMTP 密码</li><li><code>AUTHOR_EMAIL</code>：博主邮箱，用来接收新评论通知。如果是博主发布的评论则不进行提醒通知</li></ul></li></ol><p><img src="https://cdn.jsdelivr.net/gh/MinghuiJia/CDN-source/Hexo-fluid_Theme_Setting_Counts_Blog_Reads/email1.png"></p><div class="note note-success">            <p><code>SMTP_SERVICE</code>所支持的运营商可以在<a href="https://github.com/nodemailer/nodemailer/blob/master/lib/well-known/services.json"><strong>这里</strong></a>查看<br>如果运营商不受支持，则必须填写<code>SMTP_HOST</code>与<code>SMTP_PORT</code>。</p><ul><li><code>SMTP_HOST</code>：SMTP 服务器地址，一般可以在邮箱的设置中找到</li><li><code>SMTP_PORT</code>：SMTP 服务器端口，一般可以在邮箱的设置中找到</li></ul>          </div><div class="note note-warning">            <p>用户注册和评论的邮件通知都会用到邮件服务。配置邮件服务相关变量后，用户注册会增加邮箱验证码确认相关的操作，用来防止恶意的注册。</p>          </div><ol start="2"><li>环境变量配置好之后，点击顶部的<code>Deployments</code>，然后点击顶部最新的一次部署右侧的<code>Redeploy</code>按钮进行重新部署，使得刚设置的环境变量生效</li><li>在LeanCloud应用的<code>设置</code>-<code>安全中心</code>中，将<code>推送服务</code>打开<br><img src="https://cdn.jsdelivr.net/gh/MinghuiJia/CDN-source/Hexo-fluid_Theme_Setting_Counts_Blog_Reads/email2.png"></li></ol><h1 id="后台管理"><a href="#后台管理" class="headerlink" title="后台管理"></a>后台管理</h1><p>当以上部分配置完成之后，我们的博客页面打开时，便会自动向服务器发送信息</p><ol><li>在我们刚才创建的应用waline-test的Counter表中，可以看到创建了每篇文章阅读的次数，以及用户访问博客的次数及人数<br><img src="https://cdn.jsdelivr.net/gh/MinghuiJia/CDN-source/Hexo-fluid_Theme_Setting_Counts_Blog_Reads/step8.png"></li></ol><p><em><strong>需要特别说明的是：</strong></em><br>记录文章访问量的唯一标识符是文章的发布日期和文章的标题，因此要确保这两个数值组合的唯一性，如果你更改了这两个数值，会造成文章阅读数值的清零重计。其中time字段的数值表示某一篇文章的访问量，其他字段的具体作用可以查阅LeanCloud官方文档，最好不要随意修改<br>2. 在Comment表中可以看到在博客中的留言信息<br><img src="https://cdn.jsdelivr.net/gh/MinghuiJia/CDN-source/Hexo-fluid_Theme_Setting_Counts_Blog_Reads/comment1.png"><br>3. 在Users表中可以看到所有注册过的用户信息<br><img src="https://cdn.jsdelivr.net/gh/MinghuiJia/CDN-source/Hexo-fluid_Theme_Setting_Counts_Blog_Reads/comment2.png"></p><div class="note note-info">            <p>当使用评论的登录功能时，第一个注册的用户默认为评论管理系统的管理员。因此用户配置评论系统后需及时申请管理员账号</p>          </div><h1 id="更多Fluid主题自定义教程（持续更新）"><a href="#更多Fluid主题自定义教程（持续更新）" class="headerlink" title="更多Fluid主题自定义教程（持续更新）"></a>更多Fluid主题自定义教程（持续更新）</h1><ul><li>Hexo’s Fluid 主题私人定制链接：<a href="https://www.erenship.com/posts/40222.html">https://www.erenship.com/posts/40222.html</a></li></ul><h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><p>Waline配置帮助手册：<a href="https://waline.js.org/">https://waline.js.org/</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Qt子线程更新主线程进度条</title>
    <link href="/2022/03/13/Qt%E5%AD%90%E7%BA%BF%E7%A8%8B%E6%9B%B4%E6%96%B0%E4%B8%BB%E7%BA%BF%E7%A8%8B%E8%BF%9B%E5%BA%A6%E6%9D%A1/"/>
    <url>/2022/03/13/Qt%E5%AD%90%E7%BA%BF%E7%A8%8B%E6%9B%B4%E6%96%B0%E4%B8%BB%E7%BA%BF%E7%A8%8B%E8%BF%9B%E5%BA%A6%E6%9D%A1/</url>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>在Qt多线程编程过程中，常常会遇到不同线程之间数据传递的需求。此博客则是通过一个简单的例子——子线程任务处理过程中更新主线程进度条，来介绍线程间数据传递的解决方法</p><!-- more --><h1 id="任务需求"><a href="#任务需求" class="headerlink" title="任务需求"></a>任务需求</h1><p>由于程序存在耗时的操作，因此将此耗时的操作放在一个新的线程中从而避免界面“假死”。但是在耗时操作执行过程中，为了给用户友好的交互体验，需要利用进度条（ProgressBar）给用户展示程序实时处理的进度，这就涉及到在子线程中耗时操作的处理进度变量如何传递到界面主线程中</p><h1 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h1><h2 id="定义信号函数"><a href="#定义信号函数" class="headerlink" title="定义信号函数"></a>定义信号函数</h2><p>在子线程对应的类中定义信号函数，用于传递子线程任务进度变量</p><figure class="highlight csharp"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></div></td><td class="code"><pre><code class="hljs csharp"><span class="hljs-keyword">class</span> <span class="hljs-title">workThread</span> : <span class="hljs-title">public</span> <span class="hljs-title">QObject</span><br>&#123;<br>Q_OBJECT<br><span class="hljs-keyword">public</span>:<br>workThread(QObject* parent = nullptr);<br>~workThread();<br><span class="hljs-built_in">bool</span> m_bStart;<br><br><span class="hljs-keyword">public</span> slots:<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">start1</span>()</span>;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">doWork</span>()</span>;<br><br>signals:<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">workFinished</span>()</span>;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">workStart</span>()</span>;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">updateProgress</span>(<span class="hljs-params"><span class="hljs-keyword">const</span> <span class="hljs-built_in">int</span> nNum</span>)</span>;<span class="hljs-comment">//子线程信号函数（传递数据）</span><br>&#125;;<br></code></pre></td></tr></table></figure><h2 id="定义相应的槽函数"><a href="#定义相应的槽函数" class="headerlink" title="定义相应的槽函数"></a>定义相应的槽函数</h2><p>在主线程类中定义更新进度条的槽函数，其中更新所需的变量信息通过上一步子线程的信号函数进行传递</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">class</span> <span class="hljs-title class_">QtWidgetsApplication1</span> : <span class="hljs-keyword">public</span> QWidget<br>&#123;<br>Q_OBJECT<br><br><span class="hljs-keyword">public</span>:<br><span class="hljs-built_in">QtWidgetsApplication1</span>(QWidget *parent = Q_NULLPTR);<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">updateProgress</span><span class="hljs-params">(<span class="hljs-type">int</span> nNum)</span></span>;<span class="hljs-comment">//主线程槽函数（根据信号传递来的数据更新进度条）</span><br><br><span class="hljs-keyword">private</span> slots:<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">on_pushButton_clicked</span><span class="hljs-params">()</span></span>;<br><br><span class="hljs-keyword">private</span>:<br>Ui::QtWidgetsApplication1Class ui;<br>&#125;;<br></code></pre></td></tr></table></figure><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs reasonml">void QtWidgetsApplication1::update<span class="hljs-constructor">Progress(<span class="hljs-params">int</span> <span class="hljs-params">nNum</span>)</span><br>&#123;<br>ui.progressBar-&gt;set<span class="hljs-constructor">Value(<span class="hljs-params">nNum</span>)</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="建立信号与槽的联系"><a href="#建立信号与槽的联系" class="headerlink" title="建立信号与槽的联系"></a>建立信号与槽的联系</h2><p>在主线程中建立信号与槽的联系</p><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs dts">void QtWidgetsApplication1::on_pushButton_clicked()<br><span class="hljs-punctuation">&#123;</span><br>QThread* m_workT<span class="hljs-attr">hread</span> <span class="hljs-operator">=</span> new QThread()<span class="hljs-punctuation">;</span><br>workThread* <span class="hljs-attr">worker</span> <span class="hljs-operator">=</span> new workThread()<span class="hljs-punctuation">;</span><br>worker-&gt;moveToThread(m_workThread)<span class="hljs-punctuation">;</span><br><br><span class="hljs-comment">//建立信号槽连接</span><br>connect(worker, <span class="hljs-variable">&amp;</span>workThread::updateProgress, this, <span class="hljs-variable">&amp;</span>QtWidgetsApplication1::updateProgress)<span class="hljs-punctuation">;</span> <span class="hljs-comment">//建立子线程对象与主线程对象之间的信号与槽的连接</span><br>connect(m_workThread, <span class="hljs-variable">&amp;</span>QThread::started, worker, <span class="hljs-variable">&amp;</span>workThread::start1)<span class="hljs-punctuation">;</span><br>connect(worker, <span class="hljs-variable">&amp;</span>workThread::workFinished, worker, <span class="hljs-variable">&amp;</span>workThread::deleteLater)<span class="hljs-punctuation">;</span><br>connect(worker, <span class="hljs-variable">&amp;</span>workThread::workFinished, m_workThread, <span class="hljs-variable">&amp;</span>QThread::quit)<span class="hljs-punctuation">;</span><br>connect(m_workThread, <span class="hljs-variable">&amp;</span>QThread::finished, m_workThread, <span class="hljs-variable">&amp;</span>QThread::deleteLater)<span class="hljs-punctuation">;</span><br>worker-&gt;m_bS<span class="hljs-attr">tart</span> <span class="hljs-operator">=</span> <span class="hljs-attr">true</span><span class="hljs-punctuation">;</span><br>m_workThread-&gt;start()<span class="hljs-punctuation">;</span><br>worker-&gt;m_bS<span class="hljs-attr">tart</span> <span class="hljs-operator">=</span> <span class="hljs-attr">false</span><span class="hljs-punctuation">;</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><h2 id="发送信号"><a href="#发送信号" class="headerlink" title="发送信号"></a>发送信号</h2><p>在子线程处理耗时（循环）任务时，不断发送信号，将数据传递给主线程用于更新进度条</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs scss">void workThread::doWork()<br>&#123;<br>for (int i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">1000000</span>; i++)<br>&#123;<br><span class="hljs-built_in">qDebug</span>() &lt;&lt; <span class="hljs-selector-tag">i</span>;<br>emit <span class="hljs-built_in">updateProgress</span>(i + <span class="hljs-number">1</span>);<span class="hljs-comment">//发送信号（传递数据）</span><br>&#125;<br>emit <span class="hljs-built_in">workFinished</span>();<span class="hljs-comment">//发送信号，表明线程结束工作</span><br>&#125;<br></code></pre></td></tr></table></figure><h2 id="初始化进度条的属性"><a href="#初始化进度条的属性" class="headerlink" title="初始化进度条的属性"></a>初始化进度条的属性</h2><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs reasonml">QtWidgetsApplication1::<span class="hljs-constructor">QtWidgetsApplication1(QWidget <span class="hljs-operator">*</span><span class="hljs-params">parent</span>)</span><br>    : <span class="hljs-constructor">QWidget(<span class="hljs-params">parent</span>)</span><br>&#123;<br>    ui.setup<span class="hljs-constructor">Ui(<span class="hljs-params">this</span>)</span>;<br>ui.progressBar-&gt;set<span class="hljs-constructor">Range(0, 100)</span>;<span class="hljs-comment">//设置进度条显示的范围</span><br>ui.progressBar-&gt;set<span class="hljs-constructor">Minimum(0)</span>;<span class="hljs-comment">//设置程序任务的最小数量，对应range的最小值</span><br>ui.progressBar-&gt;set<span class="hljs-constructor">Maximum(1000000)</span>;<span class="hljs-comment">//设置程序任务的最大数量，对应range的最大值</span><br>&#125;<br></code></pre></td></tr></table></figure><h2 id="结果展示"><a href="#结果展示" class="headerlink" title="结果展示"></a>结果展示</h2><p>程序运行截图如下：<br><img src="https://cdn.jsdelivr.net/gh/MinghuiJia/CDN-source/Qt_Child_Thread_Updates_The_Main_Thread_Progressbar/step1.png"><br>此时，程序在执行1000000次循环输出，可以实时更新处理进度</p><h1 id="辅助知识"><a href="#辅助知识" class="headerlink" title="辅助知识"></a>辅助知识</h1><p>connect函数的五个参数表示的意义依次为：<code>sender＊</code>，<code>signal</code>，<code>receiver＊</code>，<code>slot</code>，<code>connectionTpye</code></p><p>其中槽可以是receiver的成员函数，或者是任意可访问的静态函数。</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Qt主界面假死解决</title>
    <link href="/2022/03/13/Qt%E4%B8%BB%E7%95%8C%E9%9D%A2%E5%81%87%E6%AD%BB%E8%A7%A3%E5%86%B3/"/>
    <url>/2022/03/13/Qt%E4%B8%BB%E7%95%8C%E9%9D%A2%E5%81%87%E6%AD%BB%E8%A7%A3%E5%86%B3/</url>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>在利用Qt进行可视化编程时，某个过于耗时的操作会造成界面卡死现象。例如用户点击界面的Button控件，程序会执行clicked槽函数中的操作，但是槽函数中的操作特别耗时，此时界面处于卡死状态（用户无法进行任何操作，包括拖动界面）。为了解决这一“假死”现象，需要用到<strong>多线程</strong>。</p><!-- more --><h1 id="多线程解决Qt主界面假死的原理"><a href="#多线程解决Qt主界面假死的原理" class="headerlink" title="多线程解决Qt主界面假死的原理"></a>多线程解决Qt主界面假死的原理</h1><p>当前我们编写的程序大多都是单线程执行，并且Qt的可视化界面逻辑代码也与执行耗时操作的代码处在同一个线程中。因此遇到耗时操作时，程序需要等到耗时操作执行完成后再继续执行后续代码，界面中的交互功能也不能使用，呈现出“假死”状态。而采用多线程编程，将耗时操作放在新开辟的线程中可以避免上述问题。下面将详细介绍如何解决Qt主界面假死问题</p><h1 id="构造新的线程类workThread"><a href="#构造新的线程类workThread" class="headerlink" title="构造新的线程类workThread"></a>构造新的线程类workThread</h1><p>Qt线程的创建有两种方式：</p><ul><li>继承QThread的方式，然后重写run，但是这种方式官方已经不推荐了</li><li>继承QObject，构建新的类然后move到新的线程中</li></ul><p>构建新的类中，重点需要关注信号（signals）和槽（slots）的定义与实现</p><ul><li>signals包括：任务开始（workStart）与任务结束（workFinished）</li><li>slots包括：线程开始（start1）与操作执行（doWork）</li></ul><ol><li>在Widget.h文件中定义如下线程类：<figure class="highlight csharp"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></div></td><td class="code"><pre><code class="hljs csharp"><span class="hljs-keyword">class</span> <span class="hljs-title">workThread</span> : <span class="hljs-title">public</span> <span class="hljs-title">QObject</span><br>&#123;<br>Q_OBJECT<br><span class="hljs-keyword">public</span>:<br>workThread(QObject* parent = nullptr);<br>~workThread();<br><span class="hljs-built_in">bool</span> m_bStart;<br><br><span class="hljs-keyword">public</span> slots:<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">start1</span>()</span>;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">doWork</span>()</span>;<br><br>signals:<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">workFinished</span>()</span>;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">workStart</span>()</span>;<br>&#125;;<br></code></pre></td></tr></table></figure></li><li>在Widget.cpp文件中完善workThread类中的方法<figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs reasonml">workThread::work<span class="hljs-constructor">Thread(QObject<span class="hljs-operator">*</span> <span class="hljs-params">parent</span>)</span> : <span class="hljs-constructor">QObject(<span class="hljs-params">parent</span>)</span><br>&#123;<br>this-&gt;m_bStart = <span class="hljs-literal">false</span>;<br>&#125;<br><br>workThread::~work<span class="hljs-constructor">Thread()</span><br>&#123;<br><br>&#125;<br>void workThread::start1<span class="hljs-literal">()</span><br>&#123;<br>emit work<span class="hljs-constructor">Start()</span>;<span class="hljs-comment">//发送信号，表明线程开始工作</span><br><span class="hljs-keyword">do</span><span class="hljs-constructor">Work()</span>;<span class="hljs-comment">//开始执行线程内的操作</span><br>&#125;<br>void workThread::<span class="hljs-keyword">do</span><span class="hljs-constructor">Work()</span><br>&#123;<br><span class="hljs-keyword">for</span> (<span class="hljs-built_in">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">1000000</span>; i++)<br>&#123;<br>q<span class="hljs-constructor">Debug()</span> &lt;&lt; i;<br>&#125;<br>emit work<span class="hljs-constructor">Finished()</span>;<span class="hljs-comment">//发送信号，表明线程结束工作</span><br>&#125;<br></code></pre></td></tr></table></figure></li></ol><h1 id="给Button绑定clicked事件测试"><a href="#给Button绑定clicked事件测试" class="headerlink" title="给Button绑定clicked事件测试"></a>给Button绑定clicked事件测试</h1><ul><li>给Button绑定clicked事件</li><li>在clicked槽函数中创建一个新的线程m_workThread对象</li><li>创建定义好的workThread对象worker，move到新线程中</li><li>完成相应的信号与槽的连接<figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs dts">void QtWidgetsApplication1::on_pushButton_clicked()<br><span class="hljs-punctuation">&#123;</span><br>QThread* m_workT<span class="hljs-attr">hread</span> <span class="hljs-operator">=</span> new QThread()<span class="hljs-punctuation">;</span><br>workThread* <span class="hljs-attr">worker</span> <span class="hljs-operator">=</span> new workThread()<span class="hljs-punctuation">;</span><br>worker-&gt;moveToThread(m_workThread)<span class="hljs-punctuation">;</span><br><br><span class="hljs-comment">//建立信号槽连接</span><br>connect(m_workThread, <span class="hljs-variable">&amp;</span>QThread::started, worker, <span class="hljs-variable">&amp;</span>workThread::start1)<span class="hljs-punctuation">;</span><br>connect(worker, <span class="hljs-variable">&amp;</span>workThread::workFinished, worker, <span class="hljs-variable">&amp;</span>workThread::deleteLater)<span class="hljs-punctuation">;</span><br>connect(worker, <span class="hljs-variable">&amp;</span>workThread::workFinished, m_workThread, <span class="hljs-variable">&amp;</span>QThread::quit)<span class="hljs-punctuation">;</span><br>connect(m_workThread, <span class="hljs-variable">&amp;</span>QThread::finished, m_workThread, <span class="hljs-variable">&amp;</span>QThread::deleteLater)<span class="hljs-punctuation">;</span><br>worker-&gt;m_bS<span class="hljs-attr">tart</span> <span class="hljs-operator">=</span> <span class="hljs-attr">true</span><span class="hljs-punctuation">;</span><br>m_workThread-&gt;start()<span class="hljs-punctuation">;</span><br>worker-&gt;m_bS<span class="hljs-attr">tart</span> <span class="hljs-operator">=</span> <span class="hljs-attr">false</span><span class="hljs-punctuation">;</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure></li></ul><p>程序运行截图如下：<br><img src="https://cdn.jsdelivr.net/gh/MinghuiJia/CDN-source/Qt_Main_Interface_Resolved_By_Feigning_Death/step1.png"><br>此时，程序在执行1000000次循环输出，而可视化界面不会卡死</p><p><em><strong>注意：因为此时界面和耗时程序执行操作在两个线程，如果后续需要传递数据的话，可以将数据通过信号槽的方式传递</strong></em></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>KMP字符串匹配</title>
    <link href="/2022/03/02/KMP%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%8C%B9%E9%85%8D/"/>
    <url>/2022/03/02/KMP%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%8C%B9%E9%85%8D/</url>
    
    <content type="html"><![CDATA[<h1 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h1><p>给你两个字符串<code>haystack</code>和<code>needle</code>，请你在<code>haystack</code>字符串中找出<code>needle</code>字符串出现的第一个位置（下标从 0 开始）。如果不存在，则返回<code>-1</code><br><strong>说明：</strong><br>当<code>needle</code>是空字符串时应当返回0，与C语言中的<code>strstr()</code>以及Java中的<code>indexOf()</code>定义相符</p><ul><li><p>示例1：</p><figure class="highlight nix"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><pre><code class="hljs nix">输入：<span class="hljs-attr">haystack</span> = <span class="hljs-string">&quot;hello&quot;</span>, <span class="hljs-attr">needle</span> = <span class="hljs-string">&quot;ll&quot;</span><br>输出：<span class="hljs-number">2</span><br></code></pre></td></tr></table></figure></li><li><p>示例2：</p><figure class="highlight nix"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs nix">输入：<span class="hljs-attr">haystack</span> = <span class="hljs-string">&quot;aaaaa&quot;</span>, <span class="hljs-attr">needle</span> = <span class="hljs-string">&quot;bba&quot;</span><br>输出：-<span class="hljs-number">1</span><br></code></pre></td></tr></table></figure></li><li><p>示例3：</p><figure class="highlight nix"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs nix">输入：<span class="hljs-attr">haystack</span> = <span class="hljs-string">&quot;&quot;</span>, <span class="hljs-attr">needle</span> = <span class="hljs-string">&quot;&quot;</span><br>输出：<span class="hljs-number">0</span><br></code></pre></td></tr></table></figure></li></ul><h1 id="思路-代码"><a href="#思路-代码" class="headerlink" title="思路+代码"></a>思路+代码</h1><p>本题可以采用暴力解法完成字符串匹配，但是在LeetCode中提交会超时，需要采用KMP算法完成此题</p><h2 id="KMP理论"><a href="#KMP理论" class="headerlink" title="KMP理论"></a>KMP理论</h2><p>Knuth–Morris–Pratt（KMP）算法是一种改进的字符串匹配算法，它的核心是利用匹配失败后的信息，尽量减少模式串与主串的匹配次数以达到快速匹配的目的。它的时间复杂度是<em><strong>O(m + n)</strong></em></p><h2 id="构建next数组"><a href="#构建next数组" class="headerlink" title="构建next数组"></a>构建next数组</h2><p>在完成KMP算法之前，需要构建<em><strong>next数组</strong></em>。<code>next[i]</code>所对应的含义为：<code>P[0, 1, ..., i-1]</code>的最长公共前缀后缀的长度，令<code>p[0] = -1</code><br>例如字符串<code>abcba</code>:</p><ul><li>前缀包括：<code>a, ab, abc, abcb</code></li><li>后缀包括：<code>bcba, cba, ba, a</code></li><li>最长公共前缀后缀：<code>a</code>，长度为<code>1</code><br>图解如下：<table><thead><tr><th align="center"></th><th align="center">A</th><th align="center">C</th><th align="center">T</th><th align="center">G</th><th align="center">P</th><th align="center">A</th><th align="center">C</th><th align="center">Y</th></tr></thead><tbody><tr><td align="center">next</td><td align="center">-1</td><td align="center">0</td><td align="center">0</td><td align="center">0</td><td align="center">0</td><td align="center">0</td><td align="center"><em><strong>1</strong></em></td><td align="center"><em><strong>2</strong></em></td></tr></tbody></table></li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function">vector&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">gextNext</span><span class="hljs-params">(string needle)</span></span><br><span class="hljs-function">   </span>&#123;<br>       <span class="hljs-type">int</span> length = needle.<span class="hljs-built_in">size</span>();<br>       <span class="hljs-function">vector&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">N</span><span class="hljs-params">(length)</span></span>;<br>       N[<span class="hljs-number">0</span>] = <span class="hljs-number">-1</span>;<br>       <span class="hljs-type">int</span> k = <span class="hljs-number">-1</span>;<br>       <span class="hljs-type">int</span> j = <span class="hljs-number">0</span>;<br>       <span class="hljs-keyword">while</span>(j &lt; length - <span class="hljs-number">1</span>)<br>       &#123;<br>           <span class="hljs-keyword">if</span> (k &lt; <span class="hljs-number">0</span> || needle[k] == needle[j])<br>           &#123;<br>               k++;<br>               j++;<br>               N[j] = k;<br>           &#125;<br>           <span class="hljs-keyword">else</span><br>           &#123;<br>               k = N[k];<br>           &#125;<br>       &#125;<br>       <span class="hljs-keyword">return</span> N;<br>   &#125;<br></code></pre></td></tr></table></figure><h2 id="KMP思路"><a href="#KMP思路" class="headerlink" title="KMP思路"></a>KMP思路</h2><ul><li>当主串与子串的数组索引分别停留在<code>i</code>与<code>j</code></li><li>发现此时两个位置的字符不匹配，基于<code>next</code>数组将子串的索引更新到<code>next[j]</code></li><li>此时主串的索引不动，与更新后的子串索引所在位置进行比较</li></ul><figure class="highlight mel"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs mel"><span class="hljs-keyword">int</span> strStr(<span class="hljs-keyword">string</span> haystack, <span class="hljs-keyword">string</span> needle) &#123;<br>    <span class="hljs-keyword">int</span> haystack_length = haystack.<span class="hljs-keyword">size</span>();<br>    <span class="hljs-keyword">int</span> needle_length = needle.<span class="hljs-keyword">size</span>();<br>    <span class="hljs-keyword">if</span> (needle_length == <span class="hljs-number">0</span>)<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br><br>    <span class="hljs-keyword">vector</span>&lt;<span class="hljs-keyword">int</span>&gt; next = gextNext(needle);<br>    <span class="hljs-keyword">int</span> h_index = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">int</span> n_index = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">while</span>((h_index &lt; haystack_length) &amp;&amp; (n_index &lt; needle_length))<br>    &#123;<br>        <span class="hljs-keyword">if</span> (n_index &lt; <span class="hljs-number">0</span> || (haystack[h_index] == needle[n_index]))<br>        &#123;<br>            h_index++;<br>            n_index++;<br>        &#125;<br>        <span class="hljs-keyword">else</span><br>        &#123;<br>            n_index = next[n_index];<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">if</span> (n_index == needle_length)<br>    &#123;<br>        <span class="hljs-keyword">return</span> h_index - n_index;<br>    &#125;<br>    <span class="hljs-keyword">else</span><br>    &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="辅助理解资料"><a href="#辅助理解资料" class="headerlink" title="辅助理解资料"></a>辅助理解资料</h1><h2 id="递推求next数组"><a href="#递推求next数组" class="headerlink" title="递推求next数组"></a>递推求next数组</h2><p>我们很容易的可以知道，<code>next[0] = -1</code>，<code>next[1] = 0</code>也是容易推得的。那么当<code>j &gt; 1</code>时，如果我们已知了<code>next[j]</code>，那么<code>next[j + 1]</code>怎么求得呢？？？<br>下面分两种情况：</p><ul><li>当<code>P[K] = P[j]</code>时，<code>next[j+1] = next[j] + 1 = k + 1</code>，当前模式串中在<code>j + 1</code>所对应字符前有<code>K + 1</code>长度的最大公共前后缀</li><li>当<code>P[K] != P[j]</code>时，说明<code>P[0]P[1]...P[k-1]P[k] != P[j-k]P[j-k+1]...P[j]</code>，也就是当前模式串中在<code>j + 1</code>所对应字符前没有长度为<code>K + 1</code>的最大公共前后缀，只能寻找更短的最大公共前后缀</li><li>因此，在<code>P[0]P[1]...P[k-1]P[k]</code>中不断递归索引<code>k = next[k]</code>，找到一个字符<code>P[K&#39;]</code>，那么最大公共前后缀长度就是<code>K&#39; + 1</code>S</li></ul><h2 id="解释k-x3D-next-k-能找到长度更短的最大公共前后缀"><a href="#解释k-x3D-next-k-能找到长度更短的最大公共前后缀" class="headerlink" title="解释k &#x3D; next[k]能找到长度更短的最大公共前后缀"></a>解释k &#x3D; next[k]能找到长度更短的最大公共前后缀</h2><p><img src="https://cdn.jsdelivr.net/gh/MinghuiJia/CDN-source/KMP_String_Match/KMP1.png"></p><br><br><p>来源：LeetCode、CSDN<br>链接：<a href="https://leetcode-cn.com/leetbook/read/array-and-string/cm5e2/">实现strStr()</a>、<a href="https://blog.csdn.net/yyzsir/article/details/89462339">KMP算法详解</a><br>著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>岛屿数量（并查集）</title>
    <link href="/2022/03/02/%E5%B2%9B%E5%B1%BF%E6%95%B0%E9%87%8F%EF%BC%88%E5%B9%B6%E6%9F%A5%E9%9B%86%EF%BC%89/"/>
    <url>/2022/03/02/%E5%B2%9B%E5%B1%BF%E6%95%B0%E9%87%8F%EF%BC%88%E5%B9%B6%E6%9F%A5%E9%9B%86%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<h1 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h1><p>给你一个由’1’（陆地）和’0’（水）组成的二维网格，请你计算网格钟岛屿的数量。岛屿总是被水包围，并且每座岛屿<strong>只能由水平方向和&#x2F;或竖直方向</strong>上相邻的陆地连接形成。<br>此外，你可以<strong>假设该网格的四条边均被水包围</strong>。</p><ul><li><p>示例1：</p><figure class="highlight prolog"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><pre><code class="hljs prolog">输入: grid = [<br>[<span class="hljs-string">&quot;1&quot;</span>, <span class="hljs-string">&quot;1&quot;</span>, <span class="hljs-string">&quot;1&quot;</span>, <span class="hljs-string">&quot;1&quot;</span>, <span class="hljs-string">&quot;0&quot;</span>],<br>[<span class="hljs-string">&quot;1&quot;</span>, <span class="hljs-string">&quot;1&quot;</span>, <span class="hljs-string">&quot;0&quot;</span>, <span class="hljs-string">&quot;1&quot;</span>, <span class="hljs-string">&quot;0&quot;</span>],<br>[<span class="hljs-string">&quot;1&quot;</span>, <span class="hljs-string">&quot;1&quot;</span>, <span class="hljs-string">&quot;0&quot;</span>, <span class="hljs-string">&quot;0&quot;</span>, <span class="hljs-string">&quot;0&quot;</span>],<br>[<span class="hljs-string">&quot;0&quot;</span>, <span class="hljs-string">&quot;0&quot;</span>, <span class="hljs-string">&quot;0&quot;</span>, <span class="hljs-string">&quot;0&quot;</span>, <span class="hljs-string">&quot;0&quot;</span>]<br>]<br>输出: <span class="hljs-number">1</span><br></code></pre></td></tr></table></figure></li><li><p>示例2：</p><figure class="highlight prolog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs prolog">输入: grid = [<br>[<span class="hljs-string">&quot;1&quot;</span>, <span class="hljs-string">&quot;1&quot;</span>, <span class="hljs-string">&quot;0&quot;</span>, <span class="hljs-string">&quot;0&quot;</span>, <span class="hljs-string">&quot;0&quot;</span>],<br>[<span class="hljs-string">&quot;1&quot;</span>, <span class="hljs-string">&quot;1&quot;</span>, <span class="hljs-string">&quot;0&quot;</span>, <span class="hljs-string">&quot;0&quot;</span>, <span class="hljs-string">&quot;0&quot;</span>],<br>[<span class="hljs-string">&quot;0&quot;</span>, <span class="hljs-string">&quot;0&quot;</span>, <span class="hljs-string">&quot;1&quot;</span>, <span class="hljs-string">&quot;0&quot;</span>, <span class="hljs-string">&quot;0&quot;</span>],<br>[<span class="hljs-string">&quot;0&quot;</span>, <span class="hljs-string">&quot;0&quot;</span>, <span class="hljs-string">&quot;0&quot;</span>, <span class="hljs-string">&quot;1&quot;</span>, <span class="hljs-string">&quot;1&quot;</span>]<br>]<br>输出: <span class="hljs-number">3</span><br></code></pre></td></tr></table></figure></li></ul><h1 id="思路-代码"><a href="#思路-代码" class="headerlink" title="思路+代码"></a>思路+代码</h1><p>本题解可以采用DFS（深度优先搜索）、BFS（广度优先搜索）、并查集的方式完成解题。但是本篇文章重点介绍并查集的方法，并帮助读者理解并查集</p><h2 id="并查集理论"><a href="#并查集理论" class="headerlink" title="并查集理论"></a>并查集理论</h2><p>并查集（union &amp; find）：用于处理一些元素合并和查询问题，主要包含三个方法与三个属性</p><ul><li>find(x)方法：确定x元素属于哪一个子集（寻找x元素的根节点）。实现方法采用<strong>路径压缩方式</strong></li><li>isConnected(p, q)：用于判断两个元素是否属于同一个子集，即两元素是否连通</li><li>union(p, q)：将两个元素所在的子集进行合并（前提是两个元素所在子集不连通）</li><li>count：并查集总数（子集个数）</li><li>parent：数组记录每个节点的父节点索引</li><li>rank：数组记录每个子集树的深度，用在按秩合并记录树的深度，节约树结构搜索时的时间</li></ul><h2 id="并查集类实现（代码）"><a href="#并查集类实现（代码）" class="headerlink" title="并查集类实现（代码）"></a>并查集类实现（代码）</h2><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><code class="hljs gradle"><span class="hljs-keyword">class</span> UnionFind&#123;<br><span class="hljs-keyword">public</span>:<br>UnionFind(vector&lt;vector&lt;<span class="hljs-keyword">char</span>&gt;&gt;&amp; grid)&#123;<br><span class="hljs-keyword">int</span> rows = grid.<span class="hljs-keyword">size</span>();<br><span class="hljs-keyword">int</span> cols = grid[<span class="hljs-number">0</span>].<span class="hljs-keyword">size</span>();<br><span class="hljs-keyword">count</span> = <span class="hljs-number">0</span>;  <span class="hljs-comment">//之前忘记了</span><br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> r = <span class="hljs-number">0</span>; r &lt; rows; r++)<br>&#123;<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> c = <span class="hljs-number">0</span>; c &lt; cols; c++)<br>&#123;<br><span class="hljs-keyword">if</span> (grid[r][c] == <span class="hljs-string">&#x27;1&#x27;</span>)<br>&#123;<br>parent.push_back(r * cols + c);<br><span class="hljs-keyword">count</span>++;    <span class="hljs-comment">//之前忘记了</span><br>&#125;<br><span class="hljs-keyword">else</span><br>parent.push_back(-<span class="hljs-number">1</span>);<br>rank.push_back(<span class="hljs-number">0</span>);<br>&#125;<br>&#125;<br>&#125;<br><br><span class="hljs-keyword">int</span> <span class="hljs-keyword">find</span>(<span class="hljs-keyword">int</span> x)&#123;<br><span class="hljs-keyword">if</span> (parent[x] != x)<br>&#123;<br>parent[x] = <span class="hljs-keyword">find</span>(parent[x]);<br>&#125;<br><br><span class="hljs-keyword">return</span> parent[x];<br>&#125;<br><br><span class="hljs-keyword">void</span> unite(<span class="hljs-keyword">int</span> x, <span class="hljs-keyword">int</span> y)&#123;<br><span class="hljs-keyword">int</span> x_root = <span class="hljs-keyword">find</span>(x);<br><span class="hljs-keyword">int</span> y_root = <span class="hljs-keyword">find</span>(y);<br><span class="hljs-keyword">if</span> (x_root == y_root)<br>&#123;<br><span class="hljs-keyword">return</span>;<br>&#125;<br><span class="hljs-keyword">else</span><br>&#123;<br><span class="hljs-keyword">if</span> (rank[x_root] &lt; rank[y_root])<br>&#123;<br><span class="hljs-keyword">int</span> temp = rank[x_root];<br>rank[x_root] = rank[y_root];<br>rank[y_root] = temp;<br>&#125;<br>parent[y_root] = x_root;<br><span class="hljs-keyword">if</span> (rank[x_root] == rank[y_root])<br>rank[x_root]++;<br><span class="hljs-keyword">count</span>--;    <span class="hljs-comment">//之前忘记了</span><br><span class="hljs-keyword">return</span>;<br>&#125;<br>&#125;<br><br>bool isConnected(<span class="hljs-keyword">int</span> x, <span class="hljs-keyword">int</span> y)&#123;<br><span class="hljs-keyword">if</span> (<span class="hljs-keyword">find</span>(x) == <span class="hljs-keyword">find</span>(y))<br><span class="hljs-keyword">return</span> <span class="hljs-keyword">true</span>;<br><span class="hljs-keyword">else</span><br><span class="hljs-keyword">return</span> <span class="hljs-keyword">false</span>;<br>&#125;<br><br><span class="hljs-keyword">int</span> getCount()&#123;<br><span class="hljs-keyword">return</span> <span class="hljs-keyword">count</span>;<br>&#125;<br><span class="hljs-keyword">private</span>:<br><span class="hljs-keyword">int</span> <span class="hljs-keyword">count</span>;<br>vector&lt;<span class="hljs-keyword">int</span>&gt; parent;<br>vector&lt;<span class="hljs-keyword">int</span>&gt; rank;<br>&#125;;<br></code></pre></td></tr></table></figure><h2 id="基于并查集类完成岛屿数量的题解"><a href="#基于并查集类完成岛屿数量的题解" class="headerlink" title="基于并查集类完成岛屿数量的题解"></a>基于并查集类完成岛屿数量的题解</h2><p>并查集可以代替树结构对邻近“岛屿”（“1”）进行搜索</p><ul><li>思路：扫描整个二维网格，如果该位置为“1”，则将其与相邻四个方向上的“1”在并查集中进行合并，最终岛屿的数量就是并查集（子集或连通分量）的数量<figure class="highlight mel"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs mel">class Solution &#123;<br>public:<br>    <span class="hljs-keyword">int</span> numIslands(<span class="hljs-keyword">vector</span>&lt;<span class="hljs-keyword">vector</span>&lt;char&gt;&gt;&amp; <span class="hljs-keyword">grid</span>) &#123;<br>        <span class="hljs-keyword">int</span> rows = <span class="hljs-keyword">grid</span>.<span class="hljs-keyword">size</span>();<br>        <span class="hljs-keyword">int</span> cols = <span class="hljs-keyword">grid</span>[<span class="hljs-number">0</span>].<span class="hljs-keyword">size</span>();<br>        UnionFind uf(<span class="hljs-keyword">grid</span>);<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> r = <span class="hljs-number">0</span>; r &lt; rows; r++)<br>        &#123;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> c = <span class="hljs-number">0</span>; c &lt; cols; c++)<br>            &#123;<br>                <span class="hljs-keyword">if</span> (<span class="hljs-keyword">grid</span>[r][c] == <span class="hljs-string">&#x27;1&#x27;</span>)<br>                &#123;<br>                    <span class="hljs-keyword">grid</span>[r][c] = <span class="hljs-string">&#x27;0&#x27;</span>;<br>                    <span class="hljs-keyword">if</span> (r<span class="hljs-number">-1</span> &gt;= <span class="hljs-number">0</span> &amp;&amp; <span class="hljs-keyword">grid</span>[r<span class="hljs-number">-1</span>][c] == <span class="hljs-string">&#x27;1&#x27;</span>)<br>                        uf.unite(r * cols + c, (r<span class="hljs-number">-1</span>) * cols + c);<br>                    <span class="hljs-keyword">if</span> (r+<span class="hljs-number">1</span> &lt; rows &amp;&amp; <span class="hljs-keyword">grid</span>[r+<span class="hljs-number">1</span>][c] == <span class="hljs-string">&#x27;1&#x27;</span>)<br>                        uf.unite(r * cols + c, (r+<span class="hljs-number">1</span>) * cols + c);<br>                    <span class="hljs-keyword">if</span> (c<span class="hljs-number">-1</span> &gt;= <span class="hljs-number">0</span> &amp;&amp; <span class="hljs-keyword">grid</span>[r][c<span class="hljs-number">-1</span>] == <span class="hljs-string">&#x27;1&#x27;</span>)<br>                        uf.unite(r * cols + c, r * cols + c - <span class="hljs-number">1</span>);<br>                    <span class="hljs-keyword">if</span> (c+<span class="hljs-number">1</span> &lt; cols &amp;&amp; <span class="hljs-keyword">grid</span>[r][c+<span class="hljs-number">1</span>] == <span class="hljs-string">&#x27;1&#x27;</span>)<br>                        uf.unite(r * cols + c, r * cols + c + <span class="hljs-number">1</span>);<br>                &#125;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> uf.getCount();<br>    &#125;;<br>&#125;;<br></code></pre></td></tr></table></figure></li></ul><h1 id="辅助理解资料"><a href="#辅助理解资料" class="headerlink" title="辅助理解资料"></a>辅助理解资料</h1><h2 id="按秩合并"><a href="#按秩合并" class="headerlink" title="按秩合并"></a>按秩合并</h2><ul><li>按秩合并可以通过减少森林的深度，来节约之后搜索的时间<br>例如有如下两个树型集合：<br><img src="https://cdn.jsdelivr.net/gh/MinghuiJia/CDN-source/Number_Of_Islands(Union_Set)/UnionFind1.png"><br>将A集合合并到D集合，合并后树的<strong>深度是3</strong>，而将D合并到A上，<strong>深度就变为4</strong>。因此在并查集类的合并方法中，只有当两个集合树的深度一样时，将两者合并后深度会+1，其余情况合并后深度为A、B集合深度的较大者，即：max(A,B)<br><img src="https://cdn.jsdelivr.net/gh/MinghuiJia/CDN-source/Number_Of_Islands(Union_Set)/UnionFind2.png"></li></ul><h2 id="路径压缩"><a href="#路径压缩" class="headerlink" title="路径压缩"></a>路径压缩</h2><ul><li>路径压缩是为了防止出现树的不平衡状态，即为单分支树。采用路径压缩，只需要n(1)的时间复杂度即可找到父节点</li><li>当数据过大，递归会导致爆栈，所以需要用非递归算法<figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs powershell">int find(int x)<br>&#123;<br>int k, j, <span class="hljs-built_in">r</span>;<br><span class="hljs-built_in">r</span> = x;<br><span class="hljs-keyword">while</span>(<span class="hljs-built_in">r</span> != parent[<span class="hljs-type">r</span>])<br><span class="hljs-built_in">r</span> = parent[<span class="hljs-type">r</span>];<br>k = x;        <br><span class="hljs-keyword">while</span>(k != <span class="hljs-built_in">r</span>) <br>&#123;<br>j = parent[<span class="hljs-type">k</span>]; <br>parent[<span class="hljs-type">k</span>] = <span class="hljs-built_in">r</span>; <br>k = j; <br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-built_in">r</span>; <br>&#125;<br></code></pre></td></tr></table></figure></li></ul><h2 id="算法步骤流程"><a href="#算法步骤流程" class="headerlink" title="算法步骤流程"></a>算法步骤流程</h2><ul><li>如下示例：<figure class="highlight prolog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs prolog">输入: grid = [<br>[<span class="hljs-string">&quot;1&quot;</span>, <span class="hljs-string">&quot;1&quot;</span>, <span class="hljs-string">&quot;1&quot;</span>],<br>[<span class="hljs-string">&quot;0&quot;</span>, <span class="hljs-string">&quot;1&quot;</span>, <span class="hljs-string">&quot;0&quot;</span>],<br>[<span class="hljs-string">&quot;1&quot;</span>, <span class="hljs-string">&quot;0&quot;</span>, <span class="hljs-string">&quot;0&quot;</span>],<br>[<span class="hljs-string">&quot;1&quot;</span>, <span class="hljs-string">&quot;0&quot;</span>, <span class="hljs-string">&quot;1&quot;</span>]<br>]<br>输出: <span class="hljs-number">3</span><br></code></pre></td></tr></table></figure></li><li>parent和rank数组变化情况表：<table><thead><tr><th align="center"></th><th align="center">0</th><th align="center">1</th><th align="center">2</th><th align="center">3</th><th align="center">4</th><th align="center">5</th><th align="center">6</th><th align="center">7</th><th align="center">8</th><th align="center">9</th><th align="center">10</th><th align="center">11</th><th align="center">count</th></tr></thead><tbody><tr><td align="center">parent1</td><td align="center">0</td><td align="center">1</td><td align="center">2</td><td align="center">-1</td><td align="center">4</td><td align="center">-1</td><td align="center">6</td><td align="center">-1</td><td align="center">-1</td><td align="center">9</td><td align="center">-1</td><td align="center">11</td><td align="center"></td></tr><tr><td align="center">rank1</td><td align="center">0</td><td align="center">0</td><td align="center">0</td><td align="center">0</td><td align="center">0</td><td align="center">0</td><td align="center">0</td><td align="center">0</td><td align="center">0</td><td align="center">0</td><td align="center">0</td><td align="center">0</td><td align="center">7</td></tr><tr><td align="center">parent2</td><td align="center">0</td><td align="center"><strong>0</strong></td><td align="center">2</td><td align="center">-1</td><td align="center">4</td><td align="center">-1</td><td align="center">6</td><td align="center">-1</td><td align="center">-1</td><td align="center">9</td><td align="center">-1</td><td align="center">11</td><td align="center"></td></tr><tr><td align="center">rank2</td><td align="center">1</td><td align="center">0</td><td align="center">0</td><td align="center">0</td><td align="center">0</td><td align="center">0</td><td align="center">0</td><td align="center">0</td><td align="center">0</td><td align="center">0</td><td align="center">0</td><td align="center">0</td><td align="center">6</td></tr><tr><td align="center">parent3</td><td align="center">0</td><td align="center">0</td><td align="center"><strong>0</strong></td><td align="center">-1</td><td align="center">4</td><td align="center">-1</td><td align="center">6</td><td align="center">-1</td><td align="center">-1</td><td align="center">9</td><td align="center">-1</td><td align="center">11</td><td align="center"></td></tr><tr><td align="center">rank3</td><td align="center">1</td><td align="center">0</td><td align="center">0</td><td align="center">0</td><td align="center">0</td><td align="center">0</td><td align="center">0</td><td align="center">0</td><td align="center">0</td><td align="center">0</td><td align="center">0</td><td align="center">0</td><td align="center">5</td></tr><tr><td align="center">parent4</td><td align="center">0</td><td align="center">0</td><td align="center">0</td><td align="center">-1</td><td align="center"><strong>0</strong></td><td align="center">-1</td><td align="center">6</td><td align="center">-1</td><td align="center">-1</td><td align="center">9</td><td align="center">-1</td><td align="center">11</td><td align="center"></td></tr><tr><td align="center">rank4</td><td align="center">1</td><td align="center">0</td><td align="center">0</td><td align="center">0</td><td align="center">0</td><td align="center">0</td><td align="center">0</td><td align="center">0</td><td align="center">0</td><td align="center">0</td><td align="center">0</td><td align="center">0</td><td align="center">4</td></tr><tr><td align="center">parent5</td><td align="center">0</td><td align="center">0</td><td align="center">0</td><td align="center">-1</td><td align="center">0</td><td align="center">-1</td><td align="center">6</td><td align="center">-1</td><td align="center">-1</td><td align="center"><strong>6</strong></td><td align="center">-1</td><td align="center">11</td><td align="center"></td></tr><tr><td align="center">rank5</td><td align="center">1</td><td align="center">0</td><td align="center">0</td><td align="center">0</td><td align="center">0</td><td align="center">0</td><td align="center">1</td><td align="center">0</td><td align="center">0</td><td align="center">0</td><td align="center">0</td><td align="center">0</td><td align="center">3</td></tr></tbody></table></li></ul><br><br><p>来源：LeetCode<br>链接：<a href="https://leetcode-cn.com/problems/number-of-islands/solution/200-dao-yu-shu-liang-bing-cha-ji-by-chen-1az1/">并查集</a>、<a href="https://leetcode-cn.com/problems/number-of-islands/solution/dao-yu-shu-liang-by-leetcode/">岛屿官方题解</a><br>著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Git分支多终端工作</title>
    <link href="/2022/02/26/Git%E5%88%86%E6%94%AF%E5%A4%9A%E7%BB%88%E7%AB%AF%E5%B7%A5%E4%BD%9C/"/>
    <url>/2022/02/26/Git%E5%88%86%E6%94%AF%E5%A4%9A%E7%BB%88%E7%AB%AF%E5%B7%A5%E4%BD%9C/</url>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>由于hexo d将个人博客部署在GitHub仓库前需要进行编译，将Markdown等文件进行编译后生成网页并上传，并不包含源文件。因此，当在某个电脑环境下配置好Hexo+GitHub个人博客并进行了一段时间写作后，需要多终端切换工作，这时就需要在Git上进行上传分支</p><!-- more --><h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>本篇博客实现了简单在新电脑上配置，并从GitHub上把文件Clone下来就可以实现多终端无缝切换</p><h1 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h1><p>采用hexo d对博客内容上传部署到GitHub的过程，实际上是hexo编译后的文件上传，没有源文件。在上传的GitHub仓库可以看到，上传的文件其实是本地目录中.deploy_git文件夹里面的文件，而source、themes、node_modules等文件都没有同步上传到GitHub。利用git的分支管理可以将源文件上传到GitHub</p><h1 id="分支上传"><a href="#分支上传" class="headerlink" title="分支上传"></a>分支上传</h1><h2 id="创建分支"><a href="#创建分支" class="headerlink" title="创建分支"></a>创建分支</h2><ol><li><p>首先需要登录自己的GitHub主页，找到对应的repositories仓库。然后在按照如下图步骤创建一个hexo分支：<br><img src="https://cdn.jsdelivr.net/gh/MinghuiJia/CDN-source/Cpp_Calls_Python_Code/step1.png"></p></li><li><p>然后在仓库的setting中，设置新创建的hexo分支为默认分支，如下图操作：<br><img src="https://cdn.jsdelivr.net/gh/MinghuiJia/CDN-source/Cpp_Calls_Python_Code/step2.png"><br>设置为默认分支的目的是为了方便同步，不用指定分支即可更新源码文件</p></li></ol><h2 id="本地克隆"><a href="#本地克隆" class="headerlink" title="本地克隆"></a>本地克隆</h2><ol><li><p>分支创建并设置好后，在本地任意目录下，通过Git Bash，输入如下指令：</p><figure class="highlight crmsh"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><pre><code class="hljs crmsh">git <span class="hljs-keyword">clone</span> <span class="hljs-title">git</span>@github.com:MinghuiJia/minghuijia.github.io.git<br></code></pre></td></tr></table></figure><p>将GitHub仓库中的文件克隆到本地。此时由于已经设置了默认分支是hexo，所以只克隆hexo分支下的文件</p></li><li><p>然后在本地已经克隆好的文件夹（minghuijia.github.io）中删除<em><strong>.git文件夹</strong></em>以外的所有文件，如下图红色框起来的文件均需要删除<br><img src="https://cdn.jsdelivr.net/gh/MinghuiJia/CDN-source/Cpp_Calls_Python_Code/step3.png"></p></li><li><p>将本地之前写博客的源文件<em><strong>除.deploy_git文件夹</strong></em>外全部拷贝过来。<em><strong>注意：拷贝到clone文件夹（minghuijia.github.io）中的源文件应包含一个.gitignore文件，用于忽略一些不需要的文件，如果没有该文件的话，自己创建一个并粘贴如下文字</strong></em>：</p><figure class="highlight x86asm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs x86asm"><span class="hljs-meta">.DS_Store</span><br>Thumbs<span class="hljs-number">.</span><span class="hljs-built_in">db</span><br><span class="hljs-built_in">db</span><span class="hljs-number">.</span>json<br>*.log<br>node_modules/<br><span class="hljs-meta">public</span>/<br><span class="hljs-meta">.deploy</span>*/<br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/MinghuiJia/CDN-source/Cpp_Calls_Python_Code/step4.png"><br>另外需要注意，<em><strong>如果theme是克隆来的，应该将主题文件夹中的.git文件夹删掉</strong></em>。因为git不能嵌套上传，会导致上传时报错，无法上传主题文件，导致配置在其余终端不能用<br><img src="https://cdn.jsdelivr.net/gh/MinghuiJia/CDN-source/Cpp_Calls_Python_Code/step5.png"></p></li></ol><h2 id="上传分支"><a href="#上传分支" class="headerlink" title="上传分支"></a>上传分支</h2><p>上述操作完成后，Git Bash在当前文件夹下输入如下指令上传源文件：</p><figure class="highlight avrasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs avrasm">git <span class="hljs-keyword">add</span> .<br>git commit -m <span class="hljs-string">&quot;add branch&quot;</span><br>git <span class="hljs-keyword">push</span><br></code></pre></td></tr></table></figure><p>上传结束后可以在GitHub仓库的hexo分支查看，可以发现node_modules、public、db.json被忽略而未上传（这些文件夹会在新电脑配置时自动创建）<br>*<strong>注意:node_modules文件夹中的文件会自动生成，但是图片加载的hexo-asset-image&#x2F;index.js文件也是默认创建，如果不按照本地图片无法显示教程中对js文件修改会导致图片路径错误而无法加载图片</strong></p><h1 id="更换电脑操作"><a href="#更换电脑操作" class="headerlink" title="更换电脑操作"></a>更换电脑操作</h1><h2 id="基本环境配置"><a href="#基本环境配置" class="headerlink" title="基本环境配置"></a>基本环境配置</h2><ol><li>安装Git</li><li><a href="https://www.runoob.com/nodejs/nodejs-install-setup.html">安装Node.js</a><a href="https://www.cnblogs.com/quwaner/p/11541445.html">npm安装教程</a></li><li>设置Git全局邮箱和用户名<figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs stylus">git config <span class="hljs-attr">--global</span> user<span class="hljs-selector-class">.name</span> <span class="hljs-string">&quot;xxx&quot;</span><br>git config <span class="hljs-attr">--global</span> user<span class="hljs-selector-class">.email</span> <span class="hljs-string">&quot;xxx&quot;</span><br></code></pre></td></tr></table></figure></li><li>设置ssh key<figure class="highlight excel"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs excel">ssh-keygen -<span class="hljs-built_in">t</span> rsa -C <span class="hljs-string">&quot;youremail&quot;</span><br></code></pre></td></tr></table></figure>rsa生成后填到GitHubSSH中，并验证是否成功<figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-attribute">ssh</span> -T git<span class="hljs-variable">@github</span>.com<br></code></pre></td></tr></table></figure></li><li>安装hexo，输入如下指令：<figure class="highlight avrasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs avrasm">npm install hexo-<span class="hljs-keyword">cli</span> -g<br></code></pre></td></tr></table></figure></li><li>由于博客框架已经搭建好，当前目的只是更换终端设备，因此不需要初始化</li></ol><h2 id="文件克隆"><a href="#文件克隆" class="headerlink" title="文件克隆"></a>文件克隆</h2><ol><li>在新的终端选择任意文件夹，打开Git Bash，并输入如下指令完成克隆：<figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs crmsh">git <span class="hljs-keyword">clone</span> <span class="hljs-title">git</span>@xxxx<br></code></pre></td></tr></table></figure></li><li>进入到克隆下来的文件夹，并完成如下指令安装：<figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs cmake">cd xxx.github.io<br>npm <span class="hljs-keyword">install</span><span class="hljs-comment">#执行之后会创建node_modules文件夹</span><br>npm <span class="hljs-keyword">install</span> hexo-deployer-git --save<span class="hljs-comment">#执行后会创建.deploy_git文件夹</span><br></code></pre></td></tr></table></figure></li><li>然后使用hexo命令生成和部署：<figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-attribute">hexo</span> g<span class="hljs-comment">#执行之后会创建public文件夹</span><br>hexo d<span class="hljs-comment">#执行后会将新的文件部署到GitHubmaster分支</span><br></code></pre></td></tr></table></figure></li><li>在写文章之前，记得检查node_modules文件夹中hexo-asset-image&#x2F;index.js文件，需要对该文件的代码进行修改（具体参考本地图片加载博客教程），保证图片加载时路径正确</li><li>最后即可进行新的博客撰写<figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs actionscript">hexo <span class="hljs-keyword">new</span> newpage<br></code></pre></td></tr></table></figure></li></ol><h2 id="博客写完后的操作"><a href="#博客写完后的操作" class="headerlink" title="博客写完后的操作"></a>博客写完后的操作</h2><ol><li>每次文章写完后，要把源文件上传到hexo分支<figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">git <span class="hljs-keyword">add</span> .<br>git <span class="hljs-keyword">commit</span> -m &quot;xxx<br>git push<br></code></pre></td></tr></table></figure></li><li>如果终端已经执行过1操作一次，本地电脑上clone文件夹，后续更新源文件即可使用如下指令和远端同步即可：<figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">git pull</span><br></code></pre></td></tr></table></figure></li></ol>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Hexo写文章时引用本地图片无法显示</title>
    <link href="/2022/02/22/Hexo%E5%86%99%E6%96%87%E7%AB%A0%E6%97%B6%E5%BC%95%E7%94%A8%E6%9C%AC%E5%9C%B0%E5%9B%BE%E7%89%87%E6%97%A0%E6%B3%95%E6%98%BE%E7%A4%BA/"/>
    <url>/2022/02/22/Hexo%E5%86%99%E6%96%87%E7%AB%A0%E6%97%B6%E5%BC%95%E7%94%A8%E6%9C%AC%E5%9C%B0%E5%9B%BE%E7%89%87%E6%97%A0%E6%B3%95%E6%98%BE%E7%A4%BA/</url>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>利用搭建好的博客进行文章编写过程中，文章内容需要展示图片，但引用本地图片时总显示不出来。本篇博客主要解决利用Hexo写文章引用本地图片无法显示的问题</p><!-- more --><h1 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h1><p>当用户利用Hexo编写文章引入图片时，常常会出现如下情况：<br><img src="https://cdn.jsdelivr.net/gh/MinghuiJia/CDN-source/Hexo_Write_The_Article_Images_Cannot_Be_Displayed/step1.png"></p><h1 id="插件安装与配置"><a href="#插件安装与配置" class="headerlink" title="插件安装与配置"></a>插件安装与配置</h1><ol><li><p>首先需要安装一个图片路径转换的插件，叫<em><strong>hexo-asset-image</strong></em> 。在Git Bash界面输入命令：</p><figure class="highlight awk"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><pre><code class="hljs awk">npm install https:<span class="hljs-regexp">//gi</span>thub.com<span class="hljs-regexp">/CodeFalling/</span>hexo-asset-image --save<br></code></pre></td></tr></table></figure></li><li><p>然后修改myBlog&#x2F;node_modules&#x2F;hexo-asset-image&#x2F;index.js文件中的代码，将内容更换为下面代码</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-meta">&#x27;use strict&#x27;</span>;<br><span class="hljs-keyword">var</span> cheerio = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;cheerio&#x27;</span>);<br><br><span class="hljs-comment">// http://stackoverflow.com/questions/14480345/how-to-get-the-nth-occurrence-in-a-string</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">getPosition</span>(<span class="hljs-params">str, m, i</span>) &#123;<br>  <span class="hljs-keyword">return</span> str.<span class="hljs-title function_">split</span>(m, i).<span class="hljs-title function_">join</span>(m).<span class="hljs-property">length</span>;<br>&#125;<br><br><span class="hljs-keyword">var</span> version = <span class="hljs-title class_">String</span>(hexo.<span class="hljs-property">version</span>).<span class="hljs-title function_">split</span>(<span class="hljs-string">&#x27;.&#x27;</span>);<br>hexo.<span class="hljs-property">extend</span>.<span class="hljs-property">filter</span>.<span class="hljs-title function_">register</span>(<span class="hljs-string">&#x27;after_post_render&#x27;</span>, <span class="hljs-keyword">function</span>(<span class="hljs-params">data</span>)&#123;<br>  <span class="hljs-keyword">var</span> config = hexo.<span class="hljs-property">config</span>;<br>  <span class="hljs-keyword">if</span>(config.<span class="hljs-property">post_asset_folder</span>)&#123;<br><span class="hljs-keyword">var</span> link = data.<span class="hljs-property">permalink</span>;<br><span class="hljs-keyword">if</span>(version.<span class="hljs-property">length</span> &gt; <span class="hljs-number">0</span> &amp;&amp; <span class="hljs-title class_">Number</span>(version[<span class="hljs-number">0</span>]) == <span class="hljs-number">3</span>)<br>   <span class="hljs-keyword">var</span> beginPos = <span class="hljs-title function_">getPosition</span>(link, <span class="hljs-string">&#x27;/&#x27;</span>, <span class="hljs-number">1</span>) + <span class="hljs-number">1</span>;<br><span class="hljs-keyword">else</span><br>   <span class="hljs-keyword">var</span> beginPos = <span class="hljs-title function_">getPosition</span>(link, <span class="hljs-string">&#x27;/&#x27;</span>, <span class="hljs-number">3</span>) + <span class="hljs-number">1</span>;<br><span class="hljs-comment">// In hexo 3.1.1, the permalink of &quot;about&quot; page is like &quot;.../about/index.html&quot;.</span><br><span class="hljs-keyword">var</span> endPos = link.<span class="hljs-title function_">lastIndexOf</span>(<span class="hljs-string">&#x27;/&#x27;</span>) + <span class="hljs-number">1</span>;<br>link = link.<span class="hljs-title function_">substring</span>(beginPos, endPos);<br><br><span class="hljs-keyword">var</span> toprocess = [<span class="hljs-string">&#x27;excerpt&#x27;</span>, <span class="hljs-string">&#x27;more&#x27;</span>, <span class="hljs-string">&#x27;content&#x27;</span>];<br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>; i &lt; toprocess.<span class="hljs-property">length</span>; i++)&#123;<br>  <span class="hljs-keyword">var</span> key = toprocess[i];<br> <br>  <span class="hljs-keyword">var</span> $ = cheerio.<span class="hljs-title function_">load</span>(data[key], &#123;<br><span class="hljs-attr">ignoreWhitespace</span>: <span class="hljs-literal">false</span>,<br><span class="hljs-attr">xmlMode</span>: <span class="hljs-literal">false</span>,<br><span class="hljs-attr">lowerCaseTags</span>: <span class="hljs-literal">false</span>,<br><span class="hljs-attr">decodeEntities</span>: <span class="hljs-literal">false</span><br>  &#125;);<br><br>  $(<span class="hljs-string">&#x27;img&#x27;</span>).<span class="hljs-title function_">each</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;<br><span class="hljs-keyword">if</span> ($(<span class="hljs-variable language_">this</span>).<span class="hljs-title function_">attr</span>(<span class="hljs-string">&#x27;src&#x27;</span>))&#123;<br><span class="hljs-comment">// For windows style path, we replace &#x27;\&#x27; to &#x27;/&#x27;.</span><br><span class="hljs-keyword">var</span> src = $(<span class="hljs-variable language_">this</span>).<span class="hljs-title function_">attr</span>(<span class="hljs-string">&#x27;src&#x27;</span>).<span class="hljs-title function_">replace</span>(<span class="hljs-string">&#x27;\\&#x27;</span>, <span class="hljs-string">&#x27;/&#x27;</span>);<br><span class="hljs-keyword">if</span>(!<span class="hljs-regexp">/http[s]*.*|\/\/.*/</span>.<span class="hljs-title function_">test</span>(src) &amp;&amp;<br>   !<span class="hljs-regexp">/^\s*\//</span>.<span class="hljs-title function_">test</span>(src)) &#123;<br>  <span class="hljs-comment">// For &quot;about&quot; page, the first part of &quot;src&quot; can&#x27;t be removed.</span><br>  <span class="hljs-comment">// In addition, to support multi-level local directory.</span><br>  <span class="hljs-keyword">var</span> linkArray = link.<span class="hljs-title function_">split</span>(<span class="hljs-string">&#x27;/&#x27;</span>).<span class="hljs-title function_">filter</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params">elem</span>)&#123;<br><span class="hljs-keyword">return</span> elem != <span class="hljs-string">&#x27;&#x27;</span>;<br>  &#125;);<br>  <span class="hljs-keyword">var</span> srcArray = src.<span class="hljs-title function_">split</span>(<span class="hljs-string">&#x27;/&#x27;</span>).<span class="hljs-title function_">filter</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params">elem</span>)&#123;<br><span class="hljs-keyword">return</span> elem != <span class="hljs-string">&#x27;&#x27;</span> &amp;&amp; elem != <span class="hljs-string">&#x27;.&#x27;</span>;<br>  &#125;);<br>  <span class="hljs-keyword">if</span>(srcArray.<span class="hljs-property">length</span> &gt; <span class="hljs-number">1</span>)<br>srcArray.<span class="hljs-title function_">shift</span>();<br>  src = srcArray.<span class="hljs-title function_">join</span>(<span class="hljs-string">&#x27;/&#x27;</span>);<br>  $(<span class="hljs-variable language_">this</span>).<span class="hljs-title function_">attr</span>(<span class="hljs-string">&#x27;src&#x27;</span>, config.<span class="hljs-property">root</span> + link + src);<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-property">info</span>&amp;&amp;<span class="hljs-variable language_">console</span>.<span class="hljs-title function_">info</span>(<span class="hljs-string">&quot;update link as:--&gt;&quot;</span>+config.<span class="hljs-property">root</span> + link + src);<br>&#125;<br>&#125;<span class="hljs-keyword">else</span>&#123;<br><span class="hljs-variable language_">console</span>.<span class="hljs-property">info</span>&amp;&amp;<span class="hljs-variable language_">console</span>.<span class="hljs-title function_">info</span>(<span class="hljs-string">&quot;no src attr, skipped...&quot;</span>);<br><span class="hljs-variable language_">console</span>.<span class="hljs-property">info</span>&amp;&amp;<span class="hljs-variable language_">console</span>.<span class="hljs-title function_">info</span>($(<span class="hljs-variable language_">this</span>));<br>&#125;<br>  &#125;);<br>  data[key] = $.<span class="hljs-title function_">html</span>();<br>&#125;<br>  &#125;<br>&#125;);<br></code></pre></td></tr></table></figure></li><li><p>打开myBlog文件夹下的_config.yml文件，修改下述内容</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">post_asset_folder:</span> <span class="hljs-literal">true</span><br></code></pre></td></tr></table></figure></li></ol><h1 id="问题解决方法"><a href="#问题解决方法" class="headerlink" title="问题解决方法"></a>问题解决方法</h1><ol><li><p>当上述插件安装并完成配置后，我们在Git Bash中输入如下命令</p><figure class="highlight haxe"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs haxe">hexo <span class="hljs-keyword">new</span> <span class="hljs-type">post</span> article1<br>hexo <span class="hljs-keyword">new</span> <span class="hljs-type">draft</span> article2<br></code></pre></td></tr></table></figure><p>在myBlog&#x2F;source&#x2F;_posts 或myBlog&#x2F;source&#x2F;_drafts 文件夹下会创建article.md文件与article同名文件夹<br><img src="https://cdn.jsdelivr.net/gh/MinghuiJia/CDN-source/Hexo_Write_The_Article_Images_Cannot_Be_Displayed/step2.png"></p></li><li><p>将文章需要引用的本地图片，放在同名文章所对应的文件夹下<br><img src="https://cdn.jsdelivr.net/gh/MinghuiJia/CDN-source/Hexo_Write_The_Article_Images_Cannot_Be_Displayed/step3.png"></p></li><li><p>在Markdown（文章）文件中需要引入图片的地方添加如下代码：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs"><br></code></pre></td></tr></table></figure></li><li><p>当上述操作执行完成，并输入如下命令完成博客部署</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">hexo g</span><br><span class="hljs-attribute">hexo d</span><br></code></pre></td></tr></table></figure><p>在GitHub主页可以看到，html页面与图片均在同一个文件夹中，文件夹命名与文章.md同名<br><img src="https://cdn.jsdelivr.net/gh/MinghuiJia/CDN-source/Hexo_Write_The_Article_Images_Cannot_Be_Displayed/step4.png"></p></li><li><p>此时在浏览器浏览文章，可以发现显示图片的源码，在图片加载路径那里找到了与html在同一个文件夹下的图片<br><img src="https://cdn.jsdelivr.net/gh/MinghuiJia/CDN-source/Hexo_Write_The_Article_Images_Cannot_Be_Displayed/step5.png"><br>它会自动寻找，并补全图片的绝对路径，完成图片加载</p></li></ol><h1 id="图片无法加载的可能原因"><a href="#图片无法加载的可能原因" class="headerlink" title="图片无法加载的可能原因"></a>图片无法加载的可能原因</h1><ol><li><p>本地图片没有上传至GitHub仓库，导致引用无效<br>解决方案：安装插件</p></li><li><p>本地图片没有存放在同名文件夹中<br>解决方案：将需要引用的本地图片存放在与文章名相同的文件夹中</p></li><li><p>图片路径出错<br>解决方案：打开myBlog文件夹下的_config.yml修改下述内容</p><blockquote><p># URL<br>## Set your site url here. For example, if you use GitHub Page, set url as ‘<code>https://username.github.io/project</code>‘<br>url: <code>http://minghuijia.cn/</code> 改成域名访问地址</p></blockquote></li><li><p>相对路径引用的标签插件不当<br>把一个 example.jpg 图片放在资源文件夹中，如果通过使用相对路径的常规 markdown 语法 ![](&#x2F;example.jpg) ，它将不会出现在首页上，需要采用 <em><strong>问题解决方法</strong></em> 3点中的方式</p></li></ol>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>从零搭建个人博客</title>
    <link href="/2022/02/22/%E4%BB%8E%E9%9B%B6%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/"/>
    <url>/2022/02/22/%E4%BB%8E%E9%9B%B6%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/</url>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>搭建个人博客的初衷是为了记录与分享自己学习的过程。本篇文章记录了从零搭建属于自己博客网站的操作步骤，希望对看到这篇文章的你有所帮助</p><!-- more --><h1 id="Hexo搭建"><a href="#Hexo搭建" class="headerlink" title="Hexo搭建"></a>Hexo搭建</h1><p>Hexo是一款基于Node.js的静态博客框架，依赖少易于安装使用，可以方便的生成静态网页托管在GitHub和Coding上，是搭建博客的首选框架。大家可以进入<a href="https://hexo.io/zh-cn/">hexo官网</a> 进行详细查看，因为Hexo的创建者是台湾人，对中文的支持很友好，可以选择中文进行查看<br>本篇教程博客包括三个部分：</p><p>1.Hexo的初级搭建+部署到GitHub仓库+域名绑定<br>2.Hexo基本配置（更换主题等）<br>3.Hexo各种功能的添加（阅读量统计、访问量统计等）</p><h2 id="Hexo的初级搭建-部署到GitHub仓库-域名绑定"><a href="#Hexo的初级搭建-部署到GitHub仓库-域名绑定" class="headerlink" title="Hexo的初级搭建+部署到GitHub仓库+域名绑定"></a>Hexo的初级搭建+部署到GitHub仓库+域名绑定</h2><p>在博客搭建之前，需要具备如下前提：<br>1.安装Node.js并完成相应的环境配置<a href="https://www.runoob.com/nodejs/nodejs-install-setup.html">Node.js安装教程</a><br>2.拥有属于自己的GitHub，并安装有Git</p><h3 id="第一步：在GitHub上创建仓库"><a href="#第一步：在GitHub上创建仓库" class="headerlink" title="第一步：在GitHub上创建仓库"></a>第一步：在GitHub上创建仓库</h3><p>登录GitHub账号，进入如下页面：<br><img src="https://cdn.jsdelivr.net/gh/MinghuiJia/CDN-source/Build_A_Personal_Blog_From_Scratch/step1.png"><br>依次按照步骤①：进入Repository仓库；步骤②：创建新的仓库，跳转至仓库设置页面<br><img src="https://cdn.jsdelivr.net/gh/MinghuiJia/CDN-source/Build_A_Personal_Blog_From_Scratch/step2.png"><br>用户需要填写仓库名称，该名称命名方式为：用户名+.github.io，然后点击创建按钮完成操作</p><h3 id="第二步：安装Hexo"><a href="#第二步：安装Hexo" class="headerlink" title="第二步：安装Hexo"></a>第二步：安装Hexo</h3><p>1.首先在电脑磁盘上创建一个用于存放博客文件的文件夹（eg.”E:\myBlog”）;然后进入myBlog文件夹，鼠标右键弹出菜单栏，点击Git Bash Here（已安装Git前提下才有）<br>2.输入npm命令（安装并配置好Node.js）安装Hexo：</p><figure class="highlight avrasm"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><pre><code class="hljs avrasm">npm install -g hexo-<span class="hljs-keyword">cli</span><br></code></pre></td></tr></table></figure><p>3.安装完成后初始化博客，输入命令：</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs csharp">hexo <span class="hljs-keyword">init</span> <br></code></pre></td></tr></table></figure><p>此时在我们创建的博客文件夹中会生成多个文件及文件夹<br>4.完成博客静态部署，输入命令：</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">hexo g</span> <br></code></pre></td></tr></table></figure><p>将部署的文件自动转入public文件夹中<br>5.至此个人博客网页已完成部署，输入命令：</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">hexo s</span> <br></code></pre></td></tr></table></figure><p>启动服务，此时在浏览器输入( <code>http://localhost:4000</code> )就可以显示出Hexo初始页面<br>如果想对Hexo操作指令不清楚的，可以查看<a href="https://blog.csdn.net/dxxzst/article/details/76135935"><em><strong>Hexo常用命令操作及作用</strong></em></a> 帮助你更好地理解</p><h3 id="第三步：生成SSH添加到GitHub"><a href="#第三步：生成SSH添加到GitHub" class="headerlink" title="第三步：生成SSH添加到GitHub"></a>第三步：生成SSH添加到GitHub</h3><p>如果我们不生成SSH并添加到GitHub，会出现博客部署时报错：<code>git@github.com: Permission denied (publickey)</code><br>1.首先在我们创建的博客文件夹（myBlog）中右击Git Bash Here进入命令界面<br>2.验证邮箱、用户名与GitHub注册时输入是否一致，输入命令：</p><figure class="highlight brainfuck"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs brainfuck"><span class="hljs-comment">git</span> <span class="hljs-comment">config</span> --<span class="hljs-comment">global</span> --<span class="hljs-comment">list</span><br></code></pre></td></tr></table></figure><div align="center"><img src="https://cdn.jsdelivr.net/gh/MinghuiJia/CDN-source/Build_A_Personal_Blog_From_Scratch/step5.png" \></div>3.邮箱与用户名跟第一步创建仓库使用的账号不一致时，输入命令：<figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs stylus">git config <span class="hljs-attr">--global</span> user<span class="hljs-selector-class">.name</span> <span class="hljs-string">&quot;yourname&quot;</span><br>git config <span class="hljs-attr">--global</span> user<span class="hljs-selector-class">.email</span> <span class="hljs-string">&quot;youremail&quot;</span><br></code></pre></td></tr></table></figure>设置全局用户名和邮箱，其中邮箱和用户名在GitHub主页按照步骤①②③查看<p><img src="https://cdn.jsdelivr.net/gh/MinghuiJia/CDN-source/Build_A_Personal_Blog_From_Scratch/step6.png"><br>4.生成新密钥，输入命令：</p><figure class="highlight excel"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs excel">ssh-keygen -<span class="hljs-built_in">t</span> rsa -C <span class="hljs-string">&quot;youremail&quot;</span><br></code></pre></td></tr></table></figure><p>接下来命令界面会出现如下提示</p><blockquote><p>$ ssh-keygen -t rsa -C “youremail”<br>Generating public&#x2F;private rsa key pair.<br>Enter file in which to save the key (&#x2F;c&#x2F;Users&#x2F;jmh1998&#x2F;.ssh&#x2F;id_rsa):</p></blockquote><p>表示接下来生成的公钥和私钥均存放在 C:&#x2F;Users&#x2F;jmh1998&#x2F;.ssh&#x2F; 文件夹下，此时用户仅需点回车即可<br>当文件已经存在时，命令行会提示</p><blockquote><p>&#x2F;c&#x2F;Users&#x2F;jmh1998&#x2F;.ssh&#x2F;id_rsa already exists.<br>Overwrite (y&#x2F;n)? y</p></blockquote><p>输入y并回车即可完成文件的覆盖<br>接下来，命令行会提示</p><blockquote><p>Enter passphrase (empty for no passphrase):<br>Enter same passphrase again:</p></blockquote><p>表示用户需要设置密码，此时用户点击两次回车即可<br>最终新的密钥生成成功，命令行提示如下</p><blockquote><p>Your identification has been saved in &#x2F;c&#x2F;Users&#x2F;jmh1998&#x2F;.ssh&#x2F;id_rsa.<br>Your public key has been saved in &#x2F;c&#x2F;Users&#x2F;jmh1998&#x2F;.ssh&#x2F;id_rsa.pub.<br>The key fingerprint is:</p></blockquote><p>5.在 c:&#x2F;Users&#x2F;jmh1998&#x2F;.ssh&#x2F; 文件夹下打开id_rsa.pub（公钥）并复制其中的内容<br><br>6.在GitHub个人主页中找到SSH Keys设置选项<br><img src="https://cdn.jsdelivr.net/gh/MinghuiJia/CDN-source/Build_A_Personal_Blog_From_Scratch/step7.png"><br>然后将自己新生成的id_rsa.pub（公钥）信息添加进去<br><img src="https://cdn.jsdelivr.net/gh/MinghuiJia/CDN-source/Build_A_Personal_Blog_From_Scratch/step8.png"><br>7.最终在Git Bash中可以查看是否成功，输入命令：</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-attribute">ssh</span> -T git<span class="hljs-variable">@github</span>.com<br></code></pre></td></tr></table></figure><p>如果测试通了则会显示</p><blockquote><p>Hi xxx You’ve successfully authenticated….</p></blockquote><p>如果不通则通过下面两个步骤进行操作</p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs arcade">ssh-agent -s<br>ssh-add ~<span class="hljs-regexp">/.ssh/i</span>d_rsa<br></code></pre></td></tr></table></figure><h3 id="第四步：将Hexo部署到GitHub上"><a href="#第四步：将Hexo部署到GitHub上" class="headerlink" title="第四步：将Hexo部署到GitHub上"></a>第四步：将Hexo部署到GitHub上</h3><p>第二步完成后我们当前仅可以在本机访问与操作博客网页，因此我们需要把搭建好的Hexo框架部署到步骤一创建好的仓库上<br>1.首先在我们创建的博客文件夹（myBlog）中找到_config.yml并打开（notepad++等）</p><blockquote><p>_config.yml配置了与博客相关的内容，关于文件内部配置参数详细解释可以参考<a href="https://blog.csdn.net/zemprogram/article/details/104288872">_config.yml配置教程</a></p></blockquote><p>找到文件底部#Deployment配置参数，并设置type、repository与branch如图：<br><img src="https://cdn.jsdelivr.net/gh/MinghuiJia/CDN-source/Build_A_Personal_Blog_From_Scratch/step3.png"><br>其中type为部署的方法，repository为部署的仓库名称(即我们此前创建的仓库clone地址)，branch为分支(默认主支master)<br><em><strong>注意：</strong></em> type、repository、branch这些属性后面冒号要与git等相隔一个空格；respository此处属性应该按照图示设置，旧版本的*http：&#x2F;&#x2F;*形式不正确</p><p>2.回到本机博客文件夹，右击Git Bash Here，安装Git部署插件，输入命令：</p><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ada">npm install hexo-deployer-git <span class="hljs-comment">--save</span><br></code></pre></td></tr></table></figure><p>3.最后依次输入命令：</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs awk">hexo clean<span class="hljs-regexp">//</span>清除缓存文件 db.json 和已生成的静态文件 public<br>hexo g<span class="hljs-regexp">//</span>生成网站静态文件到默认设置的 public 文件夹<br>hexo d<span class="hljs-regexp">//</span>自动生成网站静态文件，并部署到设定的仓库<br></code></pre></td></tr></table></figure><p>部署成功后，在Git Bash中看到如下图表明博客在GitHub仓库部署成功：<br><img src="https://cdn.jsdelivr.net/gh/MinghuiJia/CDN-source/Build_A_Personal_Blog_From_Scratch/step4.png"><br>完成上述步骤后，打开浏览器，输入网址：<code>https://your_user_name.github.io</code> (此处为 minghuijia.github.io) 可以代替 <code>http://localhost:4000</code> 打开博客</p><h3 id="第五步：购买-x2F-解析域名"><a href="#第五步：购买-x2F-解析域名" class="headerlink" title="第五步：购买&#x2F;解析域名"></a>第五步：购买&#x2F;解析域名</h3><p>至此，我们已经可以通过 <code>https://minghuijia.github.io</code> 进行博客访问。但是为了方便记忆，我们可以在阿里云上购买一个域名。具体操作可以下载阿里云APP，并完成注册和实名认证进行购买<br>下面以阿里云为例<br>1.首先进入阿里云控制台首页<br><img src="https://cdn.jsdelivr.net/gh/MinghuiJia/CDN-source/Build_A_Personal_Blog_From_Scratch/step9.png"><br>然后点击“域名”进入域名控制台，对购买的域名进行解析<br><img src="https://cdn.jsdelivr.net/gh/MinghuiJia/CDN-source/Build_A_Personal_Blog_From_Scratch/step10.png"><br>我们需要添加3个解析路线<br>其中两个选择 <em><strong>A</strong></em> 记录类型，解析路线分别填写192.30.252.153 和 192.30.252.154（这是GitHub服务器的IPV4地址），解析路线选择默认<br>另一个选择 <em><strong>CNAME</strong></em> 记录类型，解析路线填写GitHub仓库访问的地址（eg. minghuijia.github.io）<br><img src="https://cdn.jsdelivr.net/gh/MinghuiJia/CDN-source/Build_A_Personal_Blog_From_Scratch/step11.png"><br>至此，在阿里云上的域名解析完成<br>2.接下来我们需要在本机创建存放博客框架的文件夹内（myBlog）打开source文件夹，创建一个名为 CNAME 的文件 <em><strong>切记CNAME文件没有后缀</strong></em><br><img src="https://cdn.jsdelivr.net/gh/MinghuiJia/CDN-source/Build_A_Personal_Blog_From_Scratch/step12.png"><br>3.在文件内写入自己的域名。(不要加www否则每次访问都必须加www，但如果不带有www，以后访问的时候带不带www都可以访问)</p><div align="center"><img src="https://cdn.jsdelivr.net/gh/MinghuiJia/CDN-source/Build_A_Personal_Blog_From_Scratch/step13.png" \></div>4.回到myBlog文件夹下，依次输入<figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">hexo clean</span><br><span class="hljs-attribute">hexo g</span><br><span class="hljs-attribute">hexo d</span><br></code></pre></td></tr></table></figure>打开GitHub，查看CNAME文件是否在项目中。若没有该文件，则点击 Add file，自行添加即可<p>最终，你可以用自己申请的域名进行访问个人博客了！</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>vs2017+Qt创建Qtdll项目并调用</title>
    <link href="/2022/01/22/vs2017-Qt%E5%88%9B%E5%BB%BAQtdll%E9%A1%B9%E7%9B%AE%E5%B9%B6%E8%B0%83%E7%94%A8/"/>
    <url>/2022/01/22/vs2017-Qt%E5%88%9B%E5%BB%BAQtdll%E9%A1%B9%E7%9B%AE%E5%B9%B6%E8%B0%83%E7%94%A8/</url>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>将一些公用的工具函数可以进行封装并生成Dll，方便组内成员直接调用，提高开发效率</p><!-- more --><h1 id="创建Qtdll项目"><a href="#创建Qtdll项目" class="headerlink" title="创建Qtdll项目"></a>创建Qtdll项目</h1><ol><li><p>按照如下图方式在 vs2017 中创建一个Qtdll项目<br><img src="https://cdn.jsdelivr.net/gh/MinghuiJia/CDN-source/Vs2017_Qt_Creates_Qtdll_Project_And_Calls_It/step1.png"><br>项目创建成功后会自动生成两个.h文件和一个.cpp文件如下图。<strong>此外刚创建项目后include部分会报错，需要增加两行代码<code>#include &lt;iostream&gt;</code>;<code>using namespcae std;</code></strong><br><img src="https://cdn.jsdelivr.net/gh/MinghuiJia/CDN-source/Vs2017_Qt_Creates_Qtdll_Project_And_Calls_It/step2.png"></p></li><li><p>在创建的Qtdll项目中编写测试函数（求和函数）</p><figure class="highlight reasonml"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></div></td><td class="code"><pre><code class="hljs reasonml"><span class="hljs-keyword">class</span> QTCLASSLIBRARY1_EXPORT QtClassLibrary1<br>&#123;<br>public:<br><span class="hljs-constructor">QtClassLibrary1()</span>;<br><span class="hljs-built_in">int</span> <span class="hljs-constructor">Add(<span class="hljs-params">int</span> <span class="hljs-params">x</span>, <span class="hljs-params">int</span> <span class="hljs-params">y</span>)</span>;<br>&#125;;<br><br><span class="hljs-built_in">int</span> QtClassLibrary1::<span class="hljs-constructor">Add(<span class="hljs-params">int</span> <span class="hljs-params">x</span>, <span class="hljs-params">int</span> <span class="hljs-params">y</span>)</span><br>&#123;<br>return x + y;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>在vs里面的解决方案资源管理器栏内右键点击<code>解决方案</code>，选择<code>生成解决方案</code>，成功后会看到如下界面<br><img src="https://cdn.jsdelivr.net/gh/MinghuiJia/CDN-source/Vs2017_Qt_Creates_Qtdll_Project_And_Calls_It/step3.png"><br>同时在Qtdll项目<code>x64\Debug</code>路径下可以看到生成的文件（.dll与.Lib）<br><img src="https://cdn.jsdelivr.net/gh/MinghuiJia/CDN-source/Vs2017_Qt_Creates_Qtdll_Project_And_Calls_It/step4.png"></p></li></ol><h1 id="创建调用Qtdll的项目"><a href="#创建调用Qtdll的项目" class="headerlink" title="创建调用Qtdll的项目"></a>创建调用Qtdll的项目</h1><ol><li><p>为了方便期间，创建一个QtConsoleApplication项目对生成的Qtdll进行调用<br><img src="https://cdn.jsdelivr.net/gh/MinghuiJia/CDN-source/Vs2017_Qt_Creates_Qtdll_Project_And_Calls_It/step5.png"></p></li><li><p>将Qtdll项目的中的两个.h文件（<code>QtClassLibrary1.h</code>,<code>qtclasslibrary1_global.h</code>）以及.lib文件（<code>QtClassLibrary1.lib</code>）移动到QtConsoleApplication项目的如下图位置<br><img src="https://cdn.jsdelivr.net/gh/MinghuiJia/CDN-source/Vs2017_Qt_Creates_Qtdll_Project_And_Calls_It/step6.png"></p></li><li><p>将Qtdll项目的中的.dll文件（<code>QtClassLibrary1.dll</code>）移动到QtConsoleApplication项目的如下图位置<br><img src="https://cdn.jsdelivr.net/gh/MinghuiJia/CDN-source/Vs2017_Qt_Creates_Qtdll_Project_And_Calls_It/step7.png"></p></li><li><p>在QtConsoleApplication项目中添加头文件（<code>QtClassLibrary1.h</code>,<code>qtclasslibrary1_global.h</code>）与lib文件（<code>QtClassLibrary1.lib</code>），并调用Dll</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;QtCore/QCoreApplication&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;QtClassLibrary1.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;qtclasslibrary1_global.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;qdebug.h&quot;</span></span><br><br><span class="hljs-meta">#<span class="hljs-keyword">pragma</span> comment(lib,<span class="hljs-string">&quot;QtClassLibrary1.lib&quot;</span>)</span><br><span class="hljs-meta">#<span class="hljs-keyword">pragma</span> execution_character_set(<span class="hljs-string">&quot;utf-8&quot;</span>)</span><br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">(<span class="hljs-type">int</span> argc, <span class="hljs-type">char</span> *argv[])</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-function">QCoreApplication <span class="hljs-title">a</span><span class="hljs-params">(argc, argv)</span></span>;<br>QtClassLibrary1 dll;<br><span class="hljs-built_in">qDebug</span>() &lt;&lt; <span class="hljs-string">&quot;加法&quot;</span> &lt;&lt; dll.<span class="hljs-built_in">Add</span>(<span class="hljs-number">56</span>, <span class="hljs-number">45</span>);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/MinghuiJia/CDN-source/Vs2017_Qt_Creates_Qtdll_Project_And_Calls_It/step8.png"></p></li></ol><h1 id="补充知识"><a href="#补充知识" class="headerlink" title="补充知识"></a>补充知识</h1><ol><li>导入dll库<figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs arduino"><span class="hljs-meta">#<span class="hljs-keyword">pragma</span> comment(lib,<span class="hljs-string">&quot;QtClassLibrary1.lib&quot;</span>)</span><br></code></pre></td></tr></table></figure></li></ol><ul><li><strong>这是告诉编译器在编译形成的.obj文件和.exe文件中加一条信息，使得链接器在链接库的时候要去找QtClassLibrary1.lib这个库，而不是先去找别的库</strong></li><li><strong>#pragma comment(lib, libname)告诉链接器将<code>libname</code>库添加到库依赖关系列表中，与添加到项目属性中的操作一样 Linker-&gt;Input-&gt;Additional dependencies</strong></li></ul><ol start="2"><li>解决源代码中有中文字符无法识别问题<figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs arduino"><span class="hljs-meta">#<span class="hljs-keyword">pragma</span> execution_character_set(<span class="hljs-string">&quot;utf-8&quot;</span>)</span><br></code></pre></td></tr></table></figure></li></ol><ul><li><strong>编译器将源代码中的窄字符和窄字符串文本编码为可执行文件中UTF-8，缺少这行代码就无法识别中文</strong></li></ul>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>GDAL分块读写影像</title>
    <link href="/2022/01/20/GDAL%E5%88%86%E5%9D%97%E8%AF%BB%E5%86%99%E5%BD%B1%E5%83%8F/"/>
    <url>/2022/01/20/GDAL%E5%88%86%E5%9D%97%E8%AF%BB%E5%86%99%E5%BD%B1%E5%83%8F/</url>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>在使用GDAL读取GeoTiff影像时针对特大的影像，有时为了减少内存消耗，对图像进行分块读取很有必要</p><!-- more --><h1 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h1><figure class="highlight zephir"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></div></td><td class="code"><pre><code class="hljs zephir"><span class="hljs-comment">// gdal分块并行处理tif影像</span><br>void GDALBlockReadWrite(<span class="hljs-keyword">string</span> openFilePath, <span class="hljs-keyword">string</span> saveFilePath, <span class="hljs-keyword">int</span> nBlockSize)<br>&#123;<br><span class="hljs-comment">//打开影像</span><br>GDALDataset *poSrcDS = (GDALDataset*)GDALOpen(openFilePath.c_str(), GA_ReadOnly);<br><span class="hljs-keyword">if</span> (poSrcDS == NULL)<span class="hljs-comment">//影像打开失败</span><br><span class="hljs-keyword">return</span> ;<br><br><span class="hljs-comment">//获取图像的高宽,夜光影像只有一个波段</span><br><span class="hljs-keyword">int</span> nXSize = poSrcDS-&gt;GetRasterXSize();<span class="hljs-comment">//列</span><br><span class="hljs-keyword">int</span> nYSize = poSrcDS-&gt;GetRasterYSize();<span class="hljs-comment">//行</span><br><span class="hljs-keyword">int</span> nBands = poSrcDS-&gt;GetRasterCount();<br><br><span class="hljs-comment">//获取输入影像仿射变换参数</span><br><span class="hljs-keyword">double</span> adfGeotransform[<span class="hljs-number">6</span>] = &#123; <span class="hljs-number">0</span> &#125;;<br>poSrcDS-&gt;GetGeoTransform(adfGeotransform);<br><br><span class="hljs-comment">//获取输入影像空间参考</span><br><span class="hljs-keyword">const</span> <span class="hljs-keyword">char</span>* pszProj = poSrcDS-&gt;GetProjectionRef();<br><br><span class="hljs-comment">//获取波段测试</span><br>GDALRasterBand *poBand = poSrcDS-&gt;GetRasterBand(<span class="hljs-number">1</span>);<br><span class="hljs-keyword">if</span> (poBand == NULL)<br>&#123;<br>GDALClose((GDALDatasetH)poSrcDS);<br><span class="hljs-keyword">return</span> ;<br>&#125;<br><span class="hljs-keyword">int</span> dataType = poBand-&gt;GetRasterDataType();<span class="hljs-comment">//获取波段1数据的类型</span><br><br><span class="hljs-comment">//创建tif驱动和数据集</span><br><span class="hljs-keyword">string</span> format = <span class="hljs-string">&quot;GTiff&quot;</span>;<br>GDALDriver *saveDriver = GetGDALDriverManager()-&gt;GetDriverByName(format.c_str());<br>GDALDataset *saveDataset = saveDriver-&gt;Create(saveFilePath.c_str(), nXSize, nYSize, nBands, GDT_Float32, NULL);<br>saveDataset-&gt;SetGeoTransform(adfGeotransform);<br>saveDataset-&gt;SetProjection(pszProj);<br><br><span class="hljs-comment">//分配分块读取数据缓存</span><br><span class="hljs-keyword">float</span> *pafScan = <span class="hljs-keyword">new</span> <span class="hljs-keyword">float</span>[nBlockSize*nBlockSize*nBands];<br><br><span class="hljs-comment">//定义读取影像波段顺序</span><br><span class="hljs-keyword">int</span> *pBandMaps = <span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[nBands];<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; nBands; i++)<br>pBandMaps[i] = i + <span class="hljs-number">1</span>;<br><br><span class="hljs-comment">//循环分块处理</span><br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> r = <span class="hljs-number">0</span>; r &lt; nYSize; r += nBlockSize)<br>&#123;<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> c = <span class="hljs-number">0</span>; c &lt; nXSize; c += nBlockSize)<br>&#123;<br><span class="hljs-comment">//两个变量记录分块大小</span><br><span class="hljs-keyword">int</span> nXBlock = nBlockSize;<br><span class="hljs-keyword">int</span> nYBlock = nBlockSize;<br><br><span class="hljs-comment">//处理最后尺寸不足nBlockSize</span><br><span class="hljs-keyword">if</span> (r + nBlockSize &gt; nYSize)<br>nYBlock = nYSize - r;<br><span class="hljs-keyword">if</span> (c + nBlockSize &gt; nXSize)<br>nXBlock = nXSize - c;<br><br><span class="hljs-comment">//读取原始影像块</span><br>poSrcDS-&gt;RasterIO(GF_Read, c, r, nXBlock, nYBlock, pafScan, nXBlock, nYBlock, GDT_Float32, nBands, pBandMaps, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, NULL);<br><br><span class="hljs-comment">//分块读取的内容写入影像</span><br>saveDataset-&gt;RasterIO(GF_Write, c, r, nXBlock, nYBlock, pafScan, nXBlock, nYBlock, GDT_Float32, nBands, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>);<br>GDALFlushCache(saveDataset);<br>&#125;<br>&#125;<br><br>delete[]pBandMaps;<br>delete[]pafScan;<br>GDALClose((GDALDatasetH)poSrcDS);<br><span class="hljs-comment">//delete[]poSrcDS;</span><br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
