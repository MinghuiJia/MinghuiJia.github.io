<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>字符串解码</title>
    <link href="/2022/03/16/%E5%AD%97%E7%AC%A6%E4%B8%B2%E8%A7%A3%E7%A0%81/"/>
    <url>/2022/03/16/%E5%AD%97%E7%AC%A6%E4%B8%B2%E8%A7%A3%E7%A0%81/</url>
    
    <content type="html"><![CDATA[<h1 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h1><p>给定一个经过编码的字符串，返回它解码后的字符串。<br>编码规则为: <code>k[encoded_string]</code>，表示其中方括号内部的 <code>encoded_string</code> 正好重复 <code>k</code> 次。注意 <code>k</code> 保证为正整数。你可以认为输入字符串总是有效的；输入字符串中没有额外的空格，且输入的方括号总是符合格式要求的。此外，你可以认为原始数据不包含数字，所有的数字只表示重复的次数 <code>k</code> ，例如不会出现像 <code>3a</code> 或 <code>2[4]</code> 的输入。</p><ul><li><p>示例1：</p><figure class="highlight abnf"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><pre><code class="hljs abnf">输入：s <span class="hljs-operator">=</span> <span class="hljs-string">&quot;3[a]2[bc]&quot;</span><br>输出：<span class="hljs-string">&quot;aaabcbc&quot;</span><br></code></pre></td></tr></table></figure></li><li><p>示例2：</p><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs abnf">输入：s <span class="hljs-operator">=</span> <span class="hljs-string">&quot;3[a2[c]]&quot;</span><br>输出：<span class="hljs-string">&quot;accaccacc&quot;</span><br></code></pre></td></tr></table></figure></li><li><p>示例3：</p><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs abnf">输入：s <span class="hljs-operator">=</span> <span class="hljs-string">&quot;2[abc]3[cd]ef&quot;</span><br>输出：<span class="hljs-string">&quot;abcabccdcdcdef&quot;</span><br></code></pre></td></tr></table></figure></li><li><p>示例4：</p><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs abnf">输入：s <span class="hljs-operator">=</span> <span class="hljs-string">&quot;abc3[cd]xyz&quot;</span><br>输出：<span class="hljs-string">&quot;abccdcdcdxyz&quot;</span><br></code></pre></td></tr></table></figure></li></ul><p><strong>提示：</strong></p><ul><li>1 &lt;&#x3D; s.length &lt;&#x3D; 30</li><li>s 由小写英文字母、数字和方括号 ‘[]’ 组成</li><li>s 保证是一个 有效 的输入。</li><li>s 中所有整数的取值范围为 [1, 300]</li></ul><p> </p><h1 id="思路-代码"><a href="#思路-代码" class="headerlink" title="思路+代码"></a>思路+代码</h1><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>本题可以采用栈操作解法、递归方法分别完成字符串解码</p><ol><li>栈操作：<br>本题中可能出现括号嵌套的情况，比如 <code>2[a2[bc]]</code>，这种情况下我们可以先转化成 <code>2[abcbc]</code>，在转化成 <code>abcbcabcbc</code>。我们可以把字母、数字和括号看成是独立的 <code>TOKEN</code>，并用栈来维护这些 <code>TOKEN</code>。具体的做法是，遍历这个栈：</li></ol><ul><li>如果当前的字符为数位，解析出一个数字（连续的多个数位）并进栈</li><li>如果当前的字符为字母或者左括号，直接进栈</li><li>如果当前的字符为右括号，开始出栈，一直到左括号出栈，出栈序列反转后拼接成一个字符串，此时取出栈顶的数字（此时栈顶一定是数字），就是这个字符串应该出现的次数，我们根据这个次数和字符串构造出新的字符串并进栈</li></ul><p>重复如上操作，最终将栈中的元素按照从栈底到栈顶的顺序拼接起来，就得到了答案。</p><ol start="2"><li>递归从左向右解析字符串：</li></ol><ul><li>如果当前位置为数字位，那么后面一定包含一个用方括号表示的字符串，即属于这种情况：<code>k[...]</code>：<ul><li>我们可以先解析出一个数字，然后解析到了左括号，递归向下解析后面的内容，遇到对应的右括号就返回，此时我们可以根据解析出的数字 <code>xx</code> 解析出的括号里的字符串 <code>x*s</code> </li><li>我们把 <code>k[...]</code> 解析结束后，再次调用递归函数，解析右括号右边的内容。</li></ul></li><li>如果当前位置是字母位，那么我们直接解析当前这个字母，然后递归向下解析这个字母后面的内容。</li></ul><h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><ul><li><p>栈操作1：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br><span class="hljs-function">string <span class="hljs-title">getDigits</span><span class="hljs-params">(string &amp;s, <span class="hljs-type">size_t</span> &amp;ptr)</span> </span>&#123;<br>string ret = <span class="hljs-string">&quot;&quot;</span>;<br><span class="hljs-keyword">while</span> (<span class="hljs-built_in">isdigit</span>(s[ptr])) &#123;<br>ret.<span class="hljs-built_in">push_back</span>(s[ptr++]);<br>&#125;<br><span class="hljs-keyword">return</span> ret;<br>&#125;<br><br><span class="hljs-function">string <span class="hljs-title">getString</span><span class="hljs-params">(vector &lt;string&gt; &amp;v)</span> </span>&#123;<br>string ret;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">const</span> <span class="hljs-keyword">auto</span> &amp;s: v) &#123;<br>ret += s;<br>&#125;<br><span class="hljs-keyword">return</span> ret;<br>&#125;<br><br><span class="hljs-function">string <span class="hljs-title">decodeString</span><span class="hljs-params">(string s)</span> </span>&#123;<br>vector &lt;string&gt; stk;<br><span class="hljs-type">size_t</span> ptr = <span class="hljs-number">0</span>;<br><br><span class="hljs-keyword">while</span> (ptr &lt; s.<span class="hljs-built_in">size</span>()) &#123;<br><span class="hljs-type">char</span> cur = s[ptr];<br><span class="hljs-keyword">if</span> (<span class="hljs-built_in">isdigit</span>(cur)) &#123;<br><span class="hljs-comment">// 获取一个数字并进栈</span><br>string digits = <span class="hljs-built_in">getDigits</span>(s, ptr);<br>stk.<span class="hljs-built_in">push_back</span>(digits);<br>&#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (<span class="hljs-built_in">isalpha</span>(cur) || cur == <span class="hljs-string">&#x27;[&#x27;</span>) &#123;<br><span class="hljs-comment">// 获取一个字母并进栈</span><br>stk.<span class="hljs-built_in">push_back</span>(<span class="hljs-built_in">string</span>(<span class="hljs-number">1</span>, s[ptr++])); <br>&#125; <span class="hljs-keyword">else</span> &#123;<br>++ptr;<br>vector &lt;string&gt; sub;<br><span class="hljs-keyword">while</span> (stk.<span class="hljs-built_in">back</span>() != <span class="hljs-string">&quot;[&quot;</span>) &#123;<br>sub.<span class="hljs-built_in">push_back</span>(stk.<span class="hljs-built_in">back</span>());<br>stk.<span class="hljs-built_in">pop_back</span>();<br>&#125;<br><span class="hljs-built_in">reverse</span>(sub.<span class="hljs-built_in">begin</span>(), sub.<span class="hljs-built_in">end</span>());<br><span class="hljs-comment">// 左括号出栈</span><br>stk.<span class="hljs-built_in">pop_back</span>();<br><span class="hljs-comment">// 此时栈顶为当前 sub 对应的字符串应该出现的次数</span><br><span class="hljs-type">int</span> repTime = <span class="hljs-built_in">stoi</span>(stk.<span class="hljs-built_in">back</span>()); <br>stk.<span class="hljs-built_in">pop_back</span>();<br>string t, o = <span class="hljs-built_in">getString</span>(sub);<br><span class="hljs-comment">// 构造字符串</span><br><span class="hljs-keyword">while</span> (repTime--) t += o; <br><span class="hljs-comment">// 将构造好的字符串入栈</span><br>stk.<span class="hljs-built_in">push_back</span>(t);<br>&#125;<br>&#125;<br><br><span class="hljs-keyword">return</span> <span class="hljs-built_in">getString</span>(stk);<br>&#125;<br>&#125;;<br></code></pre></td></tr></table></figure></li><li><p>栈操作2：</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><code class="hljs csharp"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br><span class="hljs-function"><span class="hljs-built_in">string</span> <span class="hljs-title">decodeString</span>(<span class="hljs-params"><span class="hljs-built_in">string</span> s</span>)</span> &#123;<br><span class="hljs-built_in">int</span> length = s.length();<br><span class="hljs-built_in">string</span> num = <span class="hljs-string">&quot;&quot;</span>;<br><span class="hljs-built_in">string</span> words = <span class="hljs-string">&quot;&quot;</span>;<br>stack&lt;<span class="hljs-built_in">int</span>&gt; s_num;<br>stack&lt;<span class="hljs-built_in">string</span>&gt; s_c;<br><br><span class="hljs-keyword">for</span> (<span class="hljs-built_in">int</span> i = <span class="hljs-number">0</span>; i &lt; length; i++)<br>&#123;<br><span class="hljs-keyword">if</span> (s[i] &gt;= <span class="hljs-string">&#x27;0&#x27;</span> &amp;&amp; s[i] &lt;= <span class="hljs-string">&#x27;9&#x27;</span>)<br>&#123;<br>num += s[i];<br>&#125;<br><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (s[i] &gt;= <span class="hljs-string">&#x27;a&#x27;</span> &amp;&amp; s[i] &lt;= <span class="hljs-string">&#x27;z&#x27;</span>)<br>&#123;<br>words += s[i];<br>&#125;<br><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (s[i] == <span class="hljs-string">&#x27;[&#x27;</span>)<br>&#123;<br><br>s_num.push(atoi(num.c_str()));<br>num = <span class="hljs-string">&quot;&quot;</span>;<br>s_c.push(words);<br>words = <span class="hljs-string">&quot;&quot;</span>;<br>&#125;<br><span class="hljs-keyword">else</span><br>&#123;<br><span class="hljs-built_in">int</span> temp_num = s_num.top();<br>s_num.pop();<br><span class="hljs-built_in">string</span> temp_str = <span class="hljs-string">&quot;&quot;</span>;<br><br><span class="hljs-keyword">for</span> (<span class="hljs-built_in">int</span> k = <span class="hljs-number">0</span>; k &lt; temp_num; k++)<br>&#123;<br>temp_str += words;<br>&#125;<br>words = s_c.top() + temp_str;<br>s_c.pop();<br><br>&#125;<br>&#125;<br><span class="hljs-keyword">return</span> words;<br>&#125;<br>&#125;;<br></code></pre></td></tr></table></figure></li><li><p>递归操作：</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><code class="hljs csharp"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br><span class="hljs-built_in">string</span> src; <br>size_t ptr;<br><br><span class="hljs-function"><span class="hljs-built_in">int</span> <span class="hljs-title">getDigits</span>()</span> &#123;<br><span class="hljs-built_in">int</span> ret = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">while</span> (ptr &lt; src.size() &amp;&amp; isdigit(src[ptr])) &#123;<br>ret = ret * <span class="hljs-number">10</span> + src[ptr++] - <span class="hljs-string">&#x27;0&#x27;</span>;<br>&#125;<br><span class="hljs-keyword">return</span> ret;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-built_in">string</span> <span class="hljs-title">getString</span>()</span> &#123;<br><span class="hljs-keyword">if</span> (ptr == src.size() || src[ptr] == <span class="hljs-string">&#x27;]&#x27;</span>) &#123;<br><span class="hljs-comment">// String -&gt; EPS</span><br><span class="hljs-keyword">return</span> <span class="hljs-string">&quot;&quot;</span>;<br>&#125;<br><br><span class="hljs-built_in">char</span> cur = src[ptr]; <span class="hljs-built_in">int</span> repTime = <span class="hljs-number">1</span>;<br><span class="hljs-built_in">string</span> ret;<br><br><span class="hljs-keyword">if</span> (isdigit(cur)) &#123;<br><span class="hljs-comment">// String -&gt; Digits [ String ] String</span><br><span class="hljs-comment">// 解析 Digits</span><br>repTime = getDigits(); <br><span class="hljs-comment">// 过滤左括号</span><br>++ptr;<br><span class="hljs-comment">// 解析 String</span><br><span class="hljs-built_in">string</span> str = getString(); <br><span class="hljs-comment">// 过滤右括号</span><br>++ptr;<br><span class="hljs-comment">// 构造字符串</span><br><span class="hljs-keyword">while</span> (repTime--) ret += str; <br>&#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (isalpha(cur)) &#123;<br><span class="hljs-comment">// String -&gt; Char String</span><br><span class="hljs-comment">// 解析 Char</span><br>ret = <span class="hljs-built_in">string</span>(<span class="hljs-number">1</span>, src[ptr++]);<br>&#125;<br><br><span class="hljs-keyword">return</span> ret + getString();<br>&#125;<br><br><span class="hljs-function"><span class="hljs-built_in">string</span> <span class="hljs-title">decodeString</span>(<span class="hljs-params"><span class="hljs-built_in">string</span> s</span>)</span> &#123;<br>src = s;<br>ptr = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">return</span> getString();<br>&#125;<br>&#125;;<br></code></pre></td></tr></table></figure></li></ul><p>作者：力扣 (LeetCode)<br>链接：<a href="https://leetcode-cn.com/leetbook/read/queue-stack/gdwjv/">https://leetcode-cn.com/leetbook/read/queue-stack/gdwjv/</a><br>来源：力扣（LeetCode）<br>著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。</p>]]></content>
    
    
    <categories>
      
      <category>算法</category>
      
    </categories>
    
    
    <tags>
      
      <tag>栈操作</tag>
      
      <tag>递归</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hexo-fluid主题设置统计博客阅读量与评论</title>
    <link href="/2022/03/14/Hexo-fluid%E4%B8%BB%E9%A2%98%E8%AE%BE%E7%BD%AE%E7%BB%9F%E8%AE%A1%E5%8D%9A%E5%AE%A2%E9%98%85%E8%AF%BB%E9%87%8F/"/>
    <url>/2022/03/14/Hexo-fluid%E4%B8%BB%E9%A2%98%E8%AE%BE%E7%BD%AE%E7%BB%9F%E8%AE%A1%E5%8D%9A%E5%AE%A2%E9%98%85%E8%AF%BB%E9%87%8F/</url>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>本篇博客基于LeanCloud统计博客页面访问次数与访问人数、及文章阅读次数，以及实现文章与友情链接评论功能</p><span id="more"></span><h1 id="配置-LeanCloud"><a href="#配置-LeanCloud" class="headerlink" title="配置 LeanCloud"></a>配置 LeanCloud</h1><ol><li>进入LeanCloud官网:<a href="https://www.leancloud.cn/">https://www.leancloud.cn/</a> ，注册账号并完成实名认证和邮箱验证</li><li>在LeanCloud主页面按照如下3步骤，进行应用的创建（用户名随意起）<img src="/2022/03/14/Hexo-fluid%E4%B8%BB%E9%A2%98%E8%AE%BE%E7%BD%AE%E7%BB%9F%E8%AE%A1%E5%8D%9A%E5%AE%A2%E9%98%85%E8%AF%BB%E9%87%8F/step1.png" class></li><li>创建Class，按照如下步骤，在<code>数据存储</code>-&gt;<code>结构化存储</code>创建Class<img src="/2022/03/14/Hexo-fluid%E4%B8%BB%E9%A2%98%E8%AE%BE%E7%BD%AE%E7%BB%9F%E8%AE%A1%E5%8D%9A%E5%AE%A2%E9%98%85%E8%AF%BB%E9%87%8F/step2.png" class></li></ol><p><strong>注意：</strong></p><ul><li>此处创建的 Class 名字必须为Counter，用来保证与NexT主题的修改相兼容，fluid没有限制要求</li><li>ACL权限选择无限制，避免后续因为权限的问题导致次数统计显示不正常</li></ul><ol start="4"><li>在创建的应用设置中寻找AppID与AppKey<div align="center"><img src="/2022/03/14/Hexo-fluid%E4%B8%BB%E9%A2%98%E8%AE%BE%E7%BD%AE%E7%BB%9F%E8%AE%A1%E5%8D%9A%E5%AE%A2%E9%98%85%E8%AF%BB%E9%87%8F/step3.png" class></div><div align="center"><img src="/2022/03/14/Hexo-fluid%E4%B8%BB%E9%A2%98%E8%AE%BE%E7%BD%AE%E7%BB%9F%E8%AE%A1%E5%8D%9A%E5%AE%A2%E9%98%85%E8%AF%BB%E9%87%8F/step4.png" class></div></li></ol><h1 id="修改主题配置文件"><a href="#修改主题配置文件" class="headerlink" title="修改主题配置文件"></a>修改主题配置文件</h1><ol><li>打开fluid的主题配置文件<code>_config.yml</code>，把配置 LeanCloud时的AppID与AppKey复制到如下位置，并设置<code>ignore_local</code>为<code>true</code>，保证在本地启动服务的时候不会记录访问次数<figure class="highlight yaml"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></div></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-comment"># LeanCloud 计数统计，可用于 PV UV 展示，如果 `web_analytics: enable` 没有开启，PV UV 展示只会查询不会增加</span><br><span class="hljs-comment"># LeanCloud count statistics, which can be used for PV UV display. If `web_analytics: enable` is false, PV UV display will only query and not increase</span><br><span class="hljs-attr">leancloud:</span><br><span class="hljs-attr">app_id:</span> <span class="hljs-string">xxx</span><br><span class="hljs-attr">app_key:</span> <span class="hljs-string">xxx</span><br>    <span class="hljs-comment"># REST API 服务器地址，国际版不填</span><br>    <span class="hljs-comment"># Only the Chinese mainland users need to set</span><br><span class="hljs-attr">server_url:</span> <br>    <span class="hljs-comment"># 统计页面时获取路径的属性</span><br>    <span class="hljs-comment"># Get the attribute of the page path during statistics</span><br><span class="hljs-attr">path:</span> <span class="hljs-string">window.location.pathname</span><br>    <span class="hljs-comment"># 开启后不统计本地路径( localhost 与 127.0.0.1 )</span><br>    <span class="hljs-comment"># If ture, ignore localhost &amp; 127.0.0.1</span><br><span class="hljs-attr">ignore_local:</span> <span class="hljs-literal">true</span><br></code></pre></td></tr></table></figure></li><li>在fluid主题配置文件页脚部分的<code>enable</code>与<code>source</code>进行如下设置，这样可以在博客页面最下面看到访问人数与访问次数<figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-comment"># 展示网站的 PV、UV 统计数</span><br><span class="hljs-comment"># Display website PV and UV statistics</span><br><span class="hljs-attr">statistics:</span><br>   <span class="hljs-attr">enable:</span> <span class="hljs-literal">true</span><br><br>   <span class="hljs-comment"># 统计数据来源，使用 leancloud 需要设置 `web_analytics: leancloud` 中的参数；使用 busuanzi 不需要额外设置，但是有时不稳定，另外本地运行时 busuanzi 显示统计数据很大属于正常现象，部署后会正常</span><br>   <span class="hljs-comment"># Data source. If use leancloud, you need to set the parameter in `web_analytics: leancloud`</span><br>   <span class="hljs-comment"># Options: busuanzi | leancloud</span><br>   <span class="hljs-attr">source:</span> <span class="hljs-string">&quot;leancloud&quot;</span><br><br>   <span class="hljs-comment"># 页面显示的文本，&#123;&#125;是数字的占位符（必须包含)，下同</span><br>   <span class="hljs-comment"># Displayed text, &#123;&#125; is a placeholder for numbers (must be included), the same below</span><br>   <span class="hljs-attr">pv_format:</span> <span class="hljs-string">&quot;总访问量 &#123;&#125; 次&quot;</span><br>   <span class="hljs-attr">uv_format:</span> <span class="hljs-string">&quot;总访客数 &#123;&#125; 人&quot;</span><br></code></pre></td></tr></table></figure></li><li>在fluid主题配置文件中搜索<code>views</code>，将<code>enable</code>与<code>source</code>两处进行设置，可以实现对每篇博客的访问次数进行统计<figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs dts"><span class="hljs-meta"># 浏览量计数</span><br><span class="hljs-meta"># Number of visits</span><br><span class="hljs-symbol">views:</span><br><span class="hljs-symbol">  enable:</span> true<br>  <span class="hljs-meta"># 统计数据来源</span><br>  <span class="hljs-meta"># Data Source</span><br>  <span class="hljs-meta"># Options: busuanzi | leancloud</span><br><span class="hljs-symbol">  source:</span> <span class="hljs-string">&quot;leancloud&quot;</span><br><span class="hljs-symbol">  format:</span> <span class="hljs-string">&quot;&#123;&#125; 次&quot;</span><br></code></pre></td></tr></table></figure></li></ol><p><strong>最后使用<code>hexo g</code>、<code>hexo d</code>命令重新部署博客，就可以正常使用文章阅读量统计的功能了</strong></p><h1 id="后台管理"><a href="#后台管理" class="headerlink" title="后台管理"></a>后台管理</h1><p>当以上部分配置完成之后，我们的博客页面打开时，便会自动向服务器发送信息，在我们刚才创建的应用test的Counter表中创建数据</p><img src="/2022/03/14/Hexo-fluid%E4%B8%BB%E9%A2%98%E8%AE%BE%E7%BD%AE%E7%BB%9F%E8%AE%A1%E5%8D%9A%E5%AE%A2%E9%98%85%E8%AF%BB%E9%87%8F/step8.png" class><p><em><strong>需要特别说明的是：</strong></em><br>记录文章访问量的唯一标识符是文章的发布日期和文章的标题，因此要确保这两个数值组合的唯一性，如果你更改了这两个数值，会造成文章阅读数值的清零重计。其中time字段的数值表示某一篇文章的访问量，其他字段的具体作用可以查阅LeanCloud官方文档，最好不要随意修改</p><h1 id="评论设置"><a href="#评论设置" class="headerlink" title="评论设置"></a>评论设置</h1><ol><li><p>当用户配置好LeanCloud后，可以在主题配置文件<code>_config.yml</code>文件中找到评论插件部分，设置<code>Valine</code>部分的<code>appId</code>与<code>appKey</code>即可。<br>更多参数设置可以访问<a href="https://valine.js.org/configuration.html">https://valine.js.org/configuration.html</a></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-comment">#---------------------------</span><br><span class="hljs-comment"># 评论插件</span><br><span class="hljs-comment"># Comment plugins</span><br><span class="hljs-comment">#</span><br><span class="hljs-comment"># 开启评论需要先设置上方 `post: comments: enable: true`，然后根据 `type` 设置下方对应的评论插件参数</span><br><span class="hljs-comment"># Enable comments need to be set `post: comments: enable: true`, then set the corresponding comment plugin parameters below according to `type`</span><br><span class="hljs-comment">#---------------------------</span><br><span class="hljs-comment"># Valine</span><br><span class="hljs-comment"># 基于 LeanCloud</span><br><span class="hljs-comment"># Based on LeanCloud</span><br><span class="hljs-comment"># See: https://valine.js.org/</span><br><span class="hljs-attr">valine:</span><br>  <span class="hljs-attr">appId:</span> <span class="hljs-string">xxx</span><br>  <span class="hljs-attr">appKey:</span> <span class="hljs-string">xxx</span><br>  <span class="hljs-attr">path:</span> <span class="hljs-string">window.location.pathname</span><br>  <span class="hljs-attr">placeholder:</span> <span class="hljs-string">欢迎评论</span><br>  <span class="hljs-attr">avatar:</span> <span class="hljs-string">&#x27;retro&#x27;</span><br>  <span class="hljs-attr">meta:</span> [<span class="hljs-string">&#x27;nick&#x27;</span>, <span class="hljs-string">&#x27;mail&#x27;</span>, <span class="hljs-string">&#x27;link&#x27;</span>]<br>  <span class="hljs-attr">requiredFields:</span> []<br>  <span class="hljs-attr">pageSize:</span> <span class="hljs-number">10</span><br>  <span class="hljs-attr">lang:</span> <span class="hljs-string">&#x27;zh-CN&#x27;</span><br>  <span class="hljs-attr">highlight:</span> <span class="hljs-literal">false</span><br>  <span class="hljs-attr">recordIP:</span> <span class="hljs-literal">false</span><br>  <span class="hljs-attr">serverURLs:</span> <span class="hljs-string">&#x27;&#x27;</span><br>  <span class="hljs-attr">emojiCDN:</span><br>  <span class="hljs-attr">emojiMaps:</span><br>  <span class="hljs-attr">enableQQ:</span> <span class="hljs-literal">false</span><br></code></pre></td></tr></table></figure></li><li><p>在fluid主题中可以搜索<code>comments</code>关键词，分别对友情链接与文章页进行评论设置，分别设置<code>enable</code>为<code>true</code>，<code>type</code>为<code>valine</code></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-comment">#---------------------------</span><br><span class="hljs-comment"># 文章页</span><br><span class="hljs-comment"># Post Page</span><br><span class="hljs-comment">#---------------------------</span><br><span class="hljs-comment"># 评论插件</span><br>  <span class="hljs-comment"># Comment plugin</span><br>  <span class="hljs-attr">comments:</span><br>    <span class="hljs-attr">enable:</span> <span class="hljs-literal">true</span><br>    <span class="hljs-comment"># 指定的插件，需要同时设置对应插件的必要参数</span><br>    <span class="hljs-comment"># The specified plugin needs to set the necessary parameters at the same time</span><br>    <span class="hljs-comment"># Options: utterances | disqus | gitalk | valine | waline | changyan | livere | remark42 | twikoo | cusdis</span><br>    <span class="hljs-attr">type:</span> <span class="hljs-string">valine</span><br><br><span class="hljs-comment">#---------------------------</span><br><span class="hljs-comment"># 友链页</span><br><span class="hljs-comment"># Links Page</span><br><span class="hljs-comment">#---------------------------</span><br><span class="hljs-comment"># 评论插件</span><br>  <span class="hljs-comment"># Comment plugin</span><br>  <span class="hljs-attr">comments:</span><br>    <span class="hljs-attr">enable:</span> <span class="hljs-literal">true</span><br>    <span class="hljs-comment"># 指定的插件，需要同时设置对应插件的必要参数</span><br>    <span class="hljs-comment"># The specified plugin needs to set the necessary parameters at the same time</span><br>    <span class="hljs-comment"># Options: utterances | disqus | gitalk | valine | waline | changyan | livere | remark42 | twikoo | cusdis</span><br>    <span class="hljs-attr">type:</span> <span class="hljs-string">valine</span><br></code></pre></td></tr></table></figure></li><li><p>此时访问友情链接页与任意博客文章时，在页面底部均可以看到评论区域。如果希望某篇博客关闭评论，可以通过在 <code>Front-matter</code> 设置 <code>comment: bool</code> 来控制评论开关，或者通过 <code>comment: &#39;type&#39;</code> 来开启指定的评论插件</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-meta">---</span><br><span class="hljs-attr">title:</span> <span class="hljs-string">Hexo-fluid主题设置统计博客阅读量</span><br><span class="hljs-attr">date:</span> <span class="hljs-number">2022-03-14 21:05:19</span><br><span class="hljs-attr">comment:</span> <span class="hljs-literal">false</span><br><span class="hljs-attr">tags:</span><br> <span class="hljs-bullet">-</span> <span class="hljs-string">hexo</span><br> <span class="hljs-bullet">-</span> <span class="hljs-string">博客阅读量</span><br><span class="hljs-attr">categories:</span><br> <span class="hljs-bullet">-</span> <span class="hljs-string">hexo</span><br><br><span class="hljs-meta">---</span><br></code></pre></td></tr></table></figure></li></ol>]]></content>
    
    
    <categories>
      
      <category>hexo</category>
      
    </categories>
    
    
    <tags>
      
      <tag>hexo</tag>
      
      <tag>博客阅读量</tag>
      
      <tag>评论设置</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Qt子线程更新主线程进度条</title>
    <link href="/2022/03/13/Qt%E5%AD%90%E7%BA%BF%E7%A8%8B%E6%9B%B4%E6%96%B0%E4%B8%BB%E7%BA%BF%E7%A8%8B%E8%BF%9B%E5%BA%A6%E6%9D%A1/"/>
    <url>/2022/03/13/Qt%E5%AD%90%E7%BA%BF%E7%A8%8B%E6%9B%B4%E6%96%B0%E4%B8%BB%E7%BA%BF%E7%A8%8B%E8%BF%9B%E5%BA%A6%E6%9D%A1/</url>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>在Qt多线程编程过程中，常常会遇到不同线程之间数据传递的需求。此博客则是通过一个简单的例子——子线程任务处理过程中更新主线程进度条，来介绍线程间数据传递的解决方法</p><span id="more"></span><h1 id="任务需求"><a href="#任务需求" class="headerlink" title="任务需求"></a>任务需求</h1><p>由于程序存在耗时的操作，因此将此耗时的操作放在一个新的线程中从而避免界面“假死”。但是在耗时操作执行过程中，为了给用户友好的交互体验，需要利用进度条（ProgressBar）给用户展示程序实时处理的进度，这就涉及到在子线程中耗时操作的处理进度变量如何传递到界面主线程中</p><h1 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h1><h2 id="定义信号函数"><a href="#定义信号函数" class="headerlink" title="定义信号函数"></a>定义信号函数</h2><p>在子线程对应的类中定义信号函数，用于传递子线程任务进度变量</p><figure class="highlight csharp"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></div></td><td class="code"><pre><code class="hljs csharp"><span class="hljs-keyword">class</span> <span class="hljs-title">workThread</span> : <span class="hljs-title">public</span> <span class="hljs-title">QObject</span><br>&#123;<br>Q_OBJECT<br><span class="hljs-keyword">public</span>:<br>workThread(QObject* parent = nullptr);<br>~workThread();<br><span class="hljs-built_in">bool</span> m_bStart;<br><br><span class="hljs-keyword">public</span> slots:<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">start1</span>()</span>;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">doWork</span>()</span>;<br><br>signals:<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">workFinished</span>()</span>;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">workStart</span>()</span>;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">updateProgress</span>(<span class="hljs-params"><span class="hljs-keyword">const</span> <span class="hljs-built_in">int</span> nNum</span>)</span>;<span class="hljs-comment">//子线程信号函数（传递数据）</span><br>&#125;;<br></code></pre></td></tr></table></figure><h2 id="定义相应的槽函数"><a href="#定义相应的槽函数" class="headerlink" title="定义相应的槽函数"></a>定义相应的槽函数</h2><p>在主线程类中定义更新进度条的槽函数，其中更新所需的变量信息通过上一步子线程的信号函数进行传递</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">class</span> <span class="hljs-title class_">QtWidgetsApplication1</span> : <span class="hljs-keyword">public</span> QWidget<br>&#123;<br>Q_OBJECT<br><br><span class="hljs-keyword">public</span>:<br><span class="hljs-built_in">QtWidgetsApplication1</span>(QWidget *parent = Q_NULLPTR);<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">updateProgress</span><span class="hljs-params">(<span class="hljs-type">int</span> nNum)</span></span>;<span class="hljs-comment">//主线程槽函数（根据信号传递来的数据更新进度条）</span><br><br><span class="hljs-keyword">private</span> slots:<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">on_pushButton_clicked</span><span class="hljs-params">()</span></span>;<br><br><span class="hljs-keyword">private</span>:<br>Ui::QtWidgetsApplication1Class ui;<br>&#125;;<br></code></pre></td></tr></table></figure><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs reasonml">void QtWidgetsApplication1::update<span class="hljs-constructor">Progress(<span class="hljs-params">int</span> <span class="hljs-params">nNum</span>)</span><br>&#123;<br>ui.progressBar-&gt;set<span class="hljs-constructor">Value(<span class="hljs-params">nNum</span>)</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="建立信号与槽的联系"><a href="#建立信号与槽的联系" class="headerlink" title="建立信号与槽的联系"></a>建立信号与槽的联系</h2><p>在主线程中建立信号与槽的联系</p><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs dts">void QtWidgetsApplication1::on_pushButton_clicked()<br><span class="hljs-punctuation">&#123;</span><br>QThread* m_workT<span class="hljs-attr">hread</span> <span class="hljs-operator">=</span> new QThread()<span class="hljs-punctuation">;</span><br>workThread* <span class="hljs-attr">worker</span> <span class="hljs-operator">=</span> new workThread()<span class="hljs-punctuation">;</span><br>worker-&gt;moveToThread(m_workThread)<span class="hljs-punctuation">;</span><br><br><span class="hljs-comment">//建立信号槽连接</span><br>connect(worker, <span class="hljs-variable">&amp;</span>workThread::updateProgress, this, <span class="hljs-variable">&amp;</span>QtWidgetsApplication1::updateProgress)<span class="hljs-punctuation">;</span> <span class="hljs-comment">//建立子线程对象与主线程对象之间的信号与槽的连接</span><br>connect(m_workThread, <span class="hljs-variable">&amp;</span>QThread::started, worker, <span class="hljs-variable">&amp;</span>workThread::start1)<span class="hljs-punctuation">;</span><br>connect(worker, <span class="hljs-variable">&amp;</span>workThread::workFinished, worker, <span class="hljs-variable">&amp;</span>workThread::deleteLater)<span class="hljs-punctuation">;</span><br>connect(worker, <span class="hljs-variable">&amp;</span>workThread::workFinished, m_workThread, <span class="hljs-variable">&amp;</span>QThread::quit)<span class="hljs-punctuation">;</span><br>connect(m_workThread, <span class="hljs-variable">&amp;</span>QThread::finished, m_workThread, <span class="hljs-variable">&amp;</span>QThread::deleteLater)<span class="hljs-punctuation">;</span><br>worker-&gt;m_bS<span class="hljs-attr">tart</span> <span class="hljs-operator">=</span> <span class="hljs-attr">true</span><span class="hljs-punctuation">;</span><br>m_workThread-&gt;start()<span class="hljs-punctuation">;</span><br>worker-&gt;m_bS<span class="hljs-attr">tart</span> <span class="hljs-operator">=</span> <span class="hljs-attr">false</span><span class="hljs-punctuation">;</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><h2 id="发送信号"><a href="#发送信号" class="headerlink" title="发送信号"></a>发送信号</h2><p>在子线程处理耗时（循环）任务时，不断发送信号，将数据传递给主线程用于更新进度条</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs scss">void workThread::doWork()<br>&#123;<br>for (int i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">1000000</span>; i++)<br>&#123;<br><span class="hljs-built_in">qDebug</span>() &lt;&lt; <span class="hljs-selector-tag">i</span>;<br>emit <span class="hljs-built_in">updateProgress</span>(i + <span class="hljs-number">1</span>);<span class="hljs-comment">//发送信号（传递数据）</span><br>&#125;<br>emit <span class="hljs-built_in">workFinished</span>();<span class="hljs-comment">//发送信号，表明线程结束工作</span><br>&#125;<br></code></pre></td></tr></table></figure><h2 id="初始化进度条的属性"><a href="#初始化进度条的属性" class="headerlink" title="初始化进度条的属性"></a>初始化进度条的属性</h2><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs reasonml">QtWidgetsApplication1::<span class="hljs-constructor">QtWidgetsApplication1(QWidget <span class="hljs-operator">*</span><span class="hljs-params">parent</span>)</span><br>    : <span class="hljs-constructor">QWidget(<span class="hljs-params">parent</span>)</span><br>&#123;<br>    ui.setup<span class="hljs-constructor">Ui(<span class="hljs-params">this</span>)</span>;<br>ui.progressBar-&gt;set<span class="hljs-constructor">Range(0, 100)</span>;<span class="hljs-comment">//设置进度条显示的范围</span><br>ui.progressBar-&gt;set<span class="hljs-constructor">Minimum(0)</span>;<span class="hljs-comment">//设置程序任务的最小数量，对应range的最小值</span><br>ui.progressBar-&gt;set<span class="hljs-constructor">Maximum(1000000)</span>;<span class="hljs-comment">//设置程序任务的最大数量，对应range的最大值</span><br>&#125;<br></code></pre></td></tr></table></figure><h2 id="结果展示"><a href="#结果展示" class="headerlink" title="结果展示"></a>结果展示</h2><p>程序运行截图如下：</p><img src="/2022/03/13/Qt%E5%AD%90%E7%BA%BF%E7%A8%8B%E6%9B%B4%E6%96%B0%E4%B8%BB%E7%BA%BF%E7%A8%8B%E8%BF%9B%E5%BA%A6%E6%9D%A1/step1.png" class><p>此时，程序在执行1000000次循环输出，可以实时更新处理进度</p><h1 id="辅助知识"><a href="#辅助知识" class="headerlink" title="辅助知识"></a>辅助知识</h1><p>connect函数的五个参数表示的意义依次为：<code>sender＊</code>，<code>signal</code>，<code>receiver＊</code>，<code>slot</code>，<code>connectionTpye</code></p><p>其中槽可以是receiver的成员函数，或者是任意可访问的静态函数。</p>]]></content>
    
    
    <categories>
      
      <category>Qt</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Qt多线程数据传递</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Qt主界面假死解决</title>
    <link href="/2022/03/13/Qt%E4%B8%BB%E7%95%8C%E9%9D%A2%E5%81%87%E6%AD%BB%E8%A7%A3%E5%86%B3/"/>
    <url>/2022/03/13/Qt%E4%B8%BB%E7%95%8C%E9%9D%A2%E5%81%87%E6%AD%BB%E8%A7%A3%E5%86%B3/</url>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>在利用Qt进行可视化编程时，某个过于耗时的操作会造成界面卡死现象。例如用户点击界面的Button控件，程序会执行clicked槽函数中的操作，但是槽函数中的操作特别耗时，此时界面处于卡死状态（用户无法进行任何操作，包括拖动界面）。为了解决这一“假死”现象，需要用到<strong>多线程</strong>。</p><span id="more"></span><h1 id="多线程解决Qt主界面假死的原理"><a href="#多线程解决Qt主界面假死的原理" class="headerlink" title="多线程解决Qt主界面假死的原理"></a>多线程解决Qt主界面假死的原理</h1><p>当前我们编写的程序大多都是单线程执行，并且Qt的可视化界面逻辑代码也与执行耗时操作的代码处在同一个线程中。因此遇到耗时操作时，程序需要等到耗时操作执行完成后再继续执行后续代码，界面中的交互功能也不能使用，呈现出“假死”状态。而采用多线程编程，将耗时操作放在新开辟的线程中可以避免上述问题。下面将详细介绍如何解决Qt主界面假死问题</p><h1 id="构造新的线程类workThread"><a href="#构造新的线程类workThread" class="headerlink" title="构造新的线程类workThread"></a>构造新的线程类workThread</h1><p>Qt线程的创建有两种方式：</p><ul><li>继承QThread的方式，然后重写run，但是这种方式官方已经不推荐了</li><li>继承QObject，构建新的类然后move到新的线程中</li></ul><p>构建新的类中，重点需要关注信号（signals）和槽（slots）的定义与实现</p><ul><li>signals包括：任务开始（workStart）与任务结束（workFinished）</li><li>slots包括：线程开始（start1）与操作执行（doWork）</li></ul><ol><li>在Widget.h文件中定义如下线程类：<figure class="highlight csharp"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></div></td><td class="code"><pre><code class="hljs csharp"><span class="hljs-keyword">class</span> <span class="hljs-title">workThread</span> : <span class="hljs-title">public</span> <span class="hljs-title">QObject</span><br>&#123;<br>Q_OBJECT<br><span class="hljs-keyword">public</span>:<br>workThread(QObject* parent = nullptr);<br>~workThread();<br><span class="hljs-built_in">bool</span> m_bStart;<br><br><span class="hljs-keyword">public</span> slots:<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">start1</span>()</span>;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">doWork</span>()</span>;<br><br>signals:<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">workFinished</span>()</span>;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">workStart</span>()</span>;<br>&#125;;<br></code></pre></td></tr></table></figure></li><li>在Widget.cpp文件中完善workThread类中的方法<figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs reasonml">workThread::work<span class="hljs-constructor">Thread(QObject<span class="hljs-operator">*</span> <span class="hljs-params">parent</span>)</span> : <span class="hljs-constructor">QObject(<span class="hljs-params">parent</span>)</span><br>&#123;<br>this-&gt;m_bStart = <span class="hljs-literal">false</span>;<br>&#125;<br><br>workThread::~work<span class="hljs-constructor">Thread()</span><br>&#123;<br><br>&#125;<br>void workThread::start1<span class="hljs-literal">()</span><br>&#123;<br>emit work<span class="hljs-constructor">Start()</span>;<span class="hljs-comment">//发送信号，表明线程开始工作</span><br><span class="hljs-keyword">do</span><span class="hljs-constructor">Work()</span>;<span class="hljs-comment">//开始执行线程内的操作</span><br>&#125;<br>void workThread::<span class="hljs-keyword">do</span><span class="hljs-constructor">Work()</span><br>&#123;<br><span class="hljs-keyword">for</span> (<span class="hljs-built_in">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">1000000</span>; i++)<br>&#123;<br>q<span class="hljs-constructor">Debug()</span> &lt;&lt; i;<br>&#125;<br>emit work<span class="hljs-constructor">Finished()</span>;<span class="hljs-comment">//发送信号，表明线程结束工作</span><br>&#125;<br></code></pre></td></tr></table></figure></li></ol><h1 id="给Button绑定clicked事件测试"><a href="#给Button绑定clicked事件测试" class="headerlink" title="给Button绑定clicked事件测试"></a>给Button绑定clicked事件测试</h1><ul><li>给Button绑定clicked事件</li><li>在clicked槽函数中创建一个新的线程m_workThread对象</li><li>创建定义好的workThread对象worker，move到新线程中</li><li>完成相应的信号与槽的连接<figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs dts">void QtWidgetsApplication1::on_pushButton_clicked()<br><span class="hljs-punctuation">&#123;</span><br>QThread* m_workT<span class="hljs-attr">hread</span> <span class="hljs-operator">=</span> new QThread()<span class="hljs-punctuation">;</span><br>workThread* <span class="hljs-attr">worker</span> <span class="hljs-operator">=</span> new workThread()<span class="hljs-punctuation">;</span><br>worker-&gt;moveToThread(m_workThread)<span class="hljs-punctuation">;</span><br><br><span class="hljs-comment">//建立信号槽连接</span><br>connect(m_workThread, <span class="hljs-variable">&amp;</span>QThread::started, worker, <span class="hljs-variable">&amp;</span>workThread::start1)<span class="hljs-punctuation">;</span><br>connect(worker, <span class="hljs-variable">&amp;</span>workThread::workFinished, worker, <span class="hljs-variable">&amp;</span>workThread::deleteLater)<span class="hljs-punctuation">;</span><br>connect(worker, <span class="hljs-variable">&amp;</span>workThread::workFinished, m_workThread, <span class="hljs-variable">&amp;</span>QThread::quit)<span class="hljs-punctuation">;</span><br>connect(m_workThread, <span class="hljs-variable">&amp;</span>QThread::finished, m_workThread, <span class="hljs-variable">&amp;</span>QThread::deleteLater)<span class="hljs-punctuation">;</span><br>worker-&gt;m_bS<span class="hljs-attr">tart</span> <span class="hljs-operator">=</span> <span class="hljs-attr">true</span><span class="hljs-punctuation">;</span><br>m_workThread-&gt;start()<span class="hljs-punctuation">;</span><br>worker-&gt;m_bS<span class="hljs-attr">tart</span> <span class="hljs-operator">=</span> <span class="hljs-attr">false</span><span class="hljs-punctuation">;</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure></li></ul><p>程序运行截图如下：</p><img src="/2022/03/13/Qt%E4%B8%BB%E7%95%8C%E9%9D%A2%E5%81%87%E6%AD%BB%E8%A7%A3%E5%86%B3/step1.png" class><p>此时，程序在执行1000000次循环输出，而可视化界面不会卡死</p><p><em><strong>注意：因为此时界面和耗时程序执行操作在两个线程，如果后续需要传递数据的话，可以将数据通过信号槽的方式传递</strong></em></p>]]></content>
    
    
    <categories>
      
      <category>Qt</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Qt可视化编程</tag>
      
      <tag>界面假死</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>KMP字符串匹配</title>
    <link href="/2022/03/02/KMP%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%8C%B9%E9%85%8D/"/>
    <url>/2022/03/02/KMP%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%8C%B9%E9%85%8D/</url>
    
    <content type="html"><![CDATA[<h1 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h1><p>给你两个字符串<code>haystack</code>和<code>needle</code>，请你在<code>haystack</code>字符串中找出<code>needle</code>字符串出现的第一个位置（下标从 0 开始）。如果不存在，则返回<code>-1</code><br><strong>说明：</strong><br>当<code>needle</code>是空字符串时应当返回0，与C语言中的<code>strstr()</code>以及Java中的<code>indexOf()</code>定义相符</p><ul><li><p>示例1：</p><figure class="highlight nix"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><pre><code class="hljs nix">输入：<span class="hljs-attr">haystack</span> = <span class="hljs-string">&quot;hello&quot;</span>, <span class="hljs-attr">needle</span> = <span class="hljs-string">&quot;ll&quot;</span><br>输出：<span class="hljs-number">2</span><br></code></pre></td></tr></table></figure></li><li><p>示例2：</p><figure class="highlight nix"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs nix">输入：<span class="hljs-attr">haystack</span> = <span class="hljs-string">&quot;aaaaa&quot;</span>, <span class="hljs-attr">needle</span> = <span class="hljs-string">&quot;bba&quot;</span><br>输出：-<span class="hljs-number">1</span><br></code></pre></td></tr></table></figure></li><li><p>示例3：</p><figure class="highlight nix"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs nix">输入：<span class="hljs-attr">haystack</span> = <span class="hljs-string">&quot;&quot;</span>, <span class="hljs-attr">needle</span> = <span class="hljs-string">&quot;&quot;</span><br>输出：<span class="hljs-number">0</span><br></code></pre></td></tr></table></figure></li></ul><h1 id="思路-代码"><a href="#思路-代码" class="headerlink" title="思路+代码"></a>思路+代码</h1><p>本题可以采用暴力解法完成字符串匹配，但是在LeetCode中提交会超时，需要采用KMP算法完成此题</p><h2 id="KMP理论"><a href="#KMP理论" class="headerlink" title="KMP理论"></a>KMP理论</h2><p>Knuth–Morris–Pratt（KMP）算法是一种改进的字符串匹配算法，它的核心是利用匹配失败后的信息，尽量减少模式串与主串的匹配次数以达到快速匹配的目的。它的时间复杂度是<em><strong>O(m + n)</strong></em></p><h2 id="构建next数组"><a href="#构建next数组" class="headerlink" title="构建next数组"></a>构建next数组</h2><p>在完成KMP算法之前，需要构建<em><strong>next数组</strong></em>。<code>next[i]</code>所对应的含义为：<code>P[0, 1, ..., i-1]</code>的最长公共前缀后缀的长度，令<code>p[0] = -1</code><br>例如字符串<code>abcba</code>:</p><ul><li>前缀包括：<code>a, ab, abc, abcb</code></li><li>后缀包括：<code>bcba, cba, ba, a</code></li><li>最长公共前缀后缀：<code>a</code>，长度为<code>1</code><br>图解如下：<table><thead><tr><th align="center"></th><th align="center">A</th><th align="center">C</th><th align="center">T</th><th align="center">G</th><th align="center">P</th><th align="center">A</th><th align="center">C</th><th align="center">Y</th></tr></thead><tbody><tr><td align="center">next</td><td align="center">-1</td><td align="center">0</td><td align="center">0</td><td align="center">0</td><td align="center">0</td><td align="center">0</td><td align="center"><em><strong>1</strong></em></td><td align="center"><em><strong>2</strong></em></td></tr></tbody></table></li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function">vector&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">gextNext</span><span class="hljs-params">(string needle)</span></span><br><span class="hljs-function">   </span>&#123;<br>       <span class="hljs-type">int</span> length = needle.<span class="hljs-built_in">size</span>();<br>       <span class="hljs-function">vector&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">N</span><span class="hljs-params">(length)</span></span>;<br>       N[<span class="hljs-number">0</span>] = <span class="hljs-number">-1</span>;<br>       <span class="hljs-type">int</span> k = <span class="hljs-number">-1</span>;<br>       <span class="hljs-type">int</span> j = <span class="hljs-number">0</span>;<br>       <span class="hljs-keyword">while</span>(j &lt; length - <span class="hljs-number">1</span>)<br>       &#123;<br>           <span class="hljs-keyword">if</span> (k &lt; <span class="hljs-number">0</span> || needle[k] == needle[j])<br>           &#123;<br>               k++;<br>               j++;<br>               N[j] = k;<br>           &#125;<br>           <span class="hljs-keyword">else</span><br>           &#123;<br>               k = N[k];<br>           &#125;<br>       &#125;<br>       <span class="hljs-keyword">return</span> N;<br>   &#125;<br></code></pre></td></tr></table></figure><h2 id="KMP思路"><a href="#KMP思路" class="headerlink" title="KMP思路"></a>KMP思路</h2><ul><li>当主串与子串的数组索引分别停留在<code>i</code>与<code>j</code></li><li>发现此时两个位置的字符不匹配，基于<code>next</code>数组将子串的索引更新到<code>next[j]</code></li><li>此时主串的索引不动，与更新后的子串索引所在位置进行比较</li></ul><figure class="highlight mel"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs mel"><span class="hljs-keyword">int</span> strStr(<span class="hljs-keyword">string</span> haystack, <span class="hljs-keyword">string</span> needle) &#123;<br>    <span class="hljs-keyword">int</span> haystack_length = haystack.<span class="hljs-keyword">size</span>();<br>    <span class="hljs-keyword">int</span> needle_length = needle.<span class="hljs-keyword">size</span>();<br>    <span class="hljs-keyword">if</span> (needle_length == <span class="hljs-number">0</span>)<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br><br>    <span class="hljs-keyword">vector</span>&lt;<span class="hljs-keyword">int</span>&gt; next = gextNext(needle);<br>    <span class="hljs-keyword">int</span> h_index = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">int</span> n_index = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">while</span>((h_index &lt; haystack_length) &amp;&amp; (n_index &lt; needle_length))<br>    &#123;<br>        <span class="hljs-keyword">if</span> (n_index &lt; <span class="hljs-number">0</span> || (haystack[h_index] == needle[n_index]))<br>        &#123;<br>            h_index++;<br>            n_index++;<br>        &#125;<br>        <span class="hljs-keyword">else</span><br>        &#123;<br>            n_index = next[n_index];<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">if</span> (n_index == needle_length)<br>    &#123;<br>        <span class="hljs-keyword">return</span> h_index - n_index;<br>    &#125;<br>    <span class="hljs-keyword">else</span><br>    &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="辅助理解资料"><a href="#辅助理解资料" class="headerlink" title="辅助理解资料"></a>辅助理解资料</h1><h2 id="递推求next数组"><a href="#递推求next数组" class="headerlink" title="递推求next数组"></a>递推求next数组</h2><p>我们很容易的可以知道，<code>next[0] = -1</code>，<code>next[1] = 0</code>也是容易推得的。那么当<code>j &gt; 1</code>时，如果我们已知了<code>next[j]</code>，那么<code>next[j + 1]</code>怎么求得呢？？？<br>下面分两种情况：</p><ul><li>当<code>P[K] = P[j]</code>时，<code>next[j+1] = next[j] + 1 = k + 1</code>，当前模式串中在<code>j + 1</code>所对应字符前有<code>K + 1</code>长度的最大公共前后缀</li><li>当<code>P[K] != P[j]</code>时，说明<code>P[0]P[1]...P[k-1]P[k] != P[j-k]P[j-k+1]...P[j]</code>，也就是当前模式串中在<code>j + 1</code>所对应字符前没有长度为<code>K + 1</code>的最大公共前后缀，只能寻找更短的最大公共前后缀</li><li>因此，在<code>P[0]P[1]...P[k-1]P[k]</code>中不断递归索引<code>k = next[k]</code>，找到一个字符<code>P[K&#39;]</code>，那么最大公共前后缀长度就是<code>K&#39; + 1</code>S</li></ul><h2 id="解释k-x3D-next-k-能找到长度更短的最大公共前后缀"><a href="#解释k-x3D-next-k-能找到长度更短的最大公共前后缀" class="headerlink" title="解释k &#x3D; next[k]能找到长度更短的最大公共前后缀"></a>解释k &#x3D; next[k]能找到长度更短的最大公共前后缀</h2><img src="/2022/03/02/KMP%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%8C%B9%E9%85%8D/KMP1.png" class><br><br><p>来源：LeetCode、CSDN<br>链接：<a href="https://leetcode-cn.com/leetbook/read/array-and-string/cm5e2/">实现strStr()</a>、<a href="https://blog.csdn.net/yyzsir/article/details/89462339">KMP算法详解</a><br>著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。</p>]]></content>
    
    
    <categories>
      
      <category>算法</category>
      
    </categories>
    
    
    <tags>
      
      <tag>KMP</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>岛屿数量（并查集）</title>
    <link href="/2022/03/02/%E5%B2%9B%E5%B1%BF%E6%95%B0%E9%87%8F%EF%BC%88%E5%B9%B6%E6%9F%A5%E9%9B%86%EF%BC%89/"/>
    <url>/2022/03/02/%E5%B2%9B%E5%B1%BF%E6%95%B0%E9%87%8F%EF%BC%88%E5%B9%B6%E6%9F%A5%E9%9B%86%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<h1 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h1><p>给你一个由’1’（陆地）和’0’（水）组成的二维网格，请你计算网格钟岛屿的数量。岛屿总是被水包围，并且每座岛屿<strong>只能由水平方向和&#x2F;或竖直方向</strong>上相邻的陆地连接形成。<br>此外，你可以<strong>假设该网格的四条边均被水包围</strong>。</p><ul><li><p>示例1：</p><figure class="highlight prolog"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><pre><code class="hljs prolog">输入: grid = [<br>[<span class="hljs-string">&quot;1&quot;</span>, <span class="hljs-string">&quot;1&quot;</span>, <span class="hljs-string">&quot;1&quot;</span>, <span class="hljs-string">&quot;1&quot;</span>, <span class="hljs-string">&quot;0&quot;</span>],<br>[<span class="hljs-string">&quot;1&quot;</span>, <span class="hljs-string">&quot;1&quot;</span>, <span class="hljs-string">&quot;0&quot;</span>, <span class="hljs-string">&quot;1&quot;</span>, <span class="hljs-string">&quot;0&quot;</span>],<br>[<span class="hljs-string">&quot;1&quot;</span>, <span class="hljs-string">&quot;1&quot;</span>, <span class="hljs-string">&quot;0&quot;</span>, <span class="hljs-string">&quot;0&quot;</span>, <span class="hljs-string">&quot;0&quot;</span>],<br>[<span class="hljs-string">&quot;0&quot;</span>, <span class="hljs-string">&quot;0&quot;</span>, <span class="hljs-string">&quot;0&quot;</span>, <span class="hljs-string">&quot;0&quot;</span>, <span class="hljs-string">&quot;0&quot;</span>]<br>]<br>输出: <span class="hljs-number">1</span><br></code></pre></td></tr></table></figure></li><li><p>示例2：</p><figure class="highlight prolog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs prolog">输入: grid = [<br>[<span class="hljs-string">&quot;1&quot;</span>, <span class="hljs-string">&quot;1&quot;</span>, <span class="hljs-string">&quot;0&quot;</span>, <span class="hljs-string">&quot;0&quot;</span>, <span class="hljs-string">&quot;0&quot;</span>],<br>[<span class="hljs-string">&quot;1&quot;</span>, <span class="hljs-string">&quot;1&quot;</span>, <span class="hljs-string">&quot;0&quot;</span>, <span class="hljs-string">&quot;0&quot;</span>, <span class="hljs-string">&quot;0&quot;</span>],<br>[<span class="hljs-string">&quot;0&quot;</span>, <span class="hljs-string">&quot;0&quot;</span>, <span class="hljs-string">&quot;1&quot;</span>, <span class="hljs-string">&quot;0&quot;</span>, <span class="hljs-string">&quot;0&quot;</span>],<br>[<span class="hljs-string">&quot;0&quot;</span>, <span class="hljs-string">&quot;0&quot;</span>, <span class="hljs-string">&quot;0&quot;</span>, <span class="hljs-string">&quot;1&quot;</span>, <span class="hljs-string">&quot;1&quot;</span>]<br>]<br>输出: <span class="hljs-number">3</span><br></code></pre></td></tr></table></figure></li></ul><h1 id="思路-代码"><a href="#思路-代码" class="headerlink" title="思路+代码"></a>思路+代码</h1><p>本题解可以采用DFS（深度优先搜索）、BFS（广度优先搜索）、并查集的方式完成解题。但是本篇文章重点介绍并查集的方法，并帮助读者理解并查集</p><h2 id="并查集理论"><a href="#并查集理论" class="headerlink" title="并查集理论"></a>并查集理论</h2><p>并查集（union &amp; find）：用于处理一些元素合并和查询问题，主要包含三个方法与三个属性</p><ul><li>find(x)方法：确定x元素属于哪一个子集（寻找x元素的根节点）。实现方法采用<strong>路径压缩方式</strong></li><li>isConnected(p, q)：用于判断两个元素是否属于同一个子集，即两元素是否连通</li><li>union(p, q)：将两个元素所在的子集进行合并（前提是两个元素所在子集不连通）</li><li>count：并查集总数（子集个数）</li><li>parent：数组记录每个节点的父节点索引</li><li>rank：数组记录每个子集树的深度，用在按秩合并记录树的深度，节约树结构搜索时的时间</li></ul><h2 id="并查集类实现（代码）"><a href="#并查集类实现（代码）" class="headerlink" title="并查集类实现（代码）"></a>并查集类实现（代码）</h2><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><code class="hljs gradle"><span class="hljs-keyword">class</span> UnionFind&#123;<br><span class="hljs-keyword">public</span>:<br>UnionFind(vector&lt;vector&lt;<span class="hljs-keyword">char</span>&gt;&gt;&amp; grid)&#123;<br><span class="hljs-keyword">int</span> rows = grid.<span class="hljs-keyword">size</span>();<br><span class="hljs-keyword">int</span> cols = grid[<span class="hljs-number">0</span>].<span class="hljs-keyword">size</span>();<br><span class="hljs-keyword">count</span> = <span class="hljs-number">0</span>;  <span class="hljs-comment">//之前忘记了</span><br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> r = <span class="hljs-number">0</span>; r &lt; rows; r++)<br>&#123;<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> c = <span class="hljs-number">0</span>; c &lt; cols; c++)<br>&#123;<br><span class="hljs-keyword">if</span> (grid[r][c] == <span class="hljs-string">&#x27;1&#x27;</span>)<br>&#123;<br>parent.push_back(r * cols + c);<br><span class="hljs-keyword">count</span>++;    <span class="hljs-comment">//之前忘记了</span><br>&#125;<br><span class="hljs-keyword">else</span><br>parent.push_back(-<span class="hljs-number">1</span>);<br>rank.push_back(<span class="hljs-number">0</span>);<br>&#125;<br>&#125;<br>&#125;<br><br><span class="hljs-keyword">int</span> <span class="hljs-keyword">find</span>(<span class="hljs-keyword">int</span> x)&#123;<br><span class="hljs-keyword">if</span> (parent[x] != x)<br>&#123;<br>parent[x] = <span class="hljs-keyword">find</span>(parent[x]);<br>&#125;<br><br><span class="hljs-keyword">return</span> parent[x];<br>&#125;<br><br><span class="hljs-keyword">void</span> unite(<span class="hljs-keyword">int</span> x, <span class="hljs-keyword">int</span> y)&#123;<br><span class="hljs-keyword">int</span> x_root = <span class="hljs-keyword">find</span>(x);<br><span class="hljs-keyword">int</span> y_root = <span class="hljs-keyword">find</span>(y);<br><span class="hljs-keyword">if</span> (x_root == y_root)<br>&#123;<br><span class="hljs-keyword">return</span>;<br>&#125;<br><span class="hljs-keyword">else</span><br>&#123;<br><span class="hljs-keyword">if</span> (rank[x_root] &lt; rank[y_root])<br>&#123;<br><span class="hljs-keyword">int</span> temp = rank[x_root];<br>rank[x_root] = rank[y_root];<br>rank[y_root] = temp;<br>&#125;<br>parent[y_root] = x_root;<br><span class="hljs-keyword">if</span> (rank[x_root] == rank[y_root])<br>rank[x_root]++;<br><span class="hljs-keyword">count</span>--;    <span class="hljs-comment">//之前忘记了</span><br><span class="hljs-keyword">return</span>;<br>&#125;<br>&#125;<br><br>bool isConnected(<span class="hljs-keyword">int</span> x, <span class="hljs-keyword">int</span> y)&#123;<br><span class="hljs-keyword">if</span> (<span class="hljs-keyword">find</span>(x) == <span class="hljs-keyword">find</span>(y))<br><span class="hljs-keyword">return</span> <span class="hljs-keyword">true</span>;<br><span class="hljs-keyword">else</span><br><span class="hljs-keyword">return</span> <span class="hljs-keyword">false</span>;<br>&#125;<br><br><span class="hljs-keyword">int</span> getCount()&#123;<br><span class="hljs-keyword">return</span> <span class="hljs-keyword">count</span>;<br>&#125;<br><span class="hljs-keyword">private</span>:<br><span class="hljs-keyword">int</span> <span class="hljs-keyword">count</span>;<br>vector&lt;<span class="hljs-keyword">int</span>&gt; parent;<br>vector&lt;<span class="hljs-keyword">int</span>&gt; rank;<br>&#125;;<br></code></pre></td></tr></table></figure><h2 id="基于并查集类完成岛屿数量的题解"><a href="#基于并查集类完成岛屿数量的题解" class="headerlink" title="基于并查集类完成岛屿数量的题解"></a>基于并查集类完成岛屿数量的题解</h2><p>并查集可以代替树结构对邻近“岛屿”（“1”）进行搜索</p><ul><li>思路：扫描整个二维网格，如果该位置为“1”，则将其与相邻四个方向上的“1”在并查集中进行合并，最终岛屿的数量就是并查集（子集或连通分量）的数量<figure class="highlight mel"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs mel">class Solution &#123;<br>public:<br>    <span class="hljs-keyword">int</span> numIslands(<span class="hljs-keyword">vector</span>&lt;<span class="hljs-keyword">vector</span>&lt;char&gt;&gt;&amp; <span class="hljs-keyword">grid</span>) &#123;<br>        <span class="hljs-keyword">int</span> rows = <span class="hljs-keyword">grid</span>.<span class="hljs-keyword">size</span>();<br>        <span class="hljs-keyword">int</span> cols = <span class="hljs-keyword">grid</span>[<span class="hljs-number">0</span>].<span class="hljs-keyword">size</span>();<br>        UnionFind uf(<span class="hljs-keyword">grid</span>);<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> r = <span class="hljs-number">0</span>; r &lt; rows; r++)<br>        &#123;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> c = <span class="hljs-number">0</span>; c &lt; cols; c++)<br>            &#123;<br>                <span class="hljs-keyword">if</span> (<span class="hljs-keyword">grid</span>[r][c] == <span class="hljs-string">&#x27;1&#x27;</span>)<br>                &#123;<br>                    <span class="hljs-keyword">grid</span>[r][c] = <span class="hljs-string">&#x27;0&#x27;</span>;<br>                    <span class="hljs-keyword">if</span> (r<span class="hljs-number">-1</span> &gt;= <span class="hljs-number">0</span> &amp;&amp; <span class="hljs-keyword">grid</span>[r<span class="hljs-number">-1</span>][c] == <span class="hljs-string">&#x27;1&#x27;</span>)<br>                        uf.unite(r * cols + c, (r<span class="hljs-number">-1</span>) * cols + c);<br>                    <span class="hljs-keyword">if</span> (r+<span class="hljs-number">1</span> &lt; rows &amp;&amp; <span class="hljs-keyword">grid</span>[r+<span class="hljs-number">1</span>][c] == <span class="hljs-string">&#x27;1&#x27;</span>)<br>                        uf.unite(r * cols + c, (r+<span class="hljs-number">1</span>) * cols + c);<br>                    <span class="hljs-keyword">if</span> (c<span class="hljs-number">-1</span> &gt;= <span class="hljs-number">0</span> &amp;&amp; <span class="hljs-keyword">grid</span>[r][c<span class="hljs-number">-1</span>] == <span class="hljs-string">&#x27;1&#x27;</span>)<br>                        uf.unite(r * cols + c, r * cols + c - <span class="hljs-number">1</span>);<br>                    <span class="hljs-keyword">if</span> (c+<span class="hljs-number">1</span> &lt; cols &amp;&amp; <span class="hljs-keyword">grid</span>[r][c+<span class="hljs-number">1</span>] == <span class="hljs-string">&#x27;1&#x27;</span>)<br>                        uf.unite(r * cols + c, r * cols + c + <span class="hljs-number">1</span>);<br>                &#125;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> uf.getCount();<br>    &#125;;<br>&#125;;<br></code></pre></td></tr></table></figure></li></ul><h1 id="辅助理解资料"><a href="#辅助理解资料" class="headerlink" title="辅助理解资料"></a>辅助理解资料</h1><h2 id="按秩合并"><a href="#按秩合并" class="headerlink" title="按秩合并"></a>按秩合并</h2><ul><li>按秩合并可以通过减少森林的深度，来节约之后搜索的时间<br>例如有如下两个树型集合：<img src="/2022/03/02/%E5%B2%9B%E5%B1%BF%E6%95%B0%E9%87%8F%EF%BC%88%E5%B9%B6%E6%9F%A5%E9%9B%86%EF%BC%89/UnionFind1.png" class>将A集合合并到D集合，合并后树的<strong>深度是3</strong>，而将D合并到A上，<strong>深度就变为4</strong>。因此在并查集类的合并方法中，只有当两个集合树的深度一样时，将两者合并后深度会+1，其余情况合并后深度为A、B集合深度的较大者，即：max(A,B)<img src="/2022/03/02/%E5%B2%9B%E5%B1%BF%E6%95%B0%E9%87%8F%EF%BC%88%E5%B9%B6%E6%9F%A5%E9%9B%86%EF%BC%89/UnionFind2.png" class></li></ul><h2 id="路径压缩"><a href="#路径压缩" class="headerlink" title="路径压缩"></a>路径压缩</h2><ul><li>路径压缩是为了防止出现树的不平衡状态，即为单分支树。采用路径压缩，只需要n(1)的时间复杂度即可找到父节点</li><li>当数据过大，递归会导致爆栈，所以需要用非递归算法<figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs powershell">int find(int x)<br>&#123;<br>int k, j, <span class="hljs-built_in">r</span>;<br><span class="hljs-built_in">r</span> = x;<br><span class="hljs-keyword">while</span>(<span class="hljs-built_in">r</span> != parent[<span class="hljs-type">r</span>])<br><span class="hljs-built_in">r</span> = parent[<span class="hljs-type">r</span>];<br>k = x;        <br><span class="hljs-keyword">while</span>(k != <span class="hljs-built_in">r</span>) <br>&#123;<br>j = parent[<span class="hljs-type">k</span>]; <br>parent[<span class="hljs-type">k</span>] = <span class="hljs-built_in">r</span>; <br>k = j; <br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-built_in">r</span>; <br>&#125;<br></code></pre></td></tr></table></figure></li></ul><h2 id="算法步骤流程"><a href="#算法步骤流程" class="headerlink" title="算法步骤流程"></a>算法步骤流程</h2><ul><li>如下示例：<figure class="highlight prolog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs prolog">输入: grid = [<br>[<span class="hljs-string">&quot;1&quot;</span>, <span class="hljs-string">&quot;1&quot;</span>, <span class="hljs-string">&quot;1&quot;</span>],<br>[<span class="hljs-string">&quot;0&quot;</span>, <span class="hljs-string">&quot;1&quot;</span>, <span class="hljs-string">&quot;0&quot;</span>],<br>[<span class="hljs-string">&quot;1&quot;</span>, <span class="hljs-string">&quot;0&quot;</span>, <span class="hljs-string">&quot;0&quot;</span>],<br>[<span class="hljs-string">&quot;1&quot;</span>, <span class="hljs-string">&quot;0&quot;</span>, <span class="hljs-string">&quot;1&quot;</span>]<br>]<br>输出: <span class="hljs-number">3</span><br></code></pre></td></tr></table></figure></li><li>parent和rank数组变化情况表：<table><thead><tr><th align="center"></th><th align="center">0</th><th align="center">1</th><th align="center">2</th><th align="center">3</th><th align="center">4</th><th align="center">5</th><th align="center">6</th><th align="center">7</th><th align="center">8</th><th align="center">9</th><th align="center">10</th><th align="center">11</th><th align="center">count</th></tr></thead><tbody><tr><td align="center">parent1</td><td align="center">0</td><td align="center">1</td><td align="center">2</td><td align="center">-1</td><td align="center">4</td><td align="center">-1</td><td align="center">6</td><td align="center">-1</td><td align="center">-1</td><td align="center">9</td><td align="center">-1</td><td align="center">11</td><td align="center"></td></tr><tr><td align="center">rank1</td><td align="center">0</td><td align="center">0</td><td align="center">0</td><td align="center">0</td><td align="center">0</td><td align="center">0</td><td align="center">0</td><td align="center">0</td><td align="center">0</td><td align="center">0</td><td align="center">0</td><td align="center">0</td><td align="center">7</td></tr><tr><td align="center">parent2</td><td align="center">0</td><td align="center"><strong>0</strong></td><td align="center">2</td><td align="center">-1</td><td align="center">4</td><td align="center">-1</td><td align="center">6</td><td align="center">-1</td><td align="center">-1</td><td align="center">9</td><td align="center">-1</td><td align="center">11</td><td align="center"></td></tr><tr><td align="center">rank2</td><td align="center">1</td><td align="center">0</td><td align="center">0</td><td align="center">0</td><td align="center">0</td><td align="center">0</td><td align="center">0</td><td align="center">0</td><td align="center">0</td><td align="center">0</td><td align="center">0</td><td align="center">0</td><td align="center">6</td></tr><tr><td align="center">parent3</td><td align="center">0</td><td align="center">0</td><td align="center"><strong>0</strong></td><td align="center">-1</td><td align="center">4</td><td align="center">-1</td><td align="center">6</td><td align="center">-1</td><td align="center">-1</td><td align="center">9</td><td align="center">-1</td><td align="center">11</td><td align="center"></td></tr><tr><td align="center">rank3</td><td align="center">1</td><td align="center">0</td><td align="center">0</td><td align="center">0</td><td align="center">0</td><td align="center">0</td><td align="center">0</td><td align="center">0</td><td align="center">0</td><td align="center">0</td><td align="center">0</td><td align="center">0</td><td align="center">5</td></tr><tr><td align="center">parent4</td><td align="center">0</td><td align="center">0</td><td align="center">0</td><td align="center">-1</td><td align="center"><strong>0</strong></td><td align="center">-1</td><td align="center">6</td><td align="center">-1</td><td align="center">-1</td><td align="center">9</td><td align="center">-1</td><td align="center">11</td><td align="center"></td></tr><tr><td align="center">rank4</td><td align="center">1</td><td align="center">0</td><td align="center">0</td><td align="center">0</td><td align="center">0</td><td align="center">0</td><td align="center">0</td><td align="center">0</td><td align="center">0</td><td align="center">0</td><td align="center">0</td><td align="center">0</td><td align="center">4</td></tr><tr><td align="center">parent5</td><td align="center">0</td><td align="center">0</td><td align="center">0</td><td align="center">-1</td><td align="center">0</td><td align="center">-1</td><td align="center">6</td><td align="center">-1</td><td align="center">-1</td><td align="center"><strong>6</strong></td><td align="center">-1</td><td align="center">11</td><td align="center"></td></tr><tr><td align="center">rank5</td><td align="center">1</td><td align="center">0</td><td align="center">0</td><td align="center">0</td><td align="center">0</td><td align="center">0</td><td align="center">1</td><td align="center">0</td><td align="center">0</td><td align="center">0</td><td align="center">0</td><td align="center">0</td><td align="center">3</td></tr></tbody></table></li></ul><br><br><p>来源：LeetCode<br>链接：<a href="https://leetcode-cn.com/problems/number-of-islands/solution/200-dao-yu-shu-liang-bing-cha-ji-by-chen-1az1/">并查集</a>、<a href="https://leetcode-cn.com/problems/number-of-islands/solution/dao-yu-shu-liang-by-leetcode/">岛屿官方题解</a><br>著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。</p>]]></content>
    
    
    <categories>
      
      <category>算法</category>
      
    </categories>
    
    
    <tags>
      
      <tag>LeetCode</tag>
      
      <tag>并查集</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Git分支多终端工作</title>
    <link href="/2022/02/26/Git%E5%88%86%E6%94%AF%E5%A4%9A%E7%BB%88%E7%AB%AF%E5%B7%A5%E4%BD%9C/"/>
    <url>/2022/02/26/Git%E5%88%86%E6%94%AF%E5%A4%9A%E7%BB%88%E7%AB%AF%E5%B7%A5%E4%BD%9C/</url>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>由于hexo d将个人博客部署在GitHub仓库前需要进行编译，将Markdown等文件进行编译后生成网页并上传，并不包含源文件。因此，当在某个电脑环境下配置好Hexo+GitHub个人博客并进行了一段时间写作后，需要多终端切换工作，这时就需要在Git上进行上传分支</p><span id="more"></span><h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>本篇博客实现了简单在新电脑上配置，并从GitHub上把文件Clone下来就可以实现多终端无缝切换</p><h1 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h1><p>采用hexo d对博客内容上传部署到GitHub的过程，实际上是hexo编译后的文件上传，没有源文件。在上传的GitHub仓库可以看到，上传的文件其实是本地目录中.deploy_git文件夹里面的文件，而source、themes、node_modules等文件都没有同步上传到GitHub。利用git的分支管理可以将源文件上传到GitHub</p><h1 id="分支上传"><a href="#分支上传" class="headerlink" title="分支上传"></a>分支上传</h1><h2 id="创建分支"><a href="#创建分支" class="headerlink" title="创建分支"></a>创建分支</h2><ol><li><p>首先需要登录自己的GitHub主页，找到对应的repositories仓库。然后在按照如下图步骤创建一个hexo分支：</p><img src="/2022/02/26/Git%E5%88%86%E6%94%AF%E5%A4%9A%E7%BB%88%E7%AB%AF%E5%B7%A5%E4%BD%9C/step1.png" class></li><li><p>然后在仓库的setting中，设置新创建的hexo分支为默认分支，如下图操作：</p><img src="/2022/02/26/Git%E5%88%86%E6%94%AF%E5%A4%9A%E7%BB%88%E7%AB%AF%E5%B7%A5%E4%BD%9C/step2.png" class><p>设置为默认分支的目的是为了方便同步，不用指定分支即可更新源码文件</p></li></ol><h2 id="本地克隆"><a href="#本地克隆" class="headerlink" title="本地克隆"></a>本地克隆</h2><ol><li><p>分支创建并设置好后，在本地任意目录下，通过Git Bash，输入如下指令：</p><figure class="highlight crmsh"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><pre><code class="hljs crmsh">git <span class="hljs-keyword">clone</span> <span class="hljs-title">git</span>@github.com:MinghuiJia/minghuijia.github.io.git<br></code></pre></td></tr></table></figure><p>将GitHub仓库中的文件克隆到本地。此时由于已经设置了默认分支是hexo，所以只克隆hexo分支下的文件</p></li><li><p>然后在本地已经克隆好的文件夹（minghuijia.github.io）中删除<em><strong>.git文件夹</strong></em>以外的所有文件，如下图红色框起来的文件均需要删除</p><img src="/2022/02/26/Git%E5%88%86%E6%94%AF%E5%A4%9A%E7%BB%88%E7%AB%AF%E5%B7%A5%E4%BD%9C/step3.png" class></li><li><p>将本地之前写博客的源文件<em><strong>除.deploy_git文件夹</strong></em>外全部拷贝过来。<em><strong>注意：拷贝到clone文件夹（minghuijia.github.io）中的源文件应包含一个.gitignore文件，用于忽略一些不需要的文件，如果没有该文件的话，自己创建一个并粘贴如下文字</strong></em>：</p><figure class="highlight x86asm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs x86asm"><span class="hljs-meta">.DS_Store</span><br>Thumbs<span class="hljs-number">.</span><span class="hljs-built_in">db</span><br><span class="hljs-built_in">db</span><span class="hljs-number">.</span>json<br>*.log<br>node_modules/<br><span class="hljs-meta">public</span>/<br><span class="hljs-meta">.deploy</span>*/<br></code></pre></td></tr></table></figure><img src="/2022/02/26/Git%E5%88%86%E6%94%AF%E5%A4%9A%E7%BB%88%E7%AB%AF%E5%B7%A5%E4%BD%9C/step4.png" class><p>另外需要注意，<em><strong>如果theme是克隆来的，应该将主题文件夹中的.git文件夹删掉</strong></em>。因为git不能嵌套上传，会导致上传时报错，无法上传主题文件，导致配置在其余终端不能用</p><img src="/2022/02/26/Git%E5%88%86%E6%94%AF%E5%A4%9A%E7%BB%88%E7%AB%AF%E5%B7%A5%E4%BD%9C/step5.png" class></li></ol><h2 id="上传分支"><a href="#上传分支" class="headerlink" title="上传分支"></a>上传分支</h2><p>上述操作完成后，Git Bash在当前文件夹下输入如下指令上传源文件：</p><figure class="highlight avrasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs avrasm">git <span class="hljs-keyword">add</span> .<br>git commit -m <span class="hljs-string">&quot;add branch&quot;</span><br>git <span class="hljs-keyword">push</span><br></code></pre></td></tr></table></figure><p>上传结束后可以在GitHub仓库的hexo分支查看，可以发现node_modules、public、db.json被忽略而未上传（这些文件夹会在新电脑配置时自动创建）<br>*<strong>注意:node_modules文件夹中的文件会自动生成，但是图片加载的hexo-asset-image&#x2F;index.js文件也是默认创建，如果不按照本地图片无法显示教程中对js文件修改会导致图片路径错误而无法加载图片</strong></p><h1 id="更换电脑操作"><a href="#更换电脑操作" class="headerlink" title="更换电脑操作"></a>更换电脑操作</h1><h2 id="基本环境配置"><a href="#基本环境配置" class="headerlink" title="基本环境配置"></a>基本环境配置</h2><ol><li>安装Git</li><li><a href="https://www.runoob.com/nodejs/nodejs-install-setup.html">安装Node.js</a><a href="https://www.cnblogs.com/quwaner/p/11541445.html">npm安装教程</a></li><li>设置Git全局邮箱和用户名<figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs stylus">git config <span class="hljs-attr">--global</span> user<span class="hljs-selector-class">.name</span> <span class="hljs-string">&quot;xxx&quot;</span><br>git config <span class="hljs-attr">--global</span> user<span class="hljs-selector-class">.email</span> <span class="hljs-string">&quot;xxx&quot;</span><br></code></pre></td></tr></table></figure></li><li>设置ssh key<figure class="highlight excel"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs excel">ssh-keygen -<span class="hljs-built_in">t</span> rsa -C <span class="hljs-string">&quot;youremail&quot;</span><br></code></pre></td></tr></table></figure>rsa生成后填到GitHubSSH中，并验证是否成功<figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-attribute">ssh</span> -T git<span class="hljs-variable">@github</span>.com<br></code></pre></td></tr></table></figure></li><li>安装hexo，输入如下指令：<figure class="highlight avrasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs avrasm">npm install hexo-<span class="hljs-keyword">cli</span> -g<br></code></pre></td></tr></table></figure></li><li>由于博客框架已经搭建好，当前目的只是更换终端设备，因此不需要初始化</li></ol><h2 id="文件克隆"><a href="#文件克隆" class="headerlink" title="文件克隆"></a>文件克隆</h2><ol><li>在新的终端选择任意文件夹，打开Git Bash，并输入如下指令完成克隆：<figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs crmsh">git <span class="hljs-keyword">clone</span> <span class="hljs-title">git</span>@xxxx<br></code></pre></td></tr></table></figure></li><li>进入到克隆下来的文件夹，并完成如下指令安装：<figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs cmake">cd xxx.github.io<br>npm <span class="hljs-keyword">install</span><span class="hljs-comment">#执行之后会创建node_modules文件夹</span><br>npm <span class="hljs-keyword">install</span> hexo-deployer-git --save<span class="hljs-comment">#执行后会创建.deploy_git文件夹</span><br></code></pre></td></tr></table></figure></li><li>然后使用hexo命令生成和部署：<figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-attribute">hexo</span> g<span class="hljs-comment">#执行之后会创建public文件夹</span><br>hexo d<span class="hljs-comment">#执行后会将新的文件部署到GitHubmaster分支</span><br></code></pre></td></tr></table></figure></li><li>在写文章之前，记得检查node_modules文件夹中hexo-asset-image&#x2F;index.js文件，需要对该文件的代码进行修改（具体参考本地图片加载博客教程），保证图片加载时路径正确</li><li>最后即可进行新的博客撰写<figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs actionscript">hexo <span class="hljs-keyword">new</span> newpage<br></code></pre></td></tr></table></figure></li></ol><h2 id="博客写完后的操作"><a href="#博客写完后的操作" class="headerlink" title="博客写完后的操作"></a>博客写完后的操作</h2><ol><li>每次文章写完后，要把源文件上传到hexo分支<figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">git <span class="hljs-keyword">add</span> .<br>git <span class="hljs-keyword">commit</span> -m &quot;xxx<br>git push<br></code></pre></td></tr></table></figure></li><li>如果终端已经执行过1操作一次，本地电脑上clone文件夹，后续更新源文件即可使用如下指令和远端同步即可：<figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">git pull</span><br></code></pre></td></tr></table></figure></li></ol>]]></content>
    
    
    <categories>
      
      <category>hexo</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Git</tag>
      
      <tag>多终端</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hexo写文章时引用本地图片无法显示</title>
    <link href="/2022/02/22/Hexo%E5%86%99%E6%96%87%E7%AB%A0%E6%97%B6%E5%BC%95%E7%94%A8%E6%9C%AC%E5%9C%B0%E5%9B%BE%E7%89%87%E6%97%A0%E6%B3%95%E6%98%BE%E7%A4%BA/"/>
    <url>/2022/02/22/Hexo%E5%86%99%E6%96%87%E7%AB%A0%E6%97%B6%E5%BC%95%E7%94%A8%E6%9C%AC%E5%9C%B0%E5%9B%BE%E7%89%87%E6%97%A0%E6%B3%95%E6%98%BE%E7%A4%BA/</url>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>利用搭建好的博客进行文章编写过程中，文章内容需要展示图片，但引用本地图片时总显示不出来。本篇博客主要解决利用Hexo写文章引用本地图片无法显示的问题</p><span id="more"></span><h1 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h1><p>当用户利用Hexo编写文章引入图片时，常常会出现如下情况：</p><img src="/2022/02/22/Hexo%E5%86%99%E6%96%87%E7%AB%A0%E6%97%B6%E5%BC%95%E7%94%A8%E6%9C%AC%E5%9C%B0%E5%9B%BE%E7%89%87%E6%97%A0%E6%B3%95%E6%98%BE%E7%A4%BA/step1.png" class><h1 id="插件安装与配置"><a href="#插件安装与配置" class="headerlink" title="插件安装与配置"></a>插件安装与配置</h1><ol><li><p>首先需要安装一个图片路径转换的插件，叫<em><strong>hexo-asset-image</strong></em> 。在Git Bash界面输入命令：</p><figure class="highlight awk"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><pre><code class="hljs awk">npm install https:<span class="hljs-regexp">//gi</span>thub.com<span class="hljs-regexp">/CodeFalling/</span>hexo-asset-image --save<br></code></pre></td></tr></table></figure></li><li><p>然后修改myBlog&#x2F;node_modules&#x2F;hexo-asset-image&#x2F;index.js文件中的代码，将内容更换为下面代码</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-meta">&#x27;use strict&#x27;</span>;<br><span class="hljs-keyword">var</span> cheerio = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;cheerio&#x27;</span>);<br><br><span class="hljs-comment">// http://stackoverflow.com/questions/14480345/how-to-get-the-nth-occurrence-in-a-string</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">getPosition</span>(<span class="hljs-params">str, m, i</span>) &#123;<br>  <span class="hljs-keyword">return</span> str.<span class="hljs-title function_">split</span>(m, i).<span class="hljs-title function_">join</span>(m).<span class="hljs-property">length</span>;<br>&#125;<br><br><span class="hljs-keyword">var</span> version = <span class="hljs-title class_">String</span>(hexo.<span class="hljs-property">version</span>).<span class="hljs-title function_">split</span>(<span class="hljs-string">&#x27;.&#x27;</span>);<br>hexo.<span class="hljs-property">extend</span>.<span class="hljs-property">filter</span>.<span class="hljs-title function_">register</span>(<span class="hljs-string">&#x27;after_post_render&#x27;</span>, <span class="hljs-keyword">function</span>(<span class="hljs-params">data</span>)&#123;<br>  <span class="hljs-keyword">var</span> config = hexo.<span class="hljs-property">config</span>;<br>  <span class="hljs-keyword">if</span>(config.<span class="hljs-property">post_asset_folder</span>)&#123;<br><span class="hljs-keyword">var</span> link = data.<span class="hljs-property">permalink</span>;<br><span class="hljs-keyword">if</span>(version.<span class="hljs-property">length</span> &gt; <span class="hljs-number">0</span> &amp;&amp; <span class="hljs-title class_">Number</span>(version[<span class="hljs-number">0</span>]) == <span class="hljs-number">3</span>)<br>   <span class="hljs-keyword">var</span> beginPos = <span class="hljs-title function_">getPosition</span>(link, <span class="hljs-string">&#x27;/&#x27;</span>, <span class="hljs-number">1</span>) + <span class="hljs-number">1</span>;<br><span class="hljs-keyword">else</span><br>   <span class="hljs-keyword">var</span> beginPos = <span class="hljs-title function_">getPosition</span>(link, <span class="hljs-string">&#x27;/&#x27;</span>, <span class="hljs-number">3</span>) + <span class="hljs-number">1</span>;<br><span class="hljs-comment">// In hexo 3.1.1, the permalink of &quot;about&quot; page is like &quot;.../about/index.html&quot;.</span><br><span class="hljs-keyword">var</span> endPos = link.<span class="hljs-title function_">lastIndexOf</span>(<span class="hljs-string">&#x27;/&#x27;</span>) + <span class="hljs-number">1</span>;<br>link = link.<span class="hljs-title function_">substring</span>(beginPos, endPos);<br><br><span class="hljs-keyword">var</span> toprocess = [<span class="hljs-string">&#x27;excerpt&#x27;</span>, <span class="hljs-string">&#x27;more&#x27;</span>, <span class="hljs-string">&#x27;content&#x27;</span>];<br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>; i &lt; toprocess.<span class="hljs-property">length</span>; i++)&#123;<br>  <span class="hljs-keyword">var</span> key = toprocess[i];<br> <br>  <span class="hljs-keyword">var</span> $ = cheerio.<span class="hljs-title function_">load</span>(data[key], &#123;<br><span class="hljs-attr">ignoreWhitespace</span>: <span class="hljs-literal">false</span>,<br><span class="hljs-attr">xmlMode</span>: <span class="hljs-literal">false</span>,<br><span class="hljs-attr">lowerCaseTags</span>: <span class="hljs-literal">false</span>,<br><span class="hljs-attr">decodeEntities</span>: <span class="hljs-literal">false</span><br>  &#125;);<br><br>  $(<span class="hljs-string">&#x27;img&#x27;</span>).<span class="hljs-title function_">each</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;<br><span class="hljs-keyword">if</span> ($(<span class="hljs-variable language_">this</span>).<span class="hljs-title function_">attr</span>(<span class="hljs-string">&#x27;src&#x27;</span>))&#123;<br><span class="hljs-comment">// For windows style path, we replace &#x27;\&#x27; to &#x27;/&#x27;.</span><br><span class="hljs-keyword">var</span> src = $(<span class="hljs-variable language_">this</span>).<span class="hljs-title function_">attr</span>(<span class="hljs-string">&#x27;src&#x27;</span>).<span class="hljs-title function_">replace</span>(<span class="hljs-string">&#x27;\\&#x27;</span>, <span class="hljs-string">&#x27;/&#x27;</span>);<br><span class="hljs-keyword">if</span>(!<span class="hljs-regexp">/http[s]*.*|\/\/.*/</span>.<span class="hljs-title function_">test</span>(src) &amp;&amp;<br>   !<span class="hljs-regexp">/^\s*\//</span>.<span class="hljs-title function_">test</span>(src)) &#123;<br>  <span class="hljs-comment">// For &quot;about&quot; page, the first part of &quot;src&quot; can&#x27;t be removed.</span><br>  <span class="hljs-comment">// In addition, to support multi-level local directory.</span><br>  <span class="hljs-keyword">var</span> linkArray = link.<span class="hljs-title function_">split</span>(<span class="hljs-string">&#x27;/&#x27;</span>).<span class="hljs-title function_">filter</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params">elem</span>)&#123;<br><span class="hljs-keyword">return</span> elem != <span class="hljs-string">&#x27;&#x27;</span>;<br>  &#125;);<br>  <span class="hljs-keyword">var</span> srcArray = src.<span class="hljs-title function_">split</span>(<span class="hljs-string">&#x27;/&#x27;</span>).<span class="hljs-title function_">filter</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params">elem</span>)&#123;<br><span class="hljs-keyword">return</span> elem != <span class="hljs-string">&#x27;&#x27;</span> &amp;&amp; elem != <span class="hljs-string">&#x27;.&#x27;</span>;<br>  &#125;);<br>  <span class="hljs-keyword">if</span>(srcArray.<span class="hljs-property">length</span> &gt; <span class="hljs-number">1</span>)<br>srcArray.<span class="hljs-title function_">shift</span>();<br>  src = srcArray.<span class="hljs-title function_">join</span>(<span class="hljs-string">&#x27;/&#x27;</span>);<br>  $(<span class="hljs-variable language_">this</span>).<span class="hljs-title function_">attr</span>(<span class="hljs-string">&#x27;src&#x27;</span>, config.<span class="hljs-property">root</span> + link + src);<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-property">info</span>&amp;&amp;<span class="hljs-variable language_">console</span>.<span class="hljs-title function_">info</span>(<span class="hljs-string">&quot;update link as:--&gt;&quot;</span>+config.<span class="hljs-property">root</span> + link + src);<br>&#125;<br>&#125;<span class="hljs-keyword">else</span>&#123;<br><span class="hljs-variable language_">console</span>.<span class="hljs-property">info</span>&amp;&amp;<span class="hljs-variable language_">console</span>.<span class="hljs-title function_">info</span>(<span class="hljs-string">&quot;no src attr, skipped...&quot;</span>);<br><span class="hljs-variable language_">console</span>.<span class="hljs-property">info</span>&amp;&amp;<span class="hljs-variable language_">console</span>.<span class="hljs-title function_">info</span>($(<span class="hljs-variable language_">this</span>));<br>&#125;<br>  &#125;);<br>  data[key] = $.<span class="hljs-title function_">html</span>();<br>&#125;<br>  &#125;<br>&#125;);<br></code></pre></td></tr></table></figure></li><li><p>打开myBlog文件夹下的_config.yml文件，修改下述内容</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">post_asset_folder:</span> <span class="hljs-literal">true</span><br></code></pre></td></tr></table></figure></li></ol><h1 id="问题解决方法"><a href="#问题解决方法" class="headerlink" title="问题解决方法"></a>问题解决方法</h1><ol><li><p>当上述插件安装并完成配置后，我们在Git Bash中输入如下命令</p><figure class="highlight haxe"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs haxe">hexo <span class="hljs-keyword">new</span> <span class="hljs-type">post</span> article1<br>hexo <span class="hljs-keyword">new</span> <span class="hljs-type">draft</span> article2<br></code></pre></td></tr></table></figure><p>在myBlog&#x2F;source&#x2F;_posts 或myBlog&#x2F;source&#x2F;_drafts 文件夹下会创建article.md文件与article同名文件夹</p><img src="/2022/02/22/Hexo%E5%86%99%E6%96%87%E7%AB%A0%E6%97%B6%E5%BC%95%E7%94%A8%E6%9C%AC%E5%9C%B0%E5%9B%BE%E7%89%87%E6%97%A0%E6%B3%95%E6%98%BE%E7%A4%BA/step2.png" class></li><li><p>将文章需要引用的本地图片，放在同名文章所对应的文件夹下</p><img src="/2022/02/22/Hexo%E5%86%99%E6%96%87%E7%AB%A0%E6%97%B6%E5%BC%95%E7%94%A8%E6%9C%AC%E5%9C%B0%E5%9B%BE%E7%89%87%E6%97%A0%E6%B3%95%E6%98%BE%E7%A4%BA/step3.png" class></li><li><p>在Markdown（文章）文件中需要引入图片的地方添加如下代码：</p><figure class="highlight gcode"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs gcode">&#123;`<span class="hljs-meta">%</span> asset_img example.jpg <span class="hljs-meta">%</span>&#125;<br></code></pre></td></tr></table></figure></li><li><p>当上述操作执行完成，并输入如下命令完成博客部署</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">hexo g</span><br><span class="hljs-attribute">hexo d</span><br></code></pre></td></tr></table></figure><p>在GitHub主页可以看到，html页面与图片均在同一个文件夹中，文件夹命名与文章.md同名</p><img src="/2022/02/22/Hexo%E5%86%99%E6%96%87%E7%AB%A0%E6%97%B6%E5%BC%95%E7%94%A8%E6%9C%AC%E5%9C%B0%E5%9B%BE%E7%89%87%E6%97%A0%E6%B3%95%E6%98%BE%E7%A4%BA/step4.png" class></li><li><p>此时在浏览器浏览文章，可以发现显示图片的源码，在图片加载路径那里找到了与html在同一个文件夹下的图片</p><img src="/2022/02/22/Hexo%E5%86%99%E6%96%87%E7%AB%A0%E6%97%B6%E5%BC%95%E7%94%A8%E6%9C%AC%E5%9C%B0%E5%9B%BE%E7%89%87%E6%97%A0%E6%B3%95%E6%98%BE%E7%A4%BA/step5.png" class><p>它会自动寻找，并补全图片的绝对路径，完成图片加载</p></li></ol><h1 id="图片无法加载的可能原因"><a href="#图片无法加载的可能原因" class="headerlink" title="图片无法加载的可能原因"></a>图片无法加载的可能原因</h1><ol><li><p>本地图片没有上传至GitHub仓库，导致引用无效<br>解决方案：安装插件</p></li><li><p>本地图片没有存放在同名文件夹中<br>解决方案：将需要引用的本地图片存放在与文章名相同的文件夹中</p></li><li><p>图片路径出错<br>解决方案：打开myBlog文件夹下的_config.yml修改下述内容</p><blockquote><p># URL<br>## Set your site url here. For example, if you use GitHub Page, set url as ‘<code>https://username.github.io/project</code>‘<br>url: <code>http://minghuijia.cn/</code> 改成域名访问地址</p></blockquote></li><li><p>相对路径引用的标签插件不当<br>把一个 example.jpg 图片放在资源文件夹中，如果通过使用相对路径的常规 markdown 语法 ![](&#x2F;example.jpg) ，它将不会出现在首页上，需要采用 <em><strong>问题解决方法</strong></em> 5点中的方式</p></li></ol>]]></content>
    
    
    <categories>
      
      <category>hexo</category>
      
    </categories>
    
    
    <tags>
      
      <tag>hexo</tag>
      
      <tag>图片无法加载</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>从零搭建个人博客</title>
    <link href="/2022/02/22/%E4%BB%8E%E9%9B%B6%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/"/>
    <url>/2022/02/22/%E4%BB%8E%E9%9B%B6%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/</url>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>搭建个人博客的初衷是为了记录与分享自己学习的过程。本篇文章记录了从零搭建属于自己博客网站的操作步骤，希望对看到这篇文章的你有所帮助</p><span id="more"></span><h1 id="Hexo搭建"><a href="#Hexo搭建" class="headerlink" title="Hexo搭建"></a>Hexo搭建</h1><p>Hexo是一款基于Node.js的静态博客框架，依赖少易于安装使用，可以方便的生成静态网页托管在GitHub和Coding上，是搭建博客的首选框架。大家可以进入<a href="https://hexo.io/zh-cn/">hexo官网</a> 进行详细查看，因为Hexo的创建者是台湾人，对中文的支持很友好，可以选择中文进行查看<br>本篇教程博客包括三个部分：</p><p>1.Hexo的初级搭建+部署到GitHub仓库+域名绑定<br>2.Hexo基本配置（更换主题等）<br>3.Hexo各种功能的添加（阅读量统计、访问量统计等）</p><h2 id="Hexo的初级搭建-部署到GitHub仓库-域名绑定"><a href="#Hexo的初级搭建-部署到GitHub仓库-域名绑定" class="headerlink" title="Hexo的初级搭建+部署到GitHub仓库+域名绑定"></a>Hexo的初级搭建+部署到GitHub仓库+域名绑定</h2><p>在博客搭建之前，需要具备如下前提：<br>1.安装Node.js并完成相应的环境配置<a href="https://www.runoob.com/nodejs/nodejs-install-setup.html">Node.js安装教程</a><br>2.拥有属于自己的GitHub，并安装有Git</p><h3 id="第一步：在GitHub上创建仓库"><a href="#第一步：在GitHub上创建仓库" class="headerlink" title="第一步：在GitHub上创建仓库"></a>第一步：在GitHub上创建仓库</h3><p>登录GitHub账号，进入如下页面：</p><img src="/2022/02/22/%E4%BB%8E%E9%9B%B6%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/step1.png" class><p>依次按照步骤①：进入Repository仓库；步骤②：创建新的仓库，跳转至仓库设置页面</p><img src="/2022/02/22/%E4%BB%8E%E9%9B%B6%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/step2.png" class><p>用户需要填写仓库名称，该名称命名方式为：用户名+.github.io，然后点击创建按钮完成操作</p><h3 id="第二步：安装Hexo"><a href="#第二步：安装Hexo" class="headerlink" title="第二步：安装Hexo"></a>第二步：安装Hexo</h3><p>1.首先在电脑磁盘上创建一个用于存放博客文件的文件夹（eg.”E:\myBlog”）;然后进入myBlog文件夹，鼠标右键弹出菜单栏，点击Git Bash Here（已安装Git前提下才有）<br>2.输入npm命令（安装并配置好Node.js）安装Hexo：</p><figure class="highlight avrasm"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><pre><code class="hljs avrasm">npm install -g hexo-<span class="hljs-keyword">cli</span><br></code></pre></td></tr></table></figure><p>3.安装完成后初始化博客，输入命令：</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs csharp">hexo <span class="hljs-keyword">init</span> <br></code></pre></td></tr></table></figure><p>此时在我们创建的博客文件夹中会生成多个文件及文件夹<br>4.完成博客静态部署，输入命令：</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">hexo g</span> <br></code></pre></td></tr></table></figure><p>将部署的文件自动转入public文件夹中<br>5.至此个人博客网页已完成部署，输入命令：</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">hexo s</span> <br></code></pre></td></tr></table></figure><p>启动服务，此时在浏览器输入( <code>http://localhost:4000</code> )就可以显示出Hexo初始页面<br>如果想对Hexo操作指令不清楚的，可以查看<a href="https://blog.csdn.net/dxxzst/article/details/76135935"><em><strong>Hexo常用命令操作及作用</strong></em></a> 帮助你更好地理解</p><h3 id="第三步：生成SSH添加到GitHub"><a href="#第三步：生成SSH添加到GitHub" class="headerlink" title="第三步：生成SSH添加到GitHub"></a>第三步：生成SSH添加到GitHub</h3><p>如果我们不生成SSH并添加到GitHub，会出现博客部署时报错：<code>git@github.com: Permission denied (publickey)</code><br>1.首先在我们创建的博客文件夹（myBlog）中右击Git Bash Here进入命令界面<br>2.验证邮箱、用户名与GitHub注册时输入是否一致，输入命令：</p><figure class="highlight brainfuck"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs brainfuck"><span class="hljs-comment">git</span> <span class="hljs-comment">config</span> --<span class="hljs-comment">global</span> --<span class="hljs-comment">list</span><br></code></pre></td></tr></table></figure><div align="center"><img src="/2022/02/22/%E4%BB%8E%E9%9B%B6%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/step5.png" class></div>3.邮箱与用户名跟第一步创建仓库使用的账号不一致时，输入命令：<figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs stylus">git config <span class="hljs-attr">--global</span> user<span class="hljs-selector-class">.name</span> <span class="hljs-string">&quot;yourname&quot;</span><br>git config <span class="hljs-attr">--global</span> user<span class="hljs-selector-class">.email</span> <span class="hljs-string">&quot;youremail&quot;</span><br></code></pre></td></tr></table></figure>设置全局用户名和邮箱，其中邮箱和用户名在GitHub主页按照步骤①②③查看<img src="/2022/02/22/%E4%BB%8E%E9%9B%B6%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/step6.png" class>4.生成新密钥，输入命令：<figure class="highlight excel"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs excel">ssh-keygen -<span class="hljs-built_in">t</span> rsa -C <span class="hljs-string">&quot;youremail&quot;</span><br></code></pre></td></tr></table></figure>接下来命令界面会出现如下提示<blockquote><p>$ ssh-keygen -t rsa -C “youremail”<br>Generating public&#x2F;private rsa key pair.<br>Enter file in which to save the key (&#x2F;c&#x2F;Users&#x2F;jmh1998&#x2F;.ssh&#x2F;id_rsa):</p></blockquote>表示接下来生成的公钥和私钥均存放在 C:/Users/jmh1998/.ssh/ 文件夹下，此时用户仅需点回车即可当文件已经存在时，命令行会提示<blockquote><p>&#x2F;c&#x2F;Users&#x2F;jmh1998&#x2F;.ssh&#x2F;id_rsa already exists.<br>Overwrite (y&#x2F;n)? y</p></blockquote>输入y并回车即可完成文件的覆盖接下来，命令行会提示<blockquote><p>Enter passphrase (empty for no passphrase):<br>Enter same passphrase again:</p></blockquote>表示用户需要设置密码，此时用户点击两次回车即可最终新的密钥生成成功，命令行提示如下<blockquote><p>Your identification has been saved in &#x2F;c&#x2F;Users&#x2F;jmh1998&#x2F;.ssh&#x2F;id_rsa.<br>Your public key has been saved in &#x2F;c&#x2F;Users&#x2F;jmh1998&#x2F;.ssh&#x2F;id_rsa.pub.<br>The key fingerprint is:</p></blockquote>5.在 c:/Users/jmh1998/.ssh/ 文件夹下打开id_rsa.pub（公钥）并复制其中的内容<br>6.在GitHub个人主页中找到SSH Keys设置选项<img src="/2022/02/22/%E4%BB%8E%E9%9B%B6%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/step7.png" class>然后将自己新生成的id_rsa.pub（公钥）信息添加进去<img src="/2022/02/22/%E4%BB%8E%E9%9B%B6%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/step8.png" class>7.最终在Git Bash中可以查看是否成功，输入命令：<figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-attribute">ssh</span> -T git<span class="hljs-variable">@github</span>.com<br></code></pre></td></tr></table></figure>如果测试通了则会显示<blockquote><p>Hi xxx You’ve successfully authenticated….</p></blockquote>如果不通则通过下面两个步骤进行操作<figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs arcade">ssh-agent -s<br>ssh-add ~<span class="hljs-regexp">/.ssh/i</span>d_rsa<br></code></pre></td></tr></table></figure><h3 id="第四步：将Hexo部署到GitHub上"><a href="#第四步：将Hexo部署到GitHub上" class="headerlink" title="第四步：将Hexo部署到GitHub上"></a>第四步：将Hexo部署到GitHub上</h3><p>第二步完成后我们当前仅可以在本机访问与操作博客网页，因此我们需要把搭建好的Hexo框架部署到步骤一创建好的仓库上<br>1.首先在我们创建的博客文件夹（myBlog）中找到_config.yml并打开（notepad++等）</p><blockquote><p>_config.yml配置了与博客相关的内容，关于文件内部配置参数详细解释可以参考<a href="https://blog.csdn.net/zemprogram/article/details/104288872">_config.yml配置教程</a></p></blockquote><p>找到文件底部#Deployment配置参数，并设置type、repository与branch如图：</p><img src="/2022/02/22/%E4%BB%8E%E9%9B%B6%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/step3.png" class><p>其中type为部署的方法，repository为部署的仓库名称(即我们此前创建的仓库clone地址)，branch为分支(默认主支master)<br><em><strong>注意：</strong></em> type、repository、branch这些属性后面冒号要与git等相隔一个空格；respository此处属性应该按照图示设置，旧版本的*http：&#x2F;&#x2F;*形式不正确</p><p>2.回到本机博客文件夹，右击Git Bash Here，安装Git部署插件，输入命令：</p><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ada">npm install hexo-deployer-git <span class="hljs-comment">--save</span><br></code></pre></td></tr></table></figure><p>3.最后依次输入命令：</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs awk">hexo clean<span class="hljs-regexp">//</span>清除缓存文件 db.json 和已生成的静态文件 public<br>hexo g<span class="hljs-regexp">//</span>生成网站静态文件到默认设置的 public 文件夹<br>hexo d<span class="hljs-regexp">//</span>自动生成网站静态文件，并部署到设定的仓库<br></code></pre></td></tr></table></figure><p>部署成功后，在Git Bash中看到如下图表明博客在GitHub仓库部署成功：</p><img src="/2022/02/22/%E4%BB%8E%E9%9B%B6%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/step4.png" class><p>完成上述步骤后，打开浏览器，输入网址：<code>https://your_user_name.github.io</code> (此处为 minghuijia.github.io) 可以代替 <code>http://localhost:4000</code> 打开博客</p><h3 id="第五步：购买-x2F-解析域名"><a href="#第五步：购买-x2F-解析域名" class="headerlink" title="第五步：购买&#x2F;解析域名"></a>第五步：购买&#x2F;解析域名</h3><p>至此，我们已经可以通过 <code>https://minghuijia.github.io</code> 进行博客访问。但是为了方便记忆，我们可以在阿里云上购买一个域名。具体操作可以下载阿里云APP，并完成注册和实名认证进行购买<br>下面以阿里云为例<br>1.首先进入阿里云控制台首页</p><img src="/2022/02/22/%E4%BB%8E%E9%9B%B6%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/step9.png" class><p>然后点击“域名”进入域名控制台，对购买的域名进行解析</p><img src="/2022/02/22/%E4%BB%8E%E9%9B%B6%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/step10.png" class><p>我们需要添加3个解析路线<br>其中两个选择 <em><strong>A</strong></em> 记录类型，解析路线分别填写192.30.252.153 和 192.30.252.154（这是GitHub服务器的IPV4地址），解析路线选择默认<br>另一个选择 <em><strong>CNAME</strong></em> 记录类型，解析路线填写GitHub仓库访问的地址（eg. minghuijia.github.io）</p><img src="/2022/02/22/%E4%BB%8E%E9%9B%B6%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/step11.png" class><p>至此，在阿里云上的域名解析完成<br>2.接下来我们需要在本机创建存放博客框架的文件夹内（myBlog）打开source文件夹，创建一个名为 CNAME 的文件 <em><strong>切记CNAME文件没有后缀</strong></em> </p><img src="/2022/02/22/%E4%BB%8E%E9%9B%B6%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/step12.png" class><p>3.在文件内写入自己的域名。(不要加www否则每次访问都必须加www，但如果不带有www，以后访问的时候带不带www都可以访问)</p><div align="center"><img src="/2022/02/22/%E4%BB%8E%E9%9B%B6%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/step13.png" class title="align&#x3D;center"></div>4.回到myBlog文件夹下，依次输入<figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">hexo clean</span><br><span class="hljs-attribute">hexo g</span><br><span class="hljs-attribute">hexo d</span><br></code></pre></td></tr></table></figure>打开GitHub，查看CNAME文件是否在项目中。若没有该文件，则点击 Add file，自行添加即可<p>最终，你可以用自己申请的域名进行访问个人博客了！</p>]]></content>
    
    
    <categories>
      
      <category>hexo</category>
      
    </categories>
    
    
    <tags>
      
      <tag>hexo</tag>
      
      <tag>github</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>vs2017+Qt创建Qtdll项目并调用</title>
    <link href="/2022/01/22/vs2017-Qt%E5%88%9B%E5%BB%BAQtdll%E9%A1%B9%E7%9B%AE%E5%B9%B6%E8%B0%83%E7%94%A8/"/>
    <url>/2022/01/22/vs2017-Qt%E5%88%9B%E5%BB%BAQtdll%E9%A1%B9%E7%9B%AE%E5%B9%B6%E8%B0%83%E7%94%A8/</url>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>将一些公用的工具函数可以进行封装并生成Dll，方便组内成员直接调用，提高开发效率</p><span id="more"></span><h1 id="创建Qtdll项目"><a href="#创建Qtdll项目" class="headerlink" title="创建Qtdll项目"></a>创建Qtdll项目</h1><ol><li><p>按照如下图方式在 vs2017 中创建一个Qtdll项目</p><img src="/2022/01/22/vs2017-Qt%E5%88%9B%E5%BB%BAQtdll%E9%A1%B9%E7%9B%AE%E5%B9%B6%E8%B0%83%E7%94%A8/step1.png" class><p>项目创建成功后会自动生成两个.h文件和一个.cpp文件如下图。<strong>此外刚创建项目后include部分会报错，需要增加两行代码<code>#include &lt;iostream&gt;</code>;<code>using namespcae std;</code></strong></p><img src="/2022/01/22/vs2017-Qt%E5%88%9B%E5%BB%BAQtdll%E9%A1%B9%E7%9B%AE%E5%B9%B6%E8%B0%83%E7%94%A8/step2.png" class></li><li><p>在创建的Qtdll项目中编写测试函数（求和函数）</p><figure class="highlight reasonml"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></div></td><td class="code"><pre><code class="hljs reasonml"><span class="hljs-keyword">class</span> QTCLASSLIBRARY1_EXPORT QtClassLibrary1<br>&#123;<br>public:<br><span class="hljs-constructor">QtClassLibrary1()</span>;<br><span class="hljs-built_in">int</span> <span class="hljs-constructor">Add(<span class="hljs-params">int</span> <span class="hljs-params">x</span>, <span class="hljs-params">int</span> <span class="hljs-params">y</span>)</span>;<br>&#125;;<br><br><span class="hljs-built_in">int</span> QtClassLibrary1::<span class="hljs-constructor">Add(<span class="hljs-params">int</span> <span class="hljs-params">x</span>, <span class="hljs-params">int</span> <span class="hljs-params">y</span>)</span><br>&#123;<br>return x + y;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>在vs里面的解决方案资源管理器栏内右键点击<code>解决方案</code>，选择<code>生成解决方案</code>，成功后会看到如下界面</p><img src="/2022/01/22/vs2017-Qt%E5%88%9B%E5%BB%BAQtdll%E9%A1%B9%E7%9B%AE%E5%B9%B6%E8%B0%83%E7%94%A8/step3.png" class><p>同时在Qtdll项目<code>x64\Debug</code>路径下可以看到生成的文件（.dll与.Lib）</p><img src="/2022/01/22/vs2017-Qt%E5%88%9B%E5%BB%BAQtdll%E9%A1%B9%E7%9B%AE%E5%B9%B6%E8%B0%83%E7%94%A8/step4.png" class></li></ol><h1 id="创建调用Qtdll的项目"><a href="#创建调用Qtdll的项目" class="headerlink" title="创建调用Qtdll的项目"></a>创建调用Qtdll的项目</h1><ol><li><p>为了方便期间，创建一个QtConsoleApplication项目对生成的Qtdll进行调用</p><img src="/2022/01/22/vs2017-Qt%E5%88%9B%E5%BB%BAQtdll%E9%A1%B9%E7%9B%AE%E5%B9%B6%E8%B0%83%E7%94%A8/step5.png" class></li><li><p>将Qtdll项目的中的两个.h文件（<code>QtClassLibrary1.h</code>,<code>qtclasslibrary1_global.h</code>）以及.lib文件（<code>QtClassLibrary1.lib</code>）移动到QtConsoleApplication项目的如下图位置</p><img src="/2022/01/22/vs2017-Qt%E5%88%9B%E5%BB%BAQtdll%E9%A1%B9%E7%9B%AE%E5%B9%B6%E8%B0%83%E7%94%A8/step6.png" class></li><li><p>将Qtdll项目的中的.dll文件（<code>QtClassLibrary1.dll</code>）移动到QtConsoleApplication项目的如下图位置</p><img src="/2022/01/22/vs2017-Qt%E5%88%9B%E5%BB%BAQtdll%E9%A1%B9%E7%9B%AE%E5%B9%B6%E8%B0%83%E7%94%A8/step7.png" class></li><li><p>在QtConsoleApplication项目中添加头文件（<code>QtClassLibrary1.h</code>,<code>qtclasslibrary1_global.h</code>）与lib文件（<code>QtClassLibrary1.lib</code>），并调用Dll</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;QtCore/QCoreApplication&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;QtClassLibrary1.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;qtclasslibrary1_global.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;qdebug.h&quot;</span></span><br><br><span class="hljs-meta">#<span class="hljs-keyword">pragma</span> comment(lib,<span class="hljs-string">&quot;QtClassLibrary1.lib&quot;</span>)</span><br><span class="hljs-meta">#<span class="hljs-keyword">pragma</span> execution_character_set(<span class="hljs-string">&quot;utf-8&quot;</span>)</span><br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">(<span class="hljs-type">int</span> argc, <span class="hljs-type">char</span> *argv[])</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-function">QCoreApplication <span class="hljs-title">a</span><span class="hljs-params">(argc, argv)</span></span>;<br>QtClassLibrary1 dll;<br><span class="hljs-built_in">qDebug</span>() &lt;&lt; <span class="hljs-string">&quot;加法&quot;</span> &lt;&lt; dll.<span class="hljs-built_in">Add</span>(<span class="hljs-number">56</span>, <span class="hljs-number">45</span>);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><img src="/2022/01/22/vs2017-Qt%E5%88%9B%E5%BB%BAQtdll%E9%A1%B9%E7%9B%AE%E5%B9%B6%E8%B0%83%E7%94%A8/step8.png" class></li></ol><h1 id="补充知识"><a href="#补充知识" class="headerlink" title="补充知识"></a>补充知识</h1><ol><li>导入dll库<figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs arduino"><span class="hljs-meta">#<span class="hljs-keyword">pragma</span> comment(lib,<span class="hljs-string">&quot;QtClassLibrary1.lib&quot;</span>)</span><br></code></pre></td></tr></table></figure></li></ol><ul><li><strong>这是告诉编译器在编译形成的.obj文件和.exe文件中加一条信息，使得链接器在链接库的时候要去找QtClassLibrary1.lib这个库，而不是先去找别的库</strong></li><li><strong>#pragma comment(lib, libname)告诉链接器将<code>libname</code>库添加到库依赖关系列表中，与添加到项目属性中的操作一样 Linker-&gt;Input-&gt;Additional dependencies</strong></li></ul><ol start="2"><li>解决源代码中有中文字符无法识别问题<figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs arduino"><span class="hljs-meta">#<span class="hljs-keyword">pragma</span> execution_character_set(<span class="hljs-string">&quot;utf-8&quot;</span>)</span><br></code></pre></td></tr></table></figure></li></ol><ul><li><strong>编译器将源代码中的窄字符和窄字符串文本编码为可执行文件中UTF-8，缺少这行代码就无法识别中文</strong></li></ul>]]></content>
    
    
    <categories>
      
      <category>Qt</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Qt</tag>
      
      <tag>动态链接库</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>GDAL分块读写影像</title>
    <link href="/2022/01/20/GDAL%E5%88%86%E5%9D%97%E8%AF%BB%E5%86%99%E5%BD%B1%E5%83%8F/"/>
    <url>/2022/01/20/GDAL%E5%88%86%E5%9D%97%E8%AF%BB%E5%86%99%E5%BD%B1%E5%83%8F/</url>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>在使用GDAL读取GeoTiff影像时针对特大的影像，有时为了减少内存消耗，对图像进行分块读取很有必要</p><span id="more"></span><h1 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h1><figure class="highlight zephir"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></div></td><td class="code"><pre><code class="hljs zephir"><span class="hljs-comment">// gdal分块并行处理tif影像</span><br>void GDALBlockReadWrite(<span class="hljs-keyword">string</span> openFilePath, <span class="hljs-keyword">string</span> saveFilePath, <span class="hljs-keyword">int</span> nBlockSize)<br>&#123;<br><span class="hljs-comment">//打开影像</span><br>GDALDataset *poSrcDS = (GDALDataset*)GDALOpen(openFilePath.c_str(), GA_ReadOnly);<br><span class="hljs-keyword">if</span> (poSrcDS == NULL)<span class="hljs-comment">//影像打开失败</span><br><span class="hljs-keyword">return</span> ;<br><br><span class="hljs-comment">//获取图像的高宽,夜光影像只有一个波段</span><br><span class="hljs-keyword">int</span> nXSize = poSrcDS-&gt;GetRasterXSize();<span class="hljs-comment">//列</span><br><span class="hljs-keyword">int</span> nYSize = poSrcDS-&gt;GetRasterYSize();<span class="hljs-comment">//行</span><br><span class="hljs-keyword">int</span> nBands = poSrcDS-&gt;GetRasterCount();<br><br><span class="hljs-comment">//获取输入影像仿射变换参数</span><br><span class="hljs-keyword">double</span> adfGeotransform[<span class="hljs-number">6</span>] = &#123; <span class="hljs-number">0</span> &#125;;<br>poSrcDS-&gt;GetGeoTransform(adfGeotransform);<br><br><span class="hljs-comment">//获取输入影像空间参考</span><br><span class="hljs-keyword">const</span> <span class="hljs-keyword">char</span>* pszProj = poSrcDS-&gt;GetProjectionRef();<br><br><span class="hljs-comment">//获取波段测试</span><br>GDALRasterBand *poBand = poSrcDS-&gt;GetRasterBand(<span class="hljs-number">1</span>);<br><span class="hljs-keyword">if</span> (poBand == NULL)<br>&#123;<br>GDALClose((GDALDatasetH)poSrcDS);<br><span class="hljs-keyword">return</span> ;<br>&#125;<br><span class="hljs-keyword">int</span> dataType = poBand-&gt;GetRasterDataType();<span class="hljs-comment">//获取波段1数据的类型</span><br><br><span class="hljs-comment">//创建tif驱动和数据集</span><br><span class="hljs-keyword">string</span> format = <span class="hljs-string">&quot;GTiff&quot;</span>;<br>GDALDriver *saveDriver = GetGDALDriverManager()-&gt;GetDriverByName(format.c_str());<br>GDALDataset *saveDataset = saveDriver-&gt;Create(saveFilePath.c_str(), nXSize, nYSize, nBands, GDT_Float32, NULL);<br>saveDataset-&gt;SetGeoTransform(adfGeotransform);<br>saveDataset-&gt;SetProjection(pszProj);<br><br><span class="hljs-comment">//分配分块读取数据缓存</span><br><span class="hljs-keyword">float</span> *pafScan = <span class="hljs-keyword">new</span> <span class="hljs-keyword">float</span>[nBlockSize*nBlockSize*nBands];<br><br><span class="hljs-comment">//定义读取影像波段顺序</span><br><span class="hljs-keyword">int</span> *pBandMaps = <span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[nBands];<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; nBands; i++)<br>pBandMaps[i] = i + <span class="hljs-number">1</span>;<br><br><span class="hljs-comment">//循环分块处理</span><br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> r = <span class="hljs-number">0</span>; r &lt; nYSize; r += nBlockSize)<br>&#123;<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> c = <span class="hljs-number">0</span>; c &lt; nXSize; c += nBlockSize)<br>&#123;<br><span class="hljs-comment">//两个变量记录分块大小</span><br><span class="hljs-keyword">int</span> nXBlock = nBlockSize;<br><span class="hljs-keyword">int</span> nYBlock = nBlockSize;<br><br><span class="hljs-comment">//处理最后尺寸不足nBlockSize</span><br><span class="hljs-keyword">if</span> (r + nBlockSize &gt; nYSize)<br>nYBlock = nYSize - r;<br><span class="hljs-keyword">if</span> (c + nBlockSize &gt; nXSize)<br>nXBlock = nXSize - c;<br><br><span class="hljs-comment">//读取原始影像块</span><br>poSrcDS-&gt;RasterIO(GF_Read, c, r, nXBlock, nYBlock, pafScan, nXBlock, nYBlock, GDT_Float32, nBands, pBandMaps, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, NULL);<br><br><span class="hljs-comment">//分块读取的内容写入影像</span><br>saveDataset-&gt;RasterIO(GF_Write, c, r, nXBlock, nYBlock, pafScan, nXBlock, nYBlock, GDT_Float32, nBands, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>);<br>GDALFlushCache(saveDataset);<br>&#125;<br>&#125;<br><br>delete[]pBandMaps;<br>delete[]pafScan;<br>GDALClose((GDALDatasetH)poSrcDS);<br><span class="hljs-comment">//delete[]poSrcDS;</span><br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>GDAL</category>
      
    </categories>
    
    
    <tags>
      
      <tag>GDAL读写</tag>
      
      <tag>C++</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
