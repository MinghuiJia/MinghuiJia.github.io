<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>Git分支多终端工作</title>
    <link href="/2022/02/26/Git%E5%88%86%E6%94%AF%E5%A4%9A%E7%BB%88%E7%AB%AF%E5%B7%A5%E4%BD%9C/"/>
    <url>/2022/02/26/Git%E5%88%86%E6%94%AF%E5%A4%9A%E7%BB%88%E7%AB%AF%E5%B7%A5%E4%BD%9C/</url>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>由于hexo d将个人博客部署在GitHub仓库前需要进行编译，将Markdown等文件进行编译后生成网页并上传，并不包含源文件。因此，当在某个电脑环境下配置好Hexo+GitHub个人博客并进行了一段时间写作后，需要多终端切换工作，这时就需要在Git上进行上传分支</p><span id="more"></span><h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>本篇博客实现了简单在新电脑上配置，并从GitHub上把文件Clone下来就可以实现多终端无缝切换</p><h1 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h1><p>采用hexo d对博客内容上传部署到GitHub的过程，实际上是hexo编译后的文件上传，没有源文件。在上传的GitHub仓库可以看到，上传的文件其实是本地目录中.deploy_git文件夹里面的文件，而source、themes、node_modules等文件都没有同步上传到GitHub。利用git的分支管理可以将源文件上传到GitHub</p><h1 id="分支上传"><a href="#分支上传" class="headerlink" title="分支上传"></a>分支上传</h1><h2 id="创建分支"><a href="#创建分支" class="headerlink" title="创建分支"></a>创建分支</h2><ol><li><p>首先需要登录自己的GitHub主页，找到对应的repositories仓库。然后在按照如下图步骤创建一个hexo分支：</p><img src="/2022/02/26/Git%E5%88%86%E6%94%AF%E5%A4%9A%E7%BB%88%E7%AB%AF%E5%B7%A5%E4%BD%9C/step1.png" class></li><li><p>然后在仓库的setting中，设置新创建的hexo分支为默认分支，如下图操作：</p><img src="/2022/02/26/Git%E5%88%86%E6%94%AF%E5%A4%9A%E7%BB%88%E7%AB%AF%E5%B7%A5%E4%BD%9C/step2.png" class><p>设置为默认分支的目的是为了方便同步，不用指定分支即可更新源码文件</p></li></ol><h2 id="本地克隆"><a href="#本地克隆" class="headerlink" title="本地克隆"></a>本地克隆</h2><ol><li><p>分支创建并设置好后，在本地任意目录下，通过Git Bash，输入如下指令：</p><figure class="highlight crmsh"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><pre><code class="hljs crmsh">git <span class="hljs-keyword">clone</span> <span class="hljs-title">git</span>@github.com:MinghuiJia/minghuijia.github.io.git<br></code></pre></td></tr></table></figure><p>将GitHub仓库中的文件克隆到本地。此时由于已经设置了默认分支是hexo，所以只克隆hexo分支下的文件</p></li><li><p>然后在本地已经克隆好的文件夹（minghuijia.github.io）中删除<em><strong>.git文件夹</strong></em>以外的所有文件，如下图红色框起来的文件均需要删除</p><img src="/2022/02/26/Git%E5%88%86%E6%94%AF%E5%A4%9A%E7%BB%88%E7%AB%AF%E5%B7%A5%E4%BD%9C/step3.png" class></li><li><p>将本地之前写博客的源文件<em><strong>除.deploy_git文件夹</strong></em>外全部拷贝过来。<em><strong>注意：拷贝到clone文件夹（minghuijia.github.io）中的源文件应包含一个.gitignore文件，用于忽略一些不需要的文件，如果没有该文件的话，自己创建一个并粘贴如下文字</strong></em>：</p><figure class="highlight x86asm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs x86asm"><span class="hljs-meta">.DS_Store</span><br>Thumbs<span class="hljs-number">.</span><span class="hljs-built_in">db</span><br><span class="hljs-built_in">db</span><span class="hljs-number">.</span>json<br>*.log<br>node_modules/<br><span class="hljs-meta">public</span>/<br><span class="hljs-meta">.deploy</span>*/<br></code></pre></td></tr></table></figure><img src="/2022/02/26/Git%E5%88%86%E6%94%AF%E5%A4%9A%E7%BB%88%E7%AB%AF%E5%B7%A5%E4%BD%9C/step4.png" class><p>另外需要注意，<em><strong>如果theme是克隆来的，应该将主题文件夹中的.git文件夹删掉</strong></em>。因为git不能嵌套上传，会导致上传时报错，无法上传主题文件，导致配置在其余终端不能用</p><img src="/2022/02/26/Git%E5%88%86%E6%94%AF%E5%A4%9A%E7%BB%88%E7%AB%AF%E5%B7%A5%E4%BD%9C/step5.png" class></li></ol><h2 id="上传分支"><a href="#上传分支" class="headerlink" title="上传分支"></a>上传分支</h2><p>上述操作完成后，Git Bash在当前文件夹下输入如下指令上传源文件：</p><figure class="highlight avrasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs avrasm">git <span class="hljs-keyword">add</span> .<br>git commit -m <span class="hljs-string">&quot;add branch&quot;</span><br>git <span class="hljs-keyword">push</span><br></code></pre></td></tr></table></figure><p>上传结束后可以在GitHub仓库的hexo分支查看，可以发现node_modules、public、db.json被忽略而未上传（这些文件夹会在新电脑配置时自动创建）<br>*<strong>注意:node_modules文件夹中的文件会自动生成，但是图片加载的hexo-asset-image&#x2F;index.js文件也是默认创建，如果不按照本地图片无法显示教程中对js文件修改会导致图片路径错误而无法加载图片</strong></p><h1 id="更换电脑操作"><a href="#更换电脑操作" class="headerlink" title="更换电脑操作"></a>更换电脑操作</h1><h2 id="基本环境配置"><a href="#基本环境配置" class="headerlink" title="基本环境配置"></a>基本环境配置</h2><ol><li>安装Git</li><li><a href="https://www.runoob.com/nodejs/nodejs-install-setup.html">安装Node.js</a><a href="https://www.cnblogs.com/quwaner/p/11541445.html">npm安装教程</a></li><li>设置Git全局邮箱和用户名<figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs stylus">git config <span class="hljs-attr">--global</span> user<span class="hljs-selector-class">.name</span> <span class="hljs-string">&quot;xxx&quot;</span><br>git config <span class="hljs-attr">--global</span> user<span class="hljs-selector-class">.email</span> <span class="hljs-string">&quot;xxx&quot;</span><br></code></pre></td></tr></table></figure></li><li>设置ssh key<figure class="highlight excel"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs excel">ssh-keygen -<span class="hljs-built_in">t</span> rsa -C <span class="hljs-string">&quot;youremail&quot;</span><br></code></pre></td></tr></table></figure>rsa生成后填到GitHubSSH中，并验证是否成功<figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-attribute">ssh</span> -T git<span class="hljs-variable">@github</span>.com<br></code></pre></td></tr></table></figure></li><li>安装hexo，输入如下指令：<figure class="highlight avrasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs avrasm">npm install hexo-<span class="hljs-keyword">cli</span> -g<br></code></pre></td></tr></table></figure></li><li>由于博客框架已经搭建好，当前目的只是更换终端设备，因此不需要初始化</li></ol><h2 id="文件克隆"><a href="#文件克隆" class="headerlink" title="文件克隆"></a>文件克隆</h2><ol><li>在新的终端选择任意文件夹，打开Git Bash，并输入如下指令完成克隆：<figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs crmsh">git <span class="hljs-keyword">clone</span> <span class="hljs-title">git</span>@xxxx<br></code></pre></td></tr></table></figure></li><li>进入到克隆下来的文件夹，并完成如下指令安装：<figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs cmake">cd xxx.github.io<br>npm <span class="hljs-keyword">install</span><span class="hljs-comment">#执行之后会创建node_modules文件夹</span><br>npm <span class="hljs-keyword">install</span> hexo-deployer-git --save<span class="hljs-comment">#执行后会创建.deploy_git文件夹</span><br></code></pre></td></tr></table></figure></li><li>然后使用hexo命令生成和部署：<figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-attribute">hexo</span> g<span class="hljs-comment">#执行之后会创建public文件夹</span><br>hexo d<span class="hljs-comment">#执行后会将新的文件部署到GitHubmaster分支</span><br></code></pre></td></tr></table></figure></li><li>在写文章之前，记得检查node_modules文件夹中hexo-asset-image&#x2F;index.js文件，需要对该文件的代码进行修改（具体参考本地图片加载博客教程），保证图片加载时路径正确</li><li>最后即可进行新的博客撰写<figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs actionscript">hexo <span class="hljs-keyword">new</span> newpage<br></code></pre></td></tr></table></figure></li></ol><h2 id="博客写完后的操作"><a href="#博客写完后的操作" class="headerlink" title="博客写完后的操作"></a>博客写完后的操作</h2><ol><li>每次文章写完后，要把源文件上传到hexo分支<figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">git <span class="hljs-keyword">add</span> .<br>git <span class="hljs-keyword">commit</span> -m &quot;xxx<br>git push<br></code></pre></td></tr></table></figure></li><li>如果终端已经执行过1操作一次，本地电脑上clone文件夹，后续更新源文件即可使用如下指令和远端同步即可：<figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">git pull</span><br></code></pre></td></tr></table></figure></li></ol>]]></content>
    
    
    <categories>
      
      <category>hexo</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Git</tag>
      
      <tag>多终端</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hexo写文章时引用本地图片无法显示</title>
    <link href="/2022/02/22/Hexo%E5%86%99%E6%96%87%E7%AB%A0%E6%97%B6%E5%BC%95%E7%94%A8%E6%9C%AC%E5%9C%B0%E5%9B%BE%E7%89%87%E6%97%A0%E6%B3%95%E6%98%BE%E7%A4%BA/"/>
    <url>/2022/02/22/Hexo%E5%86%99%E6%96%87%E7%AB%A0%E6%97%B6%E5%BC%95%E7%94%A8%E6%9C%AC%E5%9C%B0%E5%9B%BE%E7%89%87%E6%97%A0%E6%B3%95%E6%98%BE%E7%A4%BA/</url>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>利用搭建好的博客进行文章编写过程中，文章内容需要展示图片，但引用本地图片时总显示不出来。本篇博客主要解决利用Hexo写文章引用本地图片无法显示的问题</p><span id="more"></span><h1 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h1><p>当用户利用Hexo编写文章引入图片时，常常会出现如下情况：</p><img src="/2022/02/22/Hexo%E5%86%99%E6%96%87%E7%AB%A0%E6%97%B6%E5%BC%95%E7%94%A8%E6%9C%AC%E5%9C%B0%E5%9B%BE%E7%89%87%E6%97%A0%E6%B3%95%E6%98%BE%E7%A4%BA/step1.png" class><h1 id="插件安装与配置"><a href="#插件安装与配置" class="headerlink" title="插件安装与配置"></a>插件安装与配置</h1><ol><li><p>首先需要安装一个图片路径转换的插件，叫<em><strong>hexo-asset-image</strong></em> 。在Git Bash界面输入命令：</p><figure class="highlight awk"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><pre><code class="hljs awk">npm install https:<span class="hljs-regexp">//gi</span>thub.com<span class="hljs-regexp">/CodeFalling/</span>hexo-asset-image --save<br></code></pre></td></tr></table></figure></li><li><p>然后修改myBlog&#x2F;node_modules&#x2F;hexo-asset-image&#x2F;index.js文件中的代码，将内容更换为下面代码</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-meta">&#x27;use strict&#x27;</span>;<br><span class="hljs-keyword">var</span> cheerio = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;cheerio&#x27;</span>);<br><br><span class="hljs-comment">// http://stackoverflow.com/questions/14480345/how-to-get-the-nth-occurrence-in-a-string</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">getPosition</span>(<span class="hljs-params">str, m, i</span>) &#123;<br>  <span class="hljs-keyword">return</span> str.<span class="hljs-title function_">split</span>(m, i).<span class="hljs-title function_">join</span>(m).<span class="hljs-property">length</span>;<br>&#125;<br><br><span class="hljs-keyword">var</span> version = <span class="hljs-title class_">String</span>(hexo.<span class="hljs-property">version</span>).<span class="hljs-title function_">split</span>(<span class="hljs-string">&#x27;.&#x27;</span>);<br>hexo.<span class="hljs-property">extend</span>.<span class="hljs-property">filter</span>.<span class="hljs-title function_">register</span>(<span class="hljs-string">&#x27;after_post_render&#x27;</span>, <span class="hljs-keyword">function</span>(<span class="hljs-params">data</span>)&#123;<br>  <span class="hljs-keyword">var</span> config = hexo.<span class="hljs-property">config</span>;<br>  <span class="hljs-keyword">if</span>(config.<span class="hljs-property">post_asset_folder</span>)&#123;<br><span class="hljs-keyword">var</span> link = data.<span class="hljs-property">permalink</span>;<br><span class="hljs-keyword">if</span>(version.<span class="hljs-property">length</span> &gt; <span class="hljs-number">0</span> &amp;&amp; <span class="hljs-title class_">Number</span>(version[<span class="hljs-number">0</span>]) == <span class="hljs-number">3</span>)<br>   <span class="hljs-keyword">var</span> beginPos = <span class="hljs-title function_">getPosition</span>(link, <span class="hljs-string">&#x27;/&#x27;</span>, <span class="hljs-number">1</span>) + <span class="hljs-number">1</span>;<br><span class="hljs-keyword">else</span><br>   <span class="hljs-keyword">var</span> beginPos = <span class="hljs-title function_">getPosition</span>(link, <span class="hljs-string">&#x27;/&#x27;</span>, <span class="hljs-number">3</span>) + <span class="hljs-number">1</span>;<br><span class="hljs-comment">// In hexo 3.1.1, the permalink of &quot;about&quot; page is like &quot;.../about/index.html&quot;.</span><br><span class="hljs-keyword">var</span> endPos = link.<span class="hljs-title function_">lastIndexOf</span>(<span class="hljs-string">&#x27;/&#x27;</span>) + <span class="hljs-number">1</span>;<br>link = link.<span class="hljs-title function_">substring</span>(beginPos, endPos);<br><br><span class="hljs-keyword">var</span> toprocess = [<span class="hljs-string">&#x27;excerpt&#x27;</span>, <span class="hljs-string">&#x27;more&#x27;</span>, <span class="hljs-string">&#x27;content&#x27;</span>];<br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>; i &lt; toprocess.<span class="hljs-property">length</span>; i++)&#123;<br>  <span class="hljs-keyword">var</span> key = toprocess[i];<br> <br>  <span class="hljs-keyword">var</span> $ = cheerio.<span class="hljs-title function_">load</span>(data[key], &#123;<br><span class="hljs-attr">ignoreWhitespace</span>: <span class="hljs-literal">false</span>,<br><span class="hljs-attr">xmlMode</span>: <span class="hljs-literal">false</span>,<br><span class="hljs-attr">lowerCaseTags</span>: <span class="hljs-literal">false</span>,<br><span class="hljs-attr">decodeEntities</span>: <span class="hljs-literal">false</span><br>  &#125;);<br><br>  $(<span class="hljs-string">&#x27;img&#x27;</span>).<span class="hljs-title function_">each</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;<br><span class="hljs-keyword">if</span> ($(<span class="hljs-variable language_">this</span>).<span class="hljs-title function_">attr</span>(<span class="hljs-string">&#x27;src&#x27;</span>))&#123;<br><span class="hljs-comment">// For windows style path, we replace &#x27;\&#x27; to &#x27;/&#x27;.</span><br><span class="hljs-keyword">var</span> src = $(<span class="hljs-variable language_">this</span>).<span class="hljs-title function_">attr</span>(<span class="hljs-string">&#x27;src&#x27;</span>).<span class="hljs-title function_">replace</span>(<span class="hljs-string">&#x27;\\&#x27;</span>, <span class="hljs-string">&#x27;/&#x27;</span>);<br><span class="hljs-keyword">if</span>(!<span class="hljs-regexp">/http[s]*.*|\/\/.*/</span>.<span class="hljs-title function_">test</span>(src) &amp;&amp;<br>   !<span class="hljs-regexp">/^\s*\//</span>.<span class="hljs-title function_">test</span>(src)) &#123;<br>  <span class="hljs-comment">// For &quot;about&quot; page, the first part of &quot;src&quot; can&#x27;t be removed.</span><br>  <span class="hljs-comment">// In addition, to support multi-level local directory.</span><br>  <span class="hljs-keyword">var</span> linkArray = link.<span class="hljs-title function_">split</span>(<span class="hljs-string">&#x27;/&#x27;</span>).<span class="hljs-title function_">filter</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params">elem</span>)&#123;<br><span class="hljs-keyword">return</span> elem != <span class="hljs-string">&#x27;&#x27;</span>;<br>  &#125;);<br>  <span class="hljs-keyword">var</span> srcArray = src.<span class="hljs-title function_">split</span>(<span class="hljs-string">&#x27;/&#x27;</span>).<span class="hljs-title function_">filter</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params">elem</span>)&#123;<br><span class="hljs-keyword">return</span> elem != <span class="hljs-string">&#x27;&#x27;</span> &amp;&amp; elem != <span class="hljs-string">&#x27;.&#x27;</span>;<br>  &#125;);<br>  <span class="hljs-keyword">if</span>(srcArray.<span class="hljs-property">length</span> &gt; <span class="hljs-number">1</span>)<br>srcArray.<span class="hljs-title function_">shift</span>();<br>  src = srcArray.<span class="hljs-title function_">join</span>(<span class="hljs-string">&#x27;/&#x27;</span>);<br>  $(<span class="hljs-variable language_">this</span>).<span class="hljs-title function_">attr</span>(<span class="hljs-string">&#x27;src&#x27;</span>, config.<span class="hljs-property">root</span> + link + src);<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-property">info</span>&amp;&amp;<span class="hljs-variable language_">console</span>.<span class="hljs-title function_">info</span>(<span class="hljs-string">&quot;update link as:--&gt;&quot;</span>+config.<span class="hljs-property">root</span> + link + src);<br>&#125;<br>&#125;<span class="hljs-keyword">else</span>&#123;<br><span class="hljs-variable language_">console</span>.<span class="hljs-property">info</span>&amp;&amp;<span class="hljs-variable language_">console</span>.<span class="hljs-title function_">info</span>(<span class="hljs-string">&quot;no src attr, skipped...&quot;</span>);<br><span class="hljs-variable language_">console</span>.<span class="hljs-property">info</span>&amp;&amp;<span class="hljs-variable language_">console</span>.<span class="hljs-title function_">info</span>($(<span class="hljs-variable language_">this</span>));<br>&#125;<br>  &#125;);<br>  data[key] = $.<span class="hljs-title function_">html</span>();<br>&#125;<br>  &#125;<br>&#125;);<br></code></pre></td></tr></table></figure></li><li><p>打开myBlog文件夹下的_config.yml文件，修改下述内容</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">post_asset_folder:</span> <span class="hljs-literal">true</span><br></code></pre></td></tr></table></figure></li></ol><h1 id="问题解决方法"><a href="#问题解决方法" class="headerlink" title="问题解决方法"></a>问题解决方法</h1><ol><li><p>当上述插件安装并完成配置后，我们在Git Bash中输入如下命令</p><figure class="highlight haxe"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs haxe">hexo <span class="hljs-keyword">new</span> <span class="hljs-type">post</span> article1<br>hexo <span class="hljs-keyword">new</span> <span class="hljs-type">draft</span> article2<br></code></pre></td></tr></table></figure><p>在myBlog&#x2F;source&#x2F;_posts 或myBlog&#x2F;source&#x2F;_drafts 文件夹下会创建article.md文件与article同名文件夹</p><img src="/2022/02/22/Hexo%E5%86%99%E6%96%87%E7%AB%A0%E6%97%B6%E5%BC%95%E7%94%A8%E6%9C%AC%E5%9C%B0%E5%9B%BE%E7%89%87%E6%97%A0%E6%B3%95%E6%98%BE%E7%A4%BA/step2.png" class></li><li><p>将文章需要引用的本地图片，放在同名文章所对应的文件夹下</p><img src="/2022/02/22/Hexo%E5%86%99%E6%96%87%E7%AB%A0%E6%97%B6%E5%BC%95%E7%94%A8%E6%9C%AC%E5%9C%B0%E5%9B%BE%E7%89%87%E6%97%A0%E6%B3%95%E6%98%BE%E7%A4%BA/step3.png" class></li><li><p>在Markdown（文章）文件中需要引入图片的地方添加如下代码：</p><figure class="highlight gcode"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs gcode">&#123;`<span class="hljs-meta">%</span> asset_img example.jpg <span class="hljs-meta">%</span>&#125;<br></code></pre></td></tr></table></figure></li><li><p>当上述操作执行完成，并输入如下命令完成博客部署</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">hexo g</span><br><span class="hljs-attribute">hexo d</span><br></code></pre></td></tr></table></figure><p>在GitHub主页可以看到，html页面与图片均在同一个文件夹中，文件夹命名与文章.md同名</p><img src="/2022/02/22/Hexo%E5%86%99%E6%96%87%E7%AB%A0%E6%97%B6%E5%BC%95%E7%94%A8%E6%9C%AC%E5%9C%B0%E5%9B%BE%E7%89%87%E6%97%A0%E6%B3%95%E6%98%BE%E7%A4%BA/step4.png" class></li><li><p>此时在浏览器浏览文章，可以发现显示图片的源码，在图片加载路径那里找到了与html在同一个文件夹下的图片</p><img src="/2022/02/22/Hexo%E5%86%99%E6%96%87%E7%AB%A0%E6%97%B6%E5%BC%95%E7%94%A8%E6%9C%AC%E5%9C%B0%E5%9B%BE%E7%89%87%E6%97%A0%E6%B3%95%E6%98%BE%E7%A4%BA/step5.png" class><p>它会自动寻找，并补全图片的绝对路径，完成图片加载</p></li></ol><h1 id="图片无法加载的可能原因"><a href="#图片无法加载的可能原因" class="headerlink" title="图片无法加载的可能原因"></a>图片无法加载的可能原因</h1><ol><li><p>本地图片没有上传至GitHub仓库，导致引用无效<br>解决方案：安装插件</p></li><li><p>本地图片没有存放在同名文件夹中<br>解决方案：将需要引用的本地图片存放在与文章名相同的文件夹中</p></li><li><p>图片路径出错<br>解决方案：打开myBlog文件夹下的_config.yml修改下述内容</p><blockquote><p># URL<br>## Set your site url here. For example, if you use GitHub Page, set url as ‘<code>https://username.github.io/project</code>‘<br>url: <code>http://minghuijia.cn/</code> 改成域名访问地址</p></blockquote></li><li><p>相对路径引用的标签插件不当<br>把一个 example.jpg 图片放在资源文件夹中，如果通过使用相对路径的常规 markdown 语法 ![](&#x2F;example.jpg) ，它将不会出现在首页上，需要采用 <em><strong>问题解决方法</strong></em> 5点中的方式</p></li></ol>]]></content>
    
    
    <categories>
      
      <category>hexo</category>
      
    </categories>
    
    
    <tags>
      
      <tag>hexo</tag>
      
      <tag>图片无法加载</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>从零搭建个人博客</title>
    <link href="/2022/02/22/%E4%BB%8E%E9%9B%B6%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/"/>
    <url>/2022/02/22/%E4%BB%8E%E9%9B%B6%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/</url>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>搭建个人博客的初衷是为了记录与分享自己学习的过程。本篇文章记录了从零搭建属于自己博客网站的操作步骤，希望对看到这篇文章的你有所帮助</p><span id="more"></span><h1 id="Hexo搭建"><a href="#Hexo搭建" class="headerlink" title="Hexo搭建"></a>Hexo搭建</h1><p>Hexo是一款基于Node.js的静态博客框架，依赖少易于安装使用，可以方便的生成静态网页托管在GitHub和Coding上，是搭建博客的首选框架。大家可以进入<a href="https://hexo.io/zh-cn/">hexo官网</a> 进行详细查看，因为Hexo的创建者是台湾人，对中文的支持很友好，可以选择中文进行查看<br>本篇教程博客包括三个部分：</p><p>1.Hexo的初级搭建+部署到GitHub仓库+域名绑定<br>2.Hexo基本配置（更换主题等）<br>3.Hexo各种功能的添加（阅读量统计、访问量统计等）</p><h2 id="Hexo的初级搭建-部署到GitHub仓库-域名绑定"><a href="#Hexo的初级搭建-部署到GitHub仓库-域名绑定" class="headerlink" title="Hexo的初级搭建+部署到GitHub仓库+域名绑定"></a>Hexo的初级搭建+部署到GitHub仓库+域名绑定</h2><p>在博客搭建之前，需要具备如下前提：<br>1.安装Node.js并完成相应的环境配置<a href="https://www.runoob.com/nodejs/nodejs-install-setup.html">Node.js安装教程</a><br>2.拥有属于自己的GitHub，并安装有Git</p><h3 id="第一步：在GitHub上创建仓库"><a href="#第一步：在GitHub上创建仓库" class="headerlink" title="第一步：在GitHub上创建仓库"></a>第一步：在GitHub上创建仓库</h3><p>登录GitHub账号，进入如下页面：</p><img src="/2022/02/22/%E4%BB%8E%E9%9B%B6%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/step1.png" class><p>依次按照步骤①：进入Repository仓库；步骤②：创建新的仓库，跳转至仓库设置页面</p><img src="/2022/02/22/%E4%BB%8E%E9%9B%B6%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/step2.png" class><p>用户需要填写仓库名称，该名称命名方式为：用户名+.github.io，然后点击创建按钮完成操作</p><h3 id="第二步：安装Hexo"><a href="#第二步：安装Hexo" class="headerlink" title="第二步：安装Hexo"></a>第二步：安装Hexo</h3><p>1.首先在电脑磁盘上创建一个用于存放博客文件的文件夹（eg.”E:\myBlog”）;然后进入myBlog文件夹，鼠标右键弹出菜单栏，点击Git Bash Here（已安装Git前提下才有）<br>2.输入npm命令（安装并配置好Node.js）安装Hexo：</p><figure class="highlight avrasm"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><pre><code class="hljs avrasm">npm install -g hexo-<span class="hljs-keyword">cli</span><br></code></pre></td></tr></table></figure><p>3.安装完成后初始化博客，输入命令：</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs csharp">hexo <span class="hljs-keyword">init</span> <br></code></pre></td></tr></table></figure><p>此时在我们创建的博客文件夹中会生成多个文件及文件夹<br>4.完成博客静态部署，输入命令：</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">hexo g</span> <br></code></pre></td></tr></table></figure><p>将部署的文件自动转入public文件夹中<br>5.至此个人博客网页已完成部署，输入命令：</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">hexo s</span> <br></code></pre></td></tr></table></figure><p>启动服务，此时在浏览器输入( <code>http://localhost:4000</code> )就可以显示出Hexo初始页面<br>如果想对Hexo操作指令不清楚的，可以查看<a href="https://blog.csdn.net/dxxzst/article/details/76135935"><em><strong>Hexo常用命令操作及作用</strong></em></a> 帮助你更好地理解</p><h3 id="第三步：生成SSH添加到GitHub"><a href="#第三步：生成SSH添加到GitHub" class="headerlink" title="第三步：生成SSH添加到GitHub"></a>第三步：生成SSH添加到GitHub</h3><p>如果我们不生成SSH并添加到GitHub，会出现博客部署时报错：<code>git@github.com: Permission denied (publickey)</code><br>1.首先在我们创建的博客文件夹（myBlog）中右击Git Bash Here进入命令界面<br>2.验证邮箱、用户名与GitHub注册时输入是否一致，输入命令：</p><figure class="highlight brainfuck"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs brainfuck"><span class="hljs-comment">git</span> <span class="hljs-comment">config</span> --<span class="hljs-comment">global</span> --<span class="hljs-comment">list</span><br></code></pre></td></tr></table></figure><div align="center"><img src="/2022/02/22/%E4%BB%8E%E9%9B%B6%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/step5.png" class></div>3.邮箱与用户名跟第一步创建仓库使用的账号不一致时，输入命令：<figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs stylus">git config <span class="hljs-attr">--global</span> user<span class="hljs-selector-class">.name</span> <span class="hljs-string">&quot;yourname&quot;</span><br>git config <span class="hljs-attr">--global</span> user<span class="hljs-selector-class">.email</span> <span class="hljs-string">&quot;youremail&quot;</span><br></code></pre></td></tr></table></figure>设置全局用户名和邮箱，其中邮箱和用户名在GitHub主页按照步骤①②③查看<img src="/2022/02/22/%E4%BB%8E%E9%9B%B6%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/step6.png" class>4.生成新密钥，输入命令：<figure class="highlight excel"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs excel">ssh-keygen -<span class="hljs-built_in">t</span> rsa -C <span class="hljs-string">&quot;youremail&quot;</span><br></code></pre></td></tr></table></figure>接下来命令界面会出现如下提示<blockquote><p>$ ssh-keygen -t rsa -C “youremail”<br>Generating public&#x2F;private rsa key pair.<br>Enter file in which to save the key (&#x2F;c&#x2F;Users&#x2F;jmh1998&#x2F;.ssh&#x2F;id_rsa):</p></blockquote>表示接下来生成的公钥和私钥均存放在 C:/Users/jmh1998/.ssh/ 文件夹下，此时用户仅需点回车即可当文件已经存在时，命令行会提示<blockquote><p>&#x2F;c&#x2F;Users&#x2F;jmh1998&#x2F;.ssh&#x2F;id_rsa already exists.<br>Overwrite (y&#x2F;n)? y</p></blockquote>输入y并回车即可完成文件的覆盖接下来，命令行会提示<blockquote><p>Enter passphrase (empty for no passphrase):<br>Enter same passphrase again:</p></blockquote>表示用户需要设置密码，此时用户点击两次回车即可最终新的密钥生成成功，命令行提示如下<blockquote><p>Your identification has been saved in &#x2F;c&#x2F;Users&#x2F;jmh1998&#x2F;.ssh&#x2F;id_rsa.<br>Your public key has been saved in &#x2F;c&#x2F;Users&#x2F;jmh1998&#x2F;.ssh&#x2F;id_rsa.pub.<br>The key fingerprint is:</p></blockquote>5.在 c:/Users/jmh1998/.ssh/ 文件夹下打开id_rsa.pub（公钥）并复制其中的内容<br>6.在GitHub个人主页中找到SSH Keys设置选项<img src="/2022/02/22/%E4%BB%8E%E9%9B%B6%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/step7.png" class>然后将自己新生成的id_rsa.pub（公钥）信息添加进去<img src="/2022/02/22/%E4%BB%8E%E9%9B%B6%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/step8.png" class>7.最终在Git Bash中可以查看是否成功，输入命令：<figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-attribute">ssh</span> -T git<span class="hljs-variable">@github</span>.com<br></code></pre></td></tr></table></figure>如果测试通了则会显示<blockquote><p>Hi xxx You’ve successfully authenticated….</p></blockquote>如果不通则通过下面两个步骤进行操作<figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs arcade">ssh-agent -s<br>ssh-add ~<span class="hljs-regexp">/.ssh/i</span>d_rsa<br></code></pre></td></tr></table></figure><h3 id="第四步：将Hexo部署到GitHub上"><a href="#第四步：将Hexo部署到GitHub上" class="headerlink" title="第四步：将Hexo部署到GitHub上"></a>第四步：将Hexo部署到GitHub上</h3><p>第二步完成后我们当前仅可以在本机访问与操作博客网页，因此我们需要把搭建好的Hexo框架部署到步骤一创建好的仓库上<br>1.首先在我们创建的博客文件夹（myBlog）中找到_config.yml并打开（notepad++等）</p><blockquote><p>_config.yml配置了与博客相关的内容，关于文件内部配置参数详细解释可以参考<a href="https://blog.csdn.net/zemprogram/article/details/104288872">_config.yml配置教程</a></p></blockquote><p>找到文件底部#Deployment配置参数，并设置type、repository与branch如图：</p><img src="/2022/02/22/%E4%BB%8E%E9%9B%B6%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/step3.png" class><p>其中type为部署的方法，repository为部署的仓库名称(即我们此前创建的仓库clone地址)，branch为分支(默认主支master)<br><em><strong>注意：</strong></em> type、repository、branch这些属性后面冒号要与git等相隔一个空格；respository此处属性应该按照图示设置，旧版本的*http：&#x2F;&#x2F;*形式不正确</p><p>2.回到本机博客文件夹，右击Git Bash Here，安装Git部署插件，输入命令：</p><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ada">npm install hexo-deployer-git <span class="hljs-comment">--save</span><br></code></pre></td></tr></table></figure><p>3.最后依次输入命令：</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs awk">hexo clean<span class="hljs-regexp">//</span>清除缓存文件 db.json 和已生成的静态文件 public<br>hexo g<span class="hljs-regexp">//</span>生成网站静态文件到默认设置的 public 文件夹<br>hexo d<span class="hljs-regexp">//</span>自动生成网站静态文件，并部署到设定的仓库<br></code></pre></td></tr></table></figure><p>部署成功后，在Git Bash中看到如下图表明博客在GitHub仓库部署成功：</p><img src="/2022/02/22/%E4%BB%8E%E9%9B%B6%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/step4.png" class><p>完成上述步骤后，打开浏览器，输入网址：<code>https://your_user_name.github.io</code> (此处为 minghuijia.github.io) 可以代替 <code>http://localhost:4000</code> 打开博客</p><h3 id="第五步：购买-x2F-解析域名"><a href="#第五步：购买-x2F-解析域名" class="headerlink" title="第五步：购买&#x2F;解析域名"></a>第五步：购买&#x2F;解析域名</h3><p>至此，我们已经可以通过 <code>https://minghuijia.github.io</code> 进行博客访问。但是为了方便记忆，我们可以在阿里云上购买一个域名。具体操作可以下载阿里云APP，并完成注册和实名认证进行购买<br>下面以阿里云为例<br>1.首先进入阿里云控制台首页</p><img src="/2022/02/22/%E4%BB%8E%E9%9B%B6%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/step9.png" class><p>然后点击“域名”进入域名控制台，对购买的域名进行解析</p><img src="/2022/02/22/%E4%BB%8E%E9%9B%B6%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/step10.png" class><p>我们需要添加3个解析路线<br>其中两个选择 <em><strong>A</strong></em> 记录类型，解析路线分别填写192.30.252.153 和 192.30.252.154（这是GitHub服务器的IPV4地址），解析路线选择默认<br>另一个选择 <em><strong>CNAME</strong></em> 记录类型，解析路线填写GitHub仓库访问的地址（eg. minghuijia.github.io）</p><img src="/2022/02/22/%E4%BB%8E%E9%9B%B6%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/step11.png" class><p>至此，在阿里云上的域名解析完成<br>2.接下来我们需要在本机创建存放博客框架的文件夹内（myBlog）打开source文件夹，创建一个名为 CNAME 的文件 <em><strong>切记CNAME文件没有后缀</strong></em> </p><img src="/2022/02/22/%E4%BB%8E%E9%9B%B6%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/step12.png" class><p>3.在文件内写入自己的域名。(不要加www否则每次访问都必须加www，但如果不带有www，以后访问的时候带不带www都可以访问)</p><div align="center"><img src="/2022/02/22/%E4%BB%8E%E9%9B%B6%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/step13.png" class title="align&#x3D;center"></div>4.回到myBlog文件夹下，依次输入<figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">hexo clean</span><br><span class="hljs-attribute">hexo g</span><br><span class="hljs-attribute">hexo d</span><br></code></pre></td></tr></table></figure>打开GitHub，查看CNAME文件是否在项目中。若没有该文件，则点击 Add file，自行添加即可<p>最终，你可以用自己申请的域名进行访问个人博客了！</p>]]></content>
    
    
    <categories>
      
      <category>hexo</category>
      
    </categories>
    
    
    <tags>
      
      <tag>hexo</tag>
      
      <tag>github</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
